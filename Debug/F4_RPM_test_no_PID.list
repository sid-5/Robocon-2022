
F4_RPM_test_no_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aac  08005aac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab4  08005ab4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000001c  08005ad8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005ad8  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e018  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  0002e064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00030898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001585f  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db9e  00000000  00000000  00046d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a857  00000000  00000000  000548a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df0fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000df150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a74 	.word	0x08005a74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08005a74 	.word	0x08005a74

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <HAL_TIM_IC_CaptureCallback>:
int passDebounce = 0;
//if PWM is not working then use max 40kHz of frequency for cytron driver


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  //direction set

 if (htim == &htim1)  // if interrupt source is channel 1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4e      	ldr	r2, [pc, #312]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d148      	bne.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
 {
  if (Is_First_Captured==0)  // is the first value captured ?
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10a      	bne.n	8000d2a <HAL_TIM_IC_CaptureCallback+0x2e>
  {
   IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000d14:	2100      	movs	r1, #0
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f003 fd24 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d20:	6013      	str	r3, [r2, #0]
   Is_First_Captured =1;  // set the first value captured as true
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e039      	b.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
  }

  else if (Is_First_Captured)  // if the first is captured
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d035      	beq.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
  {
   IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000d32:	2100      	movs	r1, #0
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f003 fd15 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d3e:	6013      	str	r3, [r2, #0]

   if (IC_Value2 > IC_Value1)
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d907      	bls.n	8000d5c <HAL_TIM_IC_CaptureCallback+0x60>
   {
    Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e011      	b.n	8000d80 <HAL_TIM_IC_CaptureCallback+0x84>
   }

   else if (IC_Value2 < IC_Value1)
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d209      	bcs.n	8000d7c <HAL_TIM_IC_CaptureCallback+0x80>
   {
    Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000d76:	4a36      	ldr	r2, [pc, #216]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e001      	b.n	8000d80 <HAL_TIM_IC_CaptureCallback+0x84>
   }

   else
   {
    Error_Handler();
 8000d7c:	f001 f862 	bl	8001e44 <Error_Handler>
   }

   Frequency = HAL_RCC_GetPCLK2Freq()/(50*Difference);  // calculate frequency
 8000d80:	f002 fe88 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8000d84:	4602      	mov	r2, r0
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2132      	movs	r1, #50	; 0x32
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d96:	6013      	str	r3, [r2, #0]


   Is_First_Captured = 0;  // reset the first captured
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  }
 }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 if (htim == &htim2)  // if interrupt source is channel 1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d148      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
  {
   if (Is_First_Captured2==0)  // is the first value captured ?
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc8>
   {
    IC_Value12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000dae:	2100      	movs	r1, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f003 fcd7 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dba:	6013      	str	r3, [r2, #0]
    Is_First_Captured2 =1;  // set the first value captured as true
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
    Frequency2 = HAL_RCC_GetPCLK2Freq()/(50*Difference2);  // calculate frequency

    Is_First_Captured2 = 0;  // reset the first captured
   }
  }
}
 8000dc2:	e039      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
   else if (Is_First_Captured2)  // if the first is captured
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d035      	beq.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
    IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f003 fcc8 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dd8:	6013      	str	r3, [r2, #0]
    if (IC_Value22 > IC_Value12)
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <HAL_TIM_IC_CaptureCallback+0xfa>
     Difference2 = IC_Value2-IC_Value12;   // calculate the difference
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e011      	b.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x11e>
    else if (IC_Value22 < IC_Value12)
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d209      	bcs.n	8000e16 <HAL_TIM_IC_CaptureCallback+0x11a>
     Difference2 = ((0xffff-IC_Value12)+IC_Value22) +1;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e001      	b.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x11e>
     Error_Handler();
 8000e16:	f001 f815 	bl	8001e44 <Error_Handler>
    Frequency2 = HAL_RCC_GetPCLK2Freq()/(50*Difference2);  // calculate frequency
 8000e1a:	f002 fe3b 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2132      	movs	r1, #50	; 0x32
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000e30:	6013      	str	r3, [r2, #0]
    Is_First_Captured2 = 0;  // reset the first captured
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000270 	.word	0x20000270
 8000e44:	2000004c 	.word	0x2000004c
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	20000040 	.word	0x20000040
 8000e50:	20000044 	.word	0x20000044
 8000e54:	20000048 	.word	0x20000048
 8000e58:	20000300 	.word	0x20000300
 8000e5c:	20000060 	.word	0x20000060
 8000e60:	20000050 	.word	0x20000050
 8000e64:	20000054 	.word	0x20000054
 8000e68:	20000058 	.word	0x20000058
 8000e6c:	2000005c 	.word	0x2000005c

08000e70 <stepper>:

void stepper(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,STEPPER_DIR_Pin,GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <stepper+0x3c>)
 8000e7c:	f002 f9bc 	bl	80031f8 <HAL_GPIO_WritePin>
	while(stepperCount<10){
 8000e80:	e003      	b.n	8000e8a <stepper+0x1a>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1,50);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <stepper+0x40>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
	while(stepperCount<10){
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <stepper+0x44>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	ddf7      	ble.n	8000e82 <stepper+0x12>
	}
	start_stepper=0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <stepper+0x48>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
	stepperCount=0;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <stepper+0x44>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1,0);
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <stepper+0x40>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	200000f4 	.word	0x200000f4
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	20000078 	.word	0x20000078

08000ebc <servo>:

void servo(){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	//90 degree rotation
	if(countServo==0 && debounce==0){
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <servo+0x58>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10e      	bne.n	8000ee6 <servo+0x2a>
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <servo+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10a      	bne.n	8000ee6 <servo+0x2a>
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,125);  // duty cycle is 2.5 ms
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <servo+0x60>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	227d      	movs	r2, #125	; 0x7d
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
	countServo=1;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <servo+0x58>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
	debounce =5;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <servo+0x5c>)
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	601a      	str	r2, [r3, #0]
	}else if(countServo==1 && debounce==0){
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
			countServo=0;
			debounce =5;
	}
}
 8000ee4:	e011      	b.n	8000f0a <servo+0x4e>
	}else if(countServo==1 && debounce==0){
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <servo+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10d      	bne.n	8000f0a <servo+0x4e>
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <servo+0x5c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <servo+0x4e>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <servo+0x60>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	63da      	str	r2, [r3, #60]	; 0x3c
			countServo=0;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <servo+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
			debounce =5;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <servo+0x5c>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000080 	.word	0x20000080
 8000f18:	20000084 	.word	0x20000084
 8000f1c:	2000013c 	.word	0x2000013c

08000f20 <passingMotor>:

void passingMotor(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	if(passMotor == 0 && passDebounce == 0){
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <passingMotor+0x6c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d114      	bne.n	8000f56 <passingMotor+0x36>
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <passingMotor+0x70>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d110      	bne.n	8000f56 <passingMotor+0x36>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3a:	4816      	ldr	r0, [pc, #88]	; (8000f94 <passingMotor+0x74>)
 8000f3c:	f002 f95c 	bl	80031f8 <HAL_GPIO_WritePin>

			  	  	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,32);
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <passingMotor+0x78>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2220      	movs	r2, #32
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
			  	  	 	passMotor=1;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <passingMotor+0x6c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
			  	  	 	passDebounce =5;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <passingMotor+0x70>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_SET);
					  	  	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,0);
					  	  	 	passMotor=0;
					  	  	 	passDebounce = 5;
	}
}
 8000f54:	e017      	b.n	8000f86 <passingMotor+0x66>
	}else if(passMotor == 1 && passDebounce == 0){
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <passingMotor+0x6c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d113      	bne.n	8000f86 <passingMotor+0x66>
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <passingMotor+0x70>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10f      	bne.n	8000f86 <passingMotor+0x66>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <passingMotor+0x74>)
 8000f6e:	f002 f943 	bl	80031f8 <HAL_GPIO_WritePin>
					  	  	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,0);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <passingMotor+0x78>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
					  	  	 	passMotor=0;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <passingMotor+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
					  	  	 	passDebounce = 5;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <passingMotor+0x70>)
 8000f82:	2205      	movs	r2, #5
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000a0 	.word	0x200000a0
 8000f90:	200000a4 	.word	0x200000a4
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	200000ac 	.word	0x200000ac

08000f9c <VerticalMotor>:
		laserDebounce = 5;
	}

}

void VerticalMotor(int dir){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	if(dir== 0 && dir1 == 0 && linearDebounce==0){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <VerticalMotor+0x40>
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <VerticalMotor+0xd8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d114      	bne.n	8000fdc <VerticalMotor+0x40>
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <VerticalMotor+0xdc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d110      	bne.n	8000fdc <VerticalMotor+0x40>
		 HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	482f      	ldr	r0, [pc, #188]	; (800107c <VerticalMotor+0xe0>)
 8000fc0:	f002 f91a 	bl	80031f8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	482d      	ldr	r0, [pc, #180]	; (8001080 <VerticalMotor+0xe4>)
 8000fca:	f002 f915 	bl	80031f8 <HAL_GPIO_WritePin>
		 dir1 = 1;
 8000fce:	4b29      	ldr	r3, [pc, #164]	; (8001074 <VerticalMotor+0xd8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		 linearDebounce= 5;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <VerticalMotor+0xdc>)
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e015      	b.n	8001008 <VerticalMotor+0x6c>
	}else if(dir ==0 && dir1 == 1 && linearDebounce==0){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d112      	bne.n	8001008 <VerticalMotor+0x6c>
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <VerticalMotor+0xd8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10e      	bne.n	8001008 <VerticalMotor+0x6c>
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <VerticalMotor+0xdc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <VerticalMotor+0x6c>
		 HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	4821      	ldr	r0, [pc, #132]	; (800107c <VerticalMotor+0xe0>)
 8000ff8:	f002 f8fe 	bl	80031f8 <HAL_GPIO_WritePin>
				 dir1=0;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <VerticalMotor+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
				 linearDebounce=5;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <VerticalMotor+0xdc>)
 8001004:	2205      	movs	r2, #5
 8001006:	601a      	str	r2, [r3, #0]
	}
	if(dir ==1 && dir2==0 && linearDebounce==0){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d118      	bne.n	8001040 <VerticalMotor+0xa4>
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <VerticalMotor+0xe8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d114      	bne.n	8001040 <VerticalMotor+0xa4>
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <VerticalMotor+0xdc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d110      	bne.n	8001040 <VerticalMotor+0xa4>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <VerticalMotor+0xe0>)
 8001024:	f002 f8e8 	bl	80031f8 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2120      	movs	r1, #32
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <VerticalMotor+0xe4>)
 800102e:	f002 f8e3 	bl	80031f8 <HAL_GPIO_WritePin>
		 dir2 = 1;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <VerticalMotor+0xe8>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
		 linearDebounce=5;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <VerticalMotor+0xdc>)
 800103a:	2205      	movs	r2, #5
 800103c:	601a      	str	r2, [r3, #0]

		 dir2 = 0;
		 linearDebounce=5;
	}

}
 800103e:	e015      	b.n	800106c <VerticalMotor+0xd0>
	}else if(dir == 1 && dir2==1 && linearDebounce==0){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d112      	bne.n	800106c <VerticalMotor+0xd0>
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <VerticalMotor+0xe8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10e      	bne.n	800106c <VerticalMotor+0xd0>
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <VerticalMotor+0xdc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <VerticalMotor+0xd0>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <VerticalMotor+0xe0>)
 800105c:	f002 f8cc 	bl	80031f8 <HAL_GPIO_WritePin>
		 dir2 = 0;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <VerticalMotor+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
		 linearDebounce=5;
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <VerticalMotor+0xdc>)
 8001068:	2205      	movs	r2, #5
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000094 	.word	0x20000094
 8001078:	2000000c 	.word	0x2000000c
 800107c:	40020000 	.word	0x40020000
 8001080:	40020800 	.word	0x40020800
 8001084:	20000098 	.word	0x20000098

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 fa3c 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 fa38 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fda0 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001098:	f000 fd7e 	bl	8001b98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800109c:	f000 fd52 	bl	8001b44 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010a0:	f000 fb0c 	bl	80016bc <MX_TIM2_Init>
  MX_TIM4_Init();
 80010a4:	f000 fbd4 	bl	8001850 <MX_TIM4_Init>
  MX_TIM1_Init();
 80010a8:	f000 fa94 	bl	80015d4 <MX_TIM1_Init>
  MX_TIM9_Init();
 80010ac:	f000 fcc2 	bl	8001a34 <MX_TIM9_Init>
  MX_TIM5_Init();
 80010b0:	f000 fc48 	bl	8001944 <MX_TIM5_Init>
  MX_TIM10_Init();
 80010b4:	f000 fcf8 	bl	8001aa8 <MX_TIM10_Init>
  MX_TIM3_Init();
 80010b8:	f000 fb70 	bl	800179c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//Locomotion
 80010bc:	2100      	movs	r1, #0
 80010be:	48ac      	ldr	r0, [pc, #688]	; (8001370 <main+0x2e8>)
 80010c0:	f002 fdfe 	bl	8003cc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//Locomotion
 80010c4:	2104      	movs	r1, #4
 80010c6:	48aa      	ldr	r0, [pc, #680]	; (8001370 <main+0x2e8>)
 80010c8:	f002 fdfa 	bl	8003cc0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);//Passing
 80010cc:	2108      	movs	r1, #8
 80010ce:	48a8      	ldr	r0, [pc, #672]	; (8001370 <main+0x2e8>)
 80010d0:	f002 fdf6 	bl	8003cc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);//Lifting
 80010d4:	210c      	movs	r1, #12
 80010d6:	48a6      	ldr	r0, [pc, #664]	; (8001370 <main+0x2e8>)
 80010d8:	f002 fdf2 	bl	8003cc0 <HAL_TIM_PWM_Start>

	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);//BLDC1
 80010dc:	2100      	movs	r1, #0
 80010de:	48a5      	ldr	r0, [pc, #660]	; (8001374 <main+0x2ec>)
 80010e0:	f002 fdee 	bl	8003cc0 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);//BLDC2
 80010e4:	2104      	movs	r1, #4
 80010e6:	48a3      	ldr	r0, [pc, #652]	; (8001374 <main+0x2ec>)
 80010e8:	f002 fdea 	bl	8003cc0 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);//Servo
 80010ec:	2108      	movs	r1, #8
 80010ee:	48a1      	ldr	r0, [pc, #644]	; (8001374 <main+0x2ec>)
 80010f0:	f002 fde6 	bl	8003cc0 <HAL_TIM_PWM_Start>

	 HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);//Stepper
 80010f4:	2100      	movs	r1, #0
 80010f6:	48a0      	ldr	r0, [pc, #640]	; (8001378 <main+0x2f0>)
 80010f8:	f002 fde2 	bl	8003cc0 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);//Encoder
 80010fc:	2100      	movs	r1, #0
 80010fe:	489f      	ldr	r0, [pc, #636]	; (800137c <main+0x2f4>)
 8001100:	f002 fee8 	bl	8003ed4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001104:	2100      	movs	r1, #0
 8001106:	489e      	ldr	r0, [pc, #632]	; (8001380 <main+0x2f8>)
 8001108:	f002 fee4 	bl	8003ed4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim9);
 800110c:	489d      	ldr	r0, [pc, #628]	; (8001384 <main+0x2fc>)
 800110e:	f002 fd25 	bl	8003b5c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxData, 3);
 8001112:	2203      	movs	r2, #3
 8001114:	499c      	ldr	r1, [pc, #624]	; (8001388 <main+0x300>)
 8001116:	489d      	ldr	r0, [pc, #628]	; (800138c <main+0x304>)
 8001118:	f004 f83f 	bl	800519a <HAL_UART_Receive_DMA>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
 800111c:	4b94      	ldr	r3, [pc, #592]	; (8001370 <main+0x2e8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2232      	movs	r2, #50	; 0x32
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,0);//bldc default 030:94:35:32:df:3e
 8001124:	4b93      	ldr	r3, [pc, #588]	; (8001374 <main+0x2ec>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);
 800112c:	4b91      	ldr	r3, [pc, #580]	; (8001374 <main+0x2ec>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
 8001134:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <main+0x2ec>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2232      	movs	r2, #50	; 0x32
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(GPIOE, Laser_pointer_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001142:	4893      	ldr	r0, [pc, #588]	; (8001390 <main+0x308>)
 8001144:	f002 f858 	bl	80031f8 <HAL_GPIO_WritePin>
	////////////////////////////

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,100);
 8001148:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <main+0x2ec>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2264      	movs	r2, #100	; 0x64
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag){
 8001150:	4b90      	ldr	r3, [pc, #576]	; (8001394 <main+0x30c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8085 	beq.w	8001264 <main+0x1dc>
	  	  	  		speed = Frequency/30;
 800115a:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <main+0x310>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8f      	ldr	r2, [pc, #572]	; (800139c <main+0x314>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	461a      	mov	r2, r3
 8001168:	4b8d      	ldr	r3, [pc, #564]	; (80013a0 <main+0x318>)
 800116a:	601a      	str	r2, [r3, #0]
	  	  	  		speed2 = Frequency2/30;
 800116c:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <main+0x31c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a8a      	ldr	r2, [pc, #552]	; (800139c <main+0x314>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	461a      	mov	r2, r3
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <main+0x320>)
 800117c:	601a      	str	r2, [r3, #0]
	  	  	  		errorSum = errorSum + (target - speed)*0.1;
 800117e:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <main+0x324>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f96a 	bl	800045c <__aeabi_ui2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <main+0x328>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <main+0x318>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f970 	bl	800047c <__aeabi_i2d>
 800119c:	a372      	add	r3, pc, #456	; (adr r3, 8001368 <main+0x2e0>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f9d5 	bl	8000550 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff f819 	bl	80001e4 <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc03 	bl	80009c4 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <main+0x324>)
 80011c2:	6013      	str	r3, [r2, #0]
	  	  	  	PID = (target-speed)*KP + KD*(speed - prev_speed)/0.1;// + KI*errorSum;
 80011c4:	4b7a      	ldr	r3, [pc, #488]	; (80013b0 <main+0x328>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b75      	ldr	r3, [pc, #468]	; (80013a0 <main+0x318>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	4b77      	ldr	r3, [pc, #476]	; (80013b4 <main+0x32c>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	ee17 0a90 	vmov	r0, s15
 80011e4:	f7ff f95c 	bl	80004a0 <__aeabi_f2d>
 80011e8:	4604      	mov	r4, r0
 80011ea:	460d      	mov	r5, r1
 80011ec:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <main+0x318>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <main+0x330>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <main+0x334>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	ee17 0a90 	vmov	r0, s15
 800120c:	f7ff f948 	bl	80004a0 <__aeabi_f2d>
 8001210:	a355      	add	r3, pc, #340	; (adr r3, 8001368 <main+0x2e0>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff fac5 	bl	80007a4 <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7fe ffdf 	bl	80001e4 <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fba1 	bl	8000974 <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	4a62      	ldr	r2, [pc, #392]	; (80013c0 <main+0x338>)
 8001236:	6013      	str	r3, [r2, #0]
	  	  	  		  if(PID<0){
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <main+0x338>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da03      	bge.n	8001248 <main+0x1c0>
	  	  	  			  PID = 0;
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <main+0x338>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e006      	b.n	8001256 <main+0x1ce>
	  	  	  		  }else if(PID>100){
 8001248:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <main+0x338>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	dd02      	ble.n	8001256 <main+0x1ce>
	  	  	  			  PID = 100;
 8001250:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <main+0x338>)
 8001252:	2264      	movs	r2, #100	; 0x64
 8001254:	601a      	str	r2, [r3, #0]
	  	  	  		  }
	  	  	  		  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PID);// PID*100/target);
	  	  	  		  prev_speed = speed;
 8001256:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <main+0x318>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <main+0x330>)
 800125c:	6013      	str	r3, [r2, #0]
	  	  	  		  flag = 0;
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <main+0x30c>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
	  	  	  	  }

	  	  if(rxData[0] == 1) //up//Button Up
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <main+0x300>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d114      	bne.n	8001296 <main+0x20e>
	  	  		{
	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	4854      	ldr	r0, [pc, #336]	; (80013c4 <main+0x33c>)
 8001274:	f001 ffc0 	bl	80031f8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4851      	ldr	r0, [pc, #324]	; (80013c4 <main+0x33c>)
 8001280:	f001 ffba 	bl	80031f8 <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <main+0x2e8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2264      	movs	r2, #100	; 0x64
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <main+0x2e8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2264      	movs	r2, #100	; 0x64
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
 8001294:	e75c      	b.n	8001150 <main+0xc8>
	  	  		}

	  	  //Down // Button Down
	  	  		else if (rxData[0] == 2)
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <main+0x300>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d114      	bne.n	80012c8 <main+0x240>
	  	  		{
	  	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a4:	4847      	ldr	r0, [pc, #284]	; (80013c4 <main+0x33c>)
 80012a6:	f001 ffa7 	bl	80031f8 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	4844      	ldr	r0, [pc, #272]	; (80013c4 <main+0x33c>)
 80012b2:	f001 ffa1 	bl	80031f8 <HAL_GPIO_WritePin>

	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <main+0x2e8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2264      	movs	r2, #100	; 0x64
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <main+0x2e8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2264      	movs	r2, #100	; 0x64
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
 80012c6:	e743      	b.n	8001150 <main+0xc8>
	  	  		}

	  	  		//left // Button Left
	  	  		else if (rxData[0] == 3)
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <main+0x300>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d114      	bne.n	80012fa <main+0x272>
	  	  		{
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	483b      	ldr	r0, [pc, #236]	; (80013c4 <main+0x33c>)
 80012d8:	f001 ff8e 	bl	80031f8 <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4838      	ldr	r0, [pc, #224]	; (80013c4 <main+0x33c>)
 80012e4:	f001 ff88 	bl	80031f8 <HAL_GPIO_WritePin>

	  	  		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100);
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <main+0x2e8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2264      	movs	r2, #100	; 0x64
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
	  		        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <main+0x2e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
 80012f8:	e72a      	b.n	8001150 <main+0xc8>
	  	    }

	  	  	  //right // Button Rights
	  	  		else if (rxData[0] == 4)
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <main+0x300>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d114      	bne.n	800132c <main+0x2a4>
	  	  		{
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <main+0x33c>)
 800130a:	f001 ff75 	bl	80031f8 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <main+0x33c>)
 8001316:	f001 ff6f 	bl	80031f8 <HAL_GPIO_WritePin>

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <main+0x2e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2264      	movs	r2, #100	; 0x64
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
				    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <main+0x2e8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2264      	movs	r2, #100	; 0x64
 8001328:	639a      	str	r2, [r3, #56]	; 0x38
 800132a:	e711      	b.n	8001150 <main+0xc8>
	  	    }

	  	  	  //PASSING //Button Square
	  	  	else if (rxData[0] == 5)
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <main+0x300>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d102      	bne.n	800133a <main+0x2b2>
	  	  	{
	  	  		//Passing on
	  	  		passingMotor();
 8001334:	f7ff fdf4 	bl	8000f20 <passingMotor>
 8001338:	e70a      	b.n	8001150 <main+0xc8>
//	  	  					bldcDebounce = 5;
//	  	  		  	  		}
	  	  	}

	  	 //toggle servo//Button Circle
	  	  	else if (rxData[0] == 6)
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <main+0x300>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b06      	cmp	r3, #6
 8001340:	d102      	bne.n	8001348 <main+0x2c0>
	  	  	 {
	  	  	servo();
 8001342:	f7ff fdbb 	bl	8000ebc <servo>
 8001346:	e703      	b.n	8001150 <main+0xc8>

	  	  	 }

	  	    //toggle linear actuator down  //Button L1
	  	  	else if(rxData[0] == 7){
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <main+0x300>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d103      	bne.n	8001358 <main+0x2d0>
	  	  	// HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_SET);
			 //HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR2_Pin, GPIO_PIN_SET);
				VerticalMotor(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff fe23 	bl	8000f9c <VerticalMotor>
 8001356:	e6fb      	b.n	8001150 <main+0xc8>
	  			 //HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
	  			 //HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
	  	  	}

			//toggle linear actuator up	  //Button R1
	  	  	else if(rxData[0] == 9){
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <main+0x300>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d133      	bne.n	80013c8 <main+0x340>
	  	  	 //HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_SET);
	  	  		//	 HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR2_Pin, GPIO_PIN_RESET);
	  	  			 VerticalMotor(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fe1b 	bl	8000f9c <VerticalMotor>
 8001366:	e6f3      	b.n	8001150 <main+0xc8>
 8001368:	9999999a 	.word	0x9999999a
 800136c:	3fb99999 	.word	0x3fb99999
 8001370:	200000ac 	.word	0x200000ac
 8001374:	2000013c 	.word	0x2000013c
 8001378:	200000f4 	.word	0x200000f4
 800137c:	20000270 	.word	0x20000270
 8001380:	20000300 	.word	0x20000300
 8001384:	200002b8 	.word	0x200002b8
 8001388:	200000a8 	.word	0x200000a8
 800138c:	2000022c 	.word	0x2000022c
 8001390:	40021000 	.word	0x40021000
 8001394:	20000038 	.word	0x20000038
 8001398:	20000048 	.word	0x20000048
 800139c:	88888889 	.word	0x88888889
 80013a0:	2000006c 	.word	0x2000006c
 80013a4:	2000005c 	.word	0x2000005c
 80013a8:	20000070 	.word	0x20000070
 80013ac:	20000068 	.word	0x20000068
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000074 	.word	0x20000074
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000064 	.word	0x20000064
 80013c4:	40020c00 	.word	0x40020c00
	  	  		// HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
	  	  		// HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
	  	  	}

	  	   //BLDC ON //Button L2
	  	  	else if(rxData[0] == 8){
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <main+0x45c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d133      	bne.n	8001438 <main+0x3b0>
//	  	  	 HAL_GPIO_WritePin(GPIOA, BLDC_PWM1_Pin, GPIO_PIN_SET);
//	  	  	 HAL_GPIO_WritePin(GPIOA, BLDC_PWM2_Pin, GPIO_PIN_SET);
				if(countBldc==0 && bldcDebounce == 0){
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <main+0x460>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d114      	bne.n	8001402 <main+0x37a>
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <main+0x464>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d110      	bne.n	8001402 <main+0x37a>
					HAL_GPIO_WritePin(GPIOC, BLDC_1_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4842      	ldr	r0, [pc, #264]	; (80014f0 <main+0x468>)
 80013e6:	f001 ff07 	bl	80031f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, BLDC_2_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2104      	movs	r1, #4
 80013ee:	4840      	ldr	r0, [pc, #256]	; (80014f0 <main+0x468>)
 80013f0:	f001 ff02 	bl	80031f8 <HAL_GPIO_WritePin>
					countBldc=1;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <main+0x460>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
					bldcDebounce = 5;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <main+0x464>)
 80013fc:	2205      	movs	r2, #5
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e06f      	b.n	80014e2 <main+0x45a>
					}
				else if(countBldc==1 && bldcDebounce == 0){
 8001402:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <main+0x460>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	f47f aea2 	bne.w	8001150 <main+0xc8>
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <main+0x464>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f ae9d 	bne.w	8001150 <main+0xc8>
					HAL_GPIO_WritePin(GPIOC, BLDC_2_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2104      	movs	r1, #4
 800141a:	4835      	ldr	r0, [pc, #212]	; (80014f0 <main+0x468>)
 800141c:	f001 feec 	bl	80031f8 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, BLDC_1_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4832      	ldr	r0, [pc, #200]	; (80014f0 <main+0x468>)
 8001426:	f001 fee7 	bl	80031f8 <HAL_GPIO_WritePin>
					countBldc=0;
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <main+0x460>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <main+0x464>)
 8001432:	2205      	movs	r2, #5
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e68b      	b.n	8001150 <main+0xc8>
//	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,1000);
//	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,1000);
	  	  	}

	  	  // Stepper 90 deg//Button R2
	  	  	else if(rxData[0] == 10){
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <main+0x45c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b0a      	cmp	r3, #10
 800143e:	d105      	bne.n	800144c <main+0x3c4>
				start_stepper = 1;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <main+0x46c>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
				stepper();
 8001446:	f7ff fd13 	bl	8000e70 <stepper>
 800144a:	e681      	b.n	8001150 <main+0xc8>
	  	  	}
	  	  	  //Lifting Up //Button Triangle
	  	  	else if(rxData[0] == 11){
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <main+0x45c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b0b      	cmp	r3, #11
 8001452:	d10a      	bne.n	800146a <main+0x3e2>
				 HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <main+0x470>)
 800145c:	f001 fecc 	bl	80031f8 <HAL_GPIO_WritePin>

				 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,250);
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <main+0x474>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	22fa      	movs	r2, #250	; 0xfa
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
 8001468:	e672      	b.n	8001150 <main+0xc8>
	  	  	}
	  	  	  //Lifting Down// Button Cross
	  	  	else if(rxData[0] == 12){
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <main+0x45c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d10a      	bne.n	8001488 <main+0x400>
	  	  	  	  HAL_GPIO_WritePin(GPIOD,  LiftingMotor_DIR_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001478:	481f      	ldr	r0, [pc, #124]	; (80014f8 <main+0x470>)
 800147a:	f001 febd 	bl	80031f8 <HAL_GPIO_WritePin>

				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,250);
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <main+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	22fa      	movs	r2, #250	; 0xfa
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	e663      	b.n	8001150 <main+0xc8>
	  	  	else{
	  	  	  	  		  	//repeating block to set PID frequency and setting tp zero
//	  	  	  	  	  check = 0;
//	  	  	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  	  	  	  		  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	  	  	HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_RESET); //linearActuator
 8001488:	2200      	movs	r2, #0
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <main+0x468>)
 800148e:	f001 feb3 	bl	80031f8 <HAL_GPIO_WritePin>
	  	  	  	  		  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <main+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  		  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,0);
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <main+0x474>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38

	  	  	  	  		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET );
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <main+0x470>)
 80014aa:	f001 fea5 	bl	80031f8 <HAL_GPIO_WritePin>
	  	  	  	  		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET );
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <main+0x470>)
 80014b6:	f001 fe9f 	bl	80031f8 <HAL_GPIO_WritePin>

	  	  	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);//locomotion 0
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <main+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,0);
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <main+0x474>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38


	  	  	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0);//lifting 0
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <main+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40

	  	  	  	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,0);//BLDC 0
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <main+0x478>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);//BLDC 0
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <main+0x478>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38
	  if(flag){
 80014e2:	e635      	b.n	8001150 <main+0xc8>
 80014e4:	200000a8 	.word	0x200000a8
 80014e8:	2000008c 	.word	0x2000008c
 80014ec:	20000090 	.word	0x20000090
 80014f0:	40020800 	.word	0x40020800
 80014f4:	20000078 	.word	0x20000078
 80014f8:	40020c00 	.word	0x40020c00
 80014fc:	200000ac 	.word	0x200000ac
 8001500:	2000013c 	.word	0x2000013c

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f004 faa6 	bl	8005a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SystemClock_Config+0xc8>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a26      	ldr	r2, [pc, #152]	; (80015cc <SystemClock_Config+0xc8>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <SystemClock_Config+0xc8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <SystemClock_Config+0xcc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <SystemClock_Config+0xcc>)
 800154e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <SystemClock_Config+0xcc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	2310      	movs	r3, #16
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	2302      	movs	r3, #2
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001570:	2300      	movs	r3, #0
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001574:	2308      	movs	r3, #8
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001578:	2332      	movs	r3, #50	; 0x32
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fe4f 	bl	800322c <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001594:	f000 fc56 	bl	8001e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f8b2 	bl	800371c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015be:	f000 fc41 	bl	8001e44 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	; 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001600:	4a2d      	ldr	r2, [pc, #180]	; (80016b8 <MX_TIM1_Init+0xe4>)
 8001602:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <MX_TIM1_Init+0xe0>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001616:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <MX_TIM1_Init+0xe0>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <MX_TIM1_Init+0xe0>)
 800162c:	f002 fa46 	bl	8003abc <HAL_TIM_Base_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001636:	f000 fc05 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4619      	mov	r1, r3
 8001646:	481b      	ldr	r0, [pc, #108]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001648:	f002 ffc4 	bl	80045d4 <HAL_TIM_ConfigClockSource>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001652:	f000 fbf7 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001656:	4817      	ldr	r0, [pc, #92]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001658:	f002 fbe2 	bl	8003e20 <HAL_TIM_IC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001662:	f000 fbef 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <MX_TIM1_Init+0xe0>)
 8001676:	f003 fcc1 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001680:	f000 fbe0 	bl	8001e44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001688:	2301      	movs	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_TIM1_Init+0xe0>)
 800169c:	f002 fe3c 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016a6:	f000 fbcd 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000270 	.word	0x20000270
 80016b8:	40010000 	.word	0x40010000

080016bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <MX_TIM2_Init+0xdc>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <MX_TIM2_Init+0xdc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_TIM2_Init+0xdc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <MX_TIM2_Init+0xdc>)
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_TIM2_Init+0xdc>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_TIM2_Init+0xdc>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170e:	4822      	ldr	r0, [pc, #136]	; (8001798 <MX_TIM2_Init+0xdc>)
 8001710:	f002 f9d4 	bl	8003abc <HAL_TIM_Base_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800171a:	f000 fb93 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4619      	mov	r1, r3
 800172a:	481b      	ldr	r0, [pc, #108]	; (8001798 <MX_TIM2_Init+0xdc>)
 800172c:	f002 ff52 	bl	80045d4 <HAL_TIM_ConfigClockSource>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001736:	f000 fb85 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800173a:	4817      	ldr	r0, [pc, #92]	; (8001798 <MX_TIM2_Init+0xdc>)
 800173c:	f002 fb70 	bl	8003e20 <HAL_TIM_IC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001746:	f000 fb7d 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <MX_TIM2_Init+0xdc>)
 800175a:	f003 fc4f 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001764:	f000 fb6e 	bl	8001e44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001768:	2300      	movs	r3, #0
 800176a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800176c:	2301      	movs	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <MX_TIM2_Init+0xdc>)
 8001780:	f002 fdca 	bl	8004318 <HAL_TIM_IC_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800178a:	f000 fb5b 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000300 	.word	0x20000300

0800179c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_TIM3_Init+0xac>)
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <MX_TIM3_Init+0xb0>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_TIM3_Init+0xac>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_TIM3_Init+0xac>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_TIM3_Init+0xac>)
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_TIM3_Init+0xac>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_TIM3_Init+0xac>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017e4:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_TIM3_Init+0xac>)
 80017e6:	f002 fa1b 	bl	8003c20 <HAL_TIM_PWM_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017f0:	f000 fb28 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4619      	mov	r1, r3
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <MX_TIM3_Init+0xac>)
 8001804:	f003 fbfa 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800180e:	f000 fb19 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001812:	2360      	movs	r3, #96	; 0x60
 8001814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	4619      	mov	r1, r3
 8001828:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM3_Init+0xac>)
 800182a:	f002 fe11 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001834:	f000 fb06 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM3_Init+0xac>)
 800183a:	f000 fc65 	bl	8002108 <HAL_TIM_MspPostInit>

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000184 	.word	0x20000184
 800184c:	40000400 	.word	0x40000400

08001850 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <MX_TIM4_Init+0xec>)
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <MX_TIM4_Init+0xf0>)
 8001876:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_TIM4_Init+0xec>)
 800187a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <MX_TIM4_Init+0xec>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_TIM4_Init+0xec>)
 8001888:	2264      	movs	r2, #100	; 0x64
 800188a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_TIM4_Init+0xec>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_TIM4_Init+0xec>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_TIM4_Init+0xec>)
 800189a:	f002 f9c1 	bl	8003c20 <HAL_TIM_PWM_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 face 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4619      	mov	r1, r3
 80018b6:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_TIM4_Init+0xec>)
 80018b8:	f003 fba0 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80018c2:	f000 fabf 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	; 0x60
 80018c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	4817      	ldr	r0, [pc, #92]	; (800193c <MX_TIM4_Init+0xec>)
 80018de:	f002 fdb7 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80018e8:	f000 faac 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4812      	ldr	r0, [pc, #72]	; (800193c <MX_TIM4_Init+0xec>)
 80018f4:	f002 fdac 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018fe:	f000 faa1 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2208      	movs	r2, #8
 8001906:	4619      	mov	r1, r3
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_TIM4_Init+0xec>)
 800190a:	f002 fda1 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001914:	f000 fa96 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	220c      	movs	r2, #12
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM4_Init+0xec>)
 8001920:	f002 fd96 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800192a:	f000 fa8b 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM4_Init+0xec>)
 8001930:	f000 fbea 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000ac 	.word	0x200000ac
 8001940:	40000800 	.word	0x40000800

08001944 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001976:	4a2e      	ldr	r2, [pc, #184]	; (8001a30 <MX_TIM5_Init+0xec>)
 8001978:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_TIM5_Init+0xe8>)
 800197c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001980:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_TIM5_Init+0xe8>)
 800198a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800199c:	4823      	ldr	r0, [pc, #140]	; (8001a2c <MX_TIM5_Init+0xe8>)
 800199e:	f002 f88d 	bl	8003abc <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80019a8:	f000 fa4c 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b6:	4619      	mov	r1, r3
 80019b8:	481c      	ldr	r0, [pc, #112]	; (8001a2c <MX_TIM5_Init+0xe8>)
 80019ba:	f002 fe0b 	bl	80045d4 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80019c4:	f000 fa3e 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019c8:	4818      	ldr	r0, [pc, #96]	; (8001a2c <MX_TIM5_Init+0xe8>)
 80019ca:	f002 f929 	bl	8003c20 <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80019d4:	f000 fa36 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <MX_TIM5_Init+0xe8>)
 80019e8:	f003 fb08 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80019f2:	f000 fa27 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f6:	2360      	movs	r3, #96	; 0x60
 80019f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001a0e:	f002 fd1f 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001a18:	f000 fa14 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM5_Init+0xe8>)
 8001a1e:	f000 fb73 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3738      	adds	r7, #56	; 0x38
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000013c 	.word	0x2000013c
 8001a30:	40000c00 	.word	0x40000c00

08001a34 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <MX_TIM9_Init+0x70>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50000-1;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a4e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a52:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a5c:	2264      	movs	r2, #100	; 0x64
 8001a5e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a6e:	f002 f825 	bl	8003abc <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a78:	f000 f9e4 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a80:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM9_Init+0x6c>)
 8001a88:	f002 fda4 	bl	80045d4 <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001a92:	f000 f9d7 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40014000 	.word	0x40014000

08001aa8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <MX_TIM10_Init+0x98>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000-1;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001acc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ada:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ae8:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001aea:	f001 ffe7 	bl	8003abc <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001af4:	f000 f9a6 	bl	8001e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001af8:	4810      	ldr	r0, [pc, #64]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001afa:	f002 f891 	bl	8003c20 <HAL_TIM_PWM_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001b04:	f000 f99e 	bl	8001e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001b20:	f002 fc96 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001b2a:	f000 f98b 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM10_Init+0x94>)
 8001b30:	f000 faea 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200000f4 	.word	0x200000f4
 8001b40:	40014400 	.word	0x40014400

08001b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART1_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	f003 fac0 	bl	8005100 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f95d 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000022c 	.word	0x2000022c
 8001b94:	40011000 	.word	0x40011000

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_DMA_Init+0x3c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	203a      	movs	r0, #58	; 0x3a
 8001bc0:	f000 fdef 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bc4:	203a      	movs	r0, #58	; 0x3a
 8001bc6:	f000 fe08 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001bf8:	f043 0310 	orr.w	r3, r3, #16
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a41      	ldr	r2, [pc, #260]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a3a      	ldr	r2, [pc, #232]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <MX_GPIO_Init+0x178>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BLDC1_brk_Pin|BLDC2_brk_Pin|GPIO2_1_Pin|GPIO2_2_Pin
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f641 013c 	movw	r1, #6204	; 0x183c
 8001c80:	4834      	ldr	r0, [pc, #208]	; (8001d54 <MX_GPIO_Init+0x17c>)
 8001c82:	f001 fab9 	bl	80031f8 <HAL_GPIO_WritePin>
                          |Laser_pointer_Pin|GPIO3_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLDC_1_Pin|BLDC_2_Pin|Motor3_DIR1_Pin|LinearActuator_dir_Pin
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001c8c:	4832      	ldr	r0, [pc, #200]	; (8001d58 <MX_GPIO_Init+0x180>)
 8001c8e:	f001 fab3 	bl	80031f8 <HAL_GPIO_WritePin>
                          |LinearActuator_EN_Pin|LinearActuator_DIR1_Pin|LinearActuator_DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LinearActuator_en_GPIO_Port, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	4831      	ldr	r0, [pc, #196]	; (8001d5c <MX_GPIO_Init+0x184>)
 8001c98:	f001 faae 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin|LiftingMotor_DIR_Pin|LOCO_DIR1_Pin|LOCO_DIR2_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8001ca2:	482f      	ldr	r0, [pc, #188]	; (8001d60 <MX_GPIO_Init+0x188>)
 8001ca4:	f001 faa8 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cae:	482d      	ldr	r0, [pc, #180]	; (8001d64 <MX_GPIO_Init+0x18c>)
 8001cb0:	f001 faa2 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLDC1_brk_Pin BLDC2_brk_Pin GPIO2_1_Pin GPIO2_2_Pin
                           Laser_pointer_Pin GPIO3_2_Pin */
  GPIO_InitStruct.Pin = BLDC1_brk_Pin|BLDC2_brk_Pin|GPIO2_1_Pin|GPIO2_2_Pin
 8001cb4:	f641 033c 	movw	r3, #6204	; 0x183c
 8001cb8:	617b      	str	r3, [r7, #20]
                          |Laser_pointer_Pin|GPIO3_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <MX_GPIO_Init+0x17c>)
 8001cce:	f001 f90f 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLDC_1_Pin BLDC_2_Pin Motor3_DIR1_Pin LinearActuator_dir_Pin
                           LinearActuator_EN_Pin LinearActuator_DIR1_Pin LinearActuator_DIR2_Pin */
  GPIO_InitStruct.Pin = BLDC_1_Pin|BLDC_2_Pin|Motor3_DIR1_Pin|LinearActuator_dir_Pin
 8001cd2:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8001cd6:	617b      	str	r3, [r7, #20]
                          |LinearActuator_EN_Pin|LinearActuator_DIR1_Pin|LinearActuator_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481b      	ldr	r0, [pc, #108]	; (8001d58 <MX_GPIO_Init+0x180>)
 8001cec:	f001 f900 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LinearActuator_en_Pin */
  GPIO_InitStruct.Pin = LinearActuator_en_Pin;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LinearActuator_en_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4815      	ldr	r0, [pc, #84]	; (8001d5c <MX_GPIO_Init+0x184>)
 8001d08:	f001 f8f2 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PassingMotor_DIR_Pin LiftingMotor_DIR_Pin LOCO_DIR1_Pin LOCO_DIR2_Pin */
  GPIO_InitStruct.Pin = PassingMotor_DIR_Pin|LiftingMotor_DIR_Pin|LOCO_DIR1_Pin|LOCO_DIR2_Pin;
 8001d0c:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <MX_GPIO_Init+0x188>)
 8001d26:	f001 f8e3 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
 8001d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <MX_GPIO_Init+0x18c>)
 8001d44:	f001 f8d4 	bl	8002ef0 <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	//test +=1;

	if(laserDebounce>0){
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd04      	ble.n	8001d82 <HAL_TIM_PeriodElapsedCallback+0x1a>
		laserDebounce--;
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d80:	6013      	str	r3, [r2, #0]
	}
	if(passDebounce>0){
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dd04      	ble.n	8001d94 <HAL_TIM_PeriodElapsedCallback+0x2c>
		passDebounce--;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001d92:	6013      	str	r3, [r2, #0]
	}

	if(linearDebounce>0){
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dd04      	ble.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		linearDebounce--;
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001da4:	6013      	str	r3, [r2, #0]

	}
	if(bldcDebounce>0){
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	dd04      	ble.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x50>
		bldcDebounce--;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001db6:	6013      	str	r3, [r2, #0]
	}
	if(debounce>0){
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	dd04      	ble.n	8001dca <HAL_TIM_PeriodElapsedCallback+0x62>
				debounce --;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001dc8:	6013      	str	r3, [r2, #0]
			}
	if(start_stepper){
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_TIM_PeriodElapsedCallback+0x74>
		stepperCount+=1;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001dda:	6013      	str	r3, [r2, #0]
	}
	if(htim == &htim9){  //updates every 100ms
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x82>
		flag = 1;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

	}
	if(start_stepper){
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00e      	beq.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0xa8>
		stepperIsOn += 1;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001dfa:	6013      	str	r3, [r2, #0]
		if(stepperIsOn == 10){
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b0a      	cmp	r3, #10
 8001e02:	d105      	bne.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0xa8>
			start_stepper = 0;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
			stepperIsOn = 0;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	2000009c 	.word	0x2000009c
 8001e20:	200000a4 	.word	0x200000a4
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	20000090 	.word	0x20000090
 8001e2c:	20000084 	.word	0x20000084
 8001e30:	20000078 	.word	0x20000078
 8001e34:	20000088 	.word	0x20000088
 8001e38:	200002b8 	.word	0x200002b8
 8001e3c:	20000038 	.word	0x20000038
 8001e40:	2000007c 	.word	0x2000007c

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_MspInit+0x4c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <HAL_TIM_Base_MspInit+0x1d0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d145      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	4b6b      	ldr	r3, [pc, #428]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b64      	ldr	r3, [pc, #400]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a63      	ldr	r2, [pc, #396]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Encoder2_Pin;
 8001efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4858      	ldr	r0, [pc, #352]	; (8002078 <HAL_TIM_Base_MspInit+0x1d8>)
 8001f18:	f000 ffea 	bl	8002ef0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2018      	movs	r0, #24
 8001f22:	f000 fc3e 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f26:	2018      	movs	r0, #24
 8001f28:	f000 fc57 	bl	80027da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2019      	movs	r0, #25
 8001f32:	f000 fc36 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f36:	2019      	movs	r0, #25
 8001f38:	f000 fc4f 	bl	80027da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	201b      	movs	r0, #27
 8001f42:	f000 fc2e 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f46:	201b      	movs	r0, #27
 8001f48:	f000 fc47 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f4c:	e08c      	b.n	8002068 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f56:	d134      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a44      	ldr	r2, [pc, #272]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder1_Pin;
 8001f90:	2320      	movs	r3, #32
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder1_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4834      	ldr	r0, [pc, #208]	; (800207c <HAL_TIM_Base_MspInit+0x1dc>)
 8001fac:	f000 ffa0 	bl	8002ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 fbf4 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fba:	201c      	movs	r0, #28
 8001fbc:	f000 fc0d 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001fc0:	e052      	b.n	8002068 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM5)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <HAL_TIM_Base_MspInit+0x1e0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d116      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a27      	ldr	r2, [pc, #156]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2032      	movs	r0, #50	; 0x32
 8001fee:	f000 fbd8 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ff2:	2032      	movs	r0, #50	; 0x32
 8001ff4:	f000 fbf1 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001ff8:	e036      	b.n	8002068 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM9)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_TIM_Base_MspInit+0x1e4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d116      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	6453      	str	r3, [r2, #68]	; 0x44
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2018      	movs	r0, #24
 8002026:	f000 fbbc 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800202a:	2018      	movs	r0, #24
 800202c:	f000 fbd5 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8002030:	e01a      	b.n	8002068 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM10)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_TIM_Base_MspInit+0x1e8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d115      	bne.n	8002068 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002044:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 8002046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204a:	6453      	str	r3, [r2, #68]	; 0x44
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0x1d4>)
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	2019      	movs	r0, #25
 800205e:	f000 fba0 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002062:	2019      	movs	r0, #25
 8002064:	f000 fbb9 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40010000 	.word	0x40010000
 8002074:	40023800 	.word	0x40023800
 8002078:	40021000 	.word	0x40021000
 800207c:	40020000 	.word	0x40020000
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40014000 	.word	0x40014000
 8002088:	40014400 	.word	0x40014400

0800208c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_TIM_PWM_MspInit+0x70>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ba:	e01a      	b.n	80020f2 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_TIM_PWM_MspInit+0x78>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d115      	bne.n	80020f2 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_TIM_PWM_MspInit+0x74>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	201e      	movs	r0, #30
 80020e8:	f000 fb5b 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020ec:	201e      	movs	r0, #30
 80020ee:	f000 fb74 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40000400 	.word	0x40000400
 8002100:	40023800 	.word	0x40023800
 8002104:	40000800 	.word	0x40000800

08002108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_TIM_MspPostInit+0x180>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11e      	bne.n	8002168 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor3_PWM1_Pin;
 8002146:	2340      	movs	r3, #64	; 0x40
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002156:	2302      	movs	r3, #2
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor3_PWM1_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	484b      	ldr	r0, [pc, #300]	; (8002290 <HAL_TIM_MspPostInit+0x188>)
 8002162:	f000 fec5 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002166:	e08a      	b.n	800227e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a49      	ldr	r2, [pc, #292]	; (8002294 <HAL_TIM_MspPostInit+0x18c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d13d      	bne.n	80021ee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a44      	ldr	r2, [pc, #272]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a3d      	ldr	r2, [pc, #244]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PassingMotor_PWM_Pin|LiftingMotor_PWM_Pin;
 80021aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021bc:	2302      	movs	r3, #2
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4834      	ldr	r0, [pc, #208]	; (8002298 <HAL_TIM_MspPostInit+0x190>)
 80021c8:	f000 fe92 	bl	8002ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LOCO_PWM1_Pin|LOCO_PWM2_Pin;
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021dc:	2302      	movs	r3, #2
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	482d      	ldr	r0, [pc, #180]	; (800229c <HAL_TIM_MspPostInit+0x194>)
 80021e8:	f000 fe82 	bl	8002ef0 <HAL_GPIO_Init>
}
 80021ec:	e047      	b.n	800227e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM5)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <HAL_TIM_MspPostInit+0x198>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d11e      	bne.n	8002236 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_Pin;
 8002214:	2304      	movs	r3, #4
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002224:	2302      	movs	r3, #2
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4818      	ldr	r0, [pc, #96]	; (8002290 <HAL_TIM_MspPostInit+0x188>)
 8002230:	f000 fe5e 	bl	8002ef0 <HAL_GPIO_Init>
}
 8002234:	e023      	b.n	800227e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <HAL_TIM_MspPostInit+0x19c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d11e      	bne.n	800227e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_TIM_MspPostInit+0x184>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 800225c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800226e:	2303      	movs	r3, #3
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4808      	ldr	r0, [pc, #32]	; (800229c <HAL_TIM_MspPostInit+0x194>)
 800227a:	f000 fe39 	bl	8002ef0 <HAL_GPIO_Init>
}
 800227e:	bf00      	nop
 8002280:	3730      	adds	r7, #48	; 0x30
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40000400 	.word	0x40000400
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000
 8002294:	40000800 	.word	0x40000800
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40020400 	.word	0x40020400
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40014400 	.word	0x40014400

080022a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_UART_MspInit+0xe4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d15b      	bne.n	8002382 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022d4:	f043 0310 	orr.w	r3, r3, #16
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_UART_MspInit+0xe8>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002302:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002314:	2307      	movs	r3, #7
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <HAL_UART_MspInit+0xec>)
 8002320:	f000 fde6 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_UART_MspInit+0xf4>)
 8002328:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800232c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002330:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002344:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002358:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <HAL_UART_MspInit+0xf0>)
 8002368:	f000 fa52 	bl	8002810 <HAL_DMA_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002372:	f7ff fd67 	bl	8001e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800237a:	639a      	str	r2, [r3, #56]	; 0x38
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_UART_MspInit+0xf0>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	200001cc 	.word	0x200001cc
 800239c:	40026440 	.word	0x40026440

080023a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <NMI_Handler+0x4>

080023a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler+0x4>

080023ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <MemManage_Handler+0x4>

080023b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <UsageFault_Handler+0x4>

080023be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ec:	f000 f8de 	bl	80025ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80023fa:	f001 fe85 	bl	8004108 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80023fe:	4803      	ldr	r0, [pc, #12]	; (800240c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002400:	f001 fe82 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000270 	.word	0x20000270
 800240c:	200002b8 	.word	0x200002b8

08002410 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002416:	f001 fe77 	bl	8004108 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800241c:	f001 fe74 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000270 	.word	0x20000270
 8002428:	200000f4 	.word	0x200000f4

0800242c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM1_CC_IRQHandler+0x10>)
 8002432:	f001 fe69 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000270 	.word	0x20000270

08002440 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM2_IRQHandler+0x10>)
 8002446:	f001 fe5f 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000300 	.word	0x20000300

08002454 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM4_IRQHandler+0x10>)
 800245a:	f001 fe55 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200000ac 	.word	0x200000ac

08002468 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM5_IRQHandler+0x10>)
 800246e:	f001 fe4b 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000013c 	.word	0x2000013c

0800247c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA2_Stream2_IRQHandler+0x10>)
 8002482:	f000 facb 	bl	8002a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200001cc 	.word	0x200001cc

08002490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <SystemInit+0x20>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <SystemInit+0x20>)
 800249c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ba:	490e      	ldr	r1, [pc, #56]	; (80024f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d0:	4c0b      	ldr	r4, [pc, #44]	; (8002500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024de:	f7ff ffd7 	bl	8002490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e2:	f003 fa9b 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e6:	f7fe fdcf 	bl	8001088 <main>
  bx  lr    
 80024ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80024f8:	08005abc 	.word	0x08005abc
  ldr r2, =_sbss
 80024fc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002500:	2000034c 	.word	0x2000034c

08002504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_Init+0x40>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <HAL_Init+0x40>)
 8002512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_Init+0x40>)
 800251e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <HAL_Init+0x40>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f92b 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f808 	bl	800254c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800253c:	f7ff fc88 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x54>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x58>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002562:	fbb3 f3f1 	udiv	r3, r3, r1
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f943 	bl	80027f6 <HAL_SYSTICK_Config>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00e      	b.n	8002598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d80a      	bhi.n	8002596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002588:	f000 f90b 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <HAL_InitTick+0x5c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000010 	.word	0x20000010
 80025a4:	20000018 	.word	0x20000018
 80025a8:	20000014 	.word	0x20000014

080025ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x20>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x24>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <HAL_IncTick+0x24>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000018 	.word	0x20000018
 80025d0:	20000348 	.word	0x20000348

080025d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_GetTick+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000348 	.word	0x20000348

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff feda 	bl	80025d4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e099      	b.n	8002960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	e00f      	b.n	800286e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284e:	f7ff fec1 	bl	80025d4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b05      	cmp	r3, #5
 800285a:	d908      	bls.n	800286e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e078      	b.n	8002960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e8      	bne.n	800284e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_DMA_Init+0x158>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4313      	orrs	r3, r2
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d117      	bne.n	8002932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fa6f 	bl	8002df8 <DMA_CheckFifoParam>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800292e:	2301      	movs	r3, #1
 8002930:	e016      	b.n	8002960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa26 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 8002940:	4603      	mov	r3, r0
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f010803f 	.word	0xf010803f

0800296c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x26>
 800298e:	2302      	movs	r3, #2
 8002990:	e040      	b.n	8002a14 <HAL_DMA_Start_IT+0xa8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12f      	bne.n	8002a06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9b8 	bl	8002d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0216 	orr.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_DMA_IRQHandler+0x258>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <HAL_DMA_IRQHandler+0x25c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03c      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2210      	movs	r2, #16
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2220      	movs	r2, #32
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808e 	beq.w	8002cba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8086 	beq.w	8002cba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d136      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x1da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	223f      	movs	r2, #63	; 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07d      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
        }
        return;
 8002c32:	e078      	b.n	8002d26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01c      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d108      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d030      	beq.n	8002cba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e02b      	b.n	8002cba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d027      	beq.n	8002cba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
 8002c72:	e022      	b.n	8002cba <HAL_DMA_IRQHandler+0x29e>
 8002c74:	20000010 	.word	0x20000010
 8002c78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0210 	bic.w	r2, r2, #16
 8002c98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d032      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d022      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d307      	bcc.n	8002d02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f2      	bne.n	8002ce6 <HAL_DMA_IRQHandler+0x2ca>
 8002d00:	e000      	b.n	8002d04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d02:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
 8002d24:	e000      	b.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d26:	bf00      	nop
    }
  }
}
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d108      	bne.n	8002d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6e:	e007      	b.n	8002d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	08005aa4 	.word	0x08005aa4

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e159      	b.n	80031c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8148 	bne.w	80031ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a2 	beq.w	80031ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a56      	ldr	r2, [pc, #344]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <HAL_GPIO_Init+0x2e8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_GPIO_Init+0x2ec>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a49      	ldr	r2, [pc, #292]	; (80031e0 <HAL_GPIO_Init+0x2f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_GPIO_Init+0x202>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a48      	ldr	r2, [pc, #288]	; (80031e4 <HAL_GPIO_Init+0x2f4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x1fe>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a47      	ldr	r2, [pc, #284]	; (80031e8 <HAL_GPIO_Init+0x2f8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x1fa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a46      	ldr	r2, [pc, #280]	; (80031ec <HAL_GPIO_Init+0x2fc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x1f6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a45      	ldr	r2, [pc, #276]	; (80031f0 <HAL_GPIO_Init+0x300>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x1f2>
 80030de:	2304      	movs	r3, #4
 80030e0:	e008      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e004      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e002      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_GPIO_Init+0x204>
 80030f2:	2300      	movs	r3, #0
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f002 0203 	and.w	r2, r2, #3
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	4093      	lsls	r3, r2
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003104:	4935      	ldr	r1, [pc, #212]	; (80031dc <HAL_GPIO_Init+0x2ec>)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_GPIO_Init+0x304>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318a:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_GPIO_Init+0x304>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_GPIO_Init+0x304>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <HAL_GPIO_Init+0x304>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3301      	adds	r3, #1
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	f67f aea2 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020c00 	.word	0x40020c00
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40013c00 	.word	0x40013c00

080031f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
 8003204:	4613      	mov	r3, r2
 8003206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003208:	787b      	ldrb	r3, [r7, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320e:	887a      	ldrh	r2, [r7, #2]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003214:	e003      	b.n	800321e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	041a      	lsls	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e264      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d075      	beq.n	8003336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324a:	4ba3      	ldr	r3, [pc, #652]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b04      	cmp	r3, #4
 8003254:	d00c      	beq.n	8003270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4ba0      	ldr	r3, [pc, #640]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800325e:	2b08      	cmp	r3, #8
 8003260:	d112      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b9d      	ldr	r3, [pc, #628]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326e:	d10b      	bne.n	8003288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05b      	beq.n	8003334 <HAL_RCC_OscConfig+0x108>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d157      	bne.n	8003334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e23f      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x74>
 8003292:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a90      	ldr	r2, [pc, #576]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x98>
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a8a      	ldr	r2, [pc, #552]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a87      	ldr	r2, [pc, #540]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xb0>
 80032c4:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a83      	ldr	r2, [pc, #524]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a80      	ldr	r2, [pc, #512]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff f976 	bl	80025d4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7ff f972 	bl	80025d4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e204      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xc0>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7ff f962 	bl	80025d4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7ff f95e 	bl	80025d4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1f0      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0xe8>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d063      	beq.n	800340a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003342:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334e:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d11c      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d001      	beq.n	800337e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e1c4      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337e:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4952      	ldr	r1, [pc, #328]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	e03a      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d020      	beq.n	80033de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_OscConfig+0x2b0>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7ff f917 	bl	80025d4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033aa:	f7ff f913 	bl	80025d4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1a5      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4940      	ldr	r1, [pc, #256]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033de:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <HAL_RCC_OscConfig+0x2b0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7ff f8f6 	bl	80025d4 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ec:	f7ff f8f2 	bl	80025d4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e184      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d030      	beq.n	8003478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x2b4>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7ff f8d6 	bl	80025d4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342c:	f7ff f8d2 	bl	80025d4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e164      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x200>
 800344a:	e015      	b.n	8003478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x2b4>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7ff f8bf 	bl	80025d4 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345a:	f7ff f8bb 	bl	80025d4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e14d      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a0 	beq.w	80035c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10f      	bne.n	80034b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_OscConfig+0x2b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d121      	bne.n	8003506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_RCC_OscConfig+0x2b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <HAL_RCC_OscConfig+0x2b8>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7ff f881 	bl	80025d4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e011      	b.n	80034fa <HAL_RCC_OscConfig+0x2ce>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	42470e80 	.word	0x42470e80
 80034e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7ff f874 	bl	80025d4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e106      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <HAL_RCC_OscConfig+0x4e4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x2f0>
 800350e:	4b81      	ldr	r3, [pc, #516]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a80      	ldr	r2, [pc, #512]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	e01c      	b.n	8003556 <HAL_RCC_OscConfig+0x32a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d10c      	bne.n	800353e <HAL_RCC_OscConfig+0x312>
 8003524:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a7a      	ldr	r2, [pc, #488]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	4b78      	ldr	r3, [pc, #480]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	4a77      	ldr	r2, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	; 0x70
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x32a>
 800353e:	4b75      	ldr	r3, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a74      	ldr	r2, [pc, #464]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	4b72      	ldr	r3, [pc, #456]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a71      	ldr	r2, [pc, #452]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355e:	f7ff f839 	bl	80025d4 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7ff f835 	bl	80025d4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0c5      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCC_OscConfig+0x33a>
 8003588:	e014      	b.n	80035b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7ff f823 	bl	80025d4 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7ff f81f 	bl	80025d4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0af      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a55      	ldr	r2, [pc, #340]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 809b 	beq.w	8003706 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d05c      	beq.n	8003696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d141      	bne.n	8003668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_RCC_OscConfig+0x4ec>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fe fff3 	bl	80025d4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe ffef 	bl	80025d4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e081      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	019b      	lsls	r3, r3, #6
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	3b01      	subs	r3, #1
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4937      	ldr	r1, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_OscConfig+0x4ec>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe ffc8 	bl	80025d4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe ffc4 	bl	80025d4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e056      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x41c>
 8003666:	e04e      	b.n	8003706 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_OscConfig+0x4ec>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fe ffb1 	bl	80025d4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe ffad 	bl	80025d4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e03f      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x44a>
 8003694:	e037      	b.n	8003706 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e032      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d028      	beq.n	8003702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d11a      	bne.n	8003702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40007000 	.word	0x40007000
 8003714:	40023800 	.word	0x40023800
 8003718:	42470060 	.word	0x42470060

0800371c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0cc      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003730:	4b68      	ldr	r3, [pc, #416]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d90c      	bls.n	8003758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d044      	beq.n	800383c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d003      	beq.n	80037da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e067      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4934      	ldr	r1, [pc, #208]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800380c:	f7fe fee2 	bl	80025d4 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	e00a      	b.n	800382a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fe fede 	bl	80025d4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e04f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 020c 	and.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	429a      	cmp	r2, r3
 800383a:	d1eb      	bne.n	8003814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20c      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fe42 	bl	800254c <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	08005a8c 	.word	0x08005a8c
 80038e0:	20000010 	.word	0x20000010
 80038e4:	20000014 	.word	0x20000014

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038ee:	2100      	movs	r1, #0
 80038f0:	6079      	str	r1, [r7, #4]
 80038f2:	2100      	movs	r1, #0
 80038f4:	60f9      	str	r1, [r7, #12]
 80038f6:	2100      	movs	r1, #0
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038fa:	2100      	movs	r1, #0
 80038fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fe:	4952      	ldr	r1, [pc, #328]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003900:	6889      	ldr	r1, [r1, #8]
 8003902:	f001 010c 	and.w	r1, r1, #12
 8003906:	2908      	cmp	r1, #8
 8003908:	d00d      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3e>
 800390a:	2908      	cmp	r1, #8
 800390c:	f200 8094 	bhi.w	8003a38 <HAL_RCC_GetSysClockFreq+0x150>
 8003910:	2900      	cmp	r1, #0
 8003912:	d002      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x32>
 8003914:	2904      	cmp	r1, #4
 8003916:	d003      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x38>
 8003918:	e08e      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x164>)
 800391c:	60bb      	str	r3, [r7, #8]
       break;
 800391e:	e08e      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003922:	60bb      	str	r3, [r7, #8]
      break;
 8003924:	e08b      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003926:	4948      	ldr	r1, [pc, #288]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003928:	6849      	ldr	r1, [r1, #4]
 800392a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800392e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003930:	4945      	ldr	r1, [pc, #276]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003932:	6849      	ldr	r1, [r1, #4]
 8003934:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003938:	2900      	cmp	r1, #0
 800393a:	d024      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393c:	4942      	ldr	r1, [pc, #264]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 800393e:	6849      	ldr	r1, [r1, #4]
 8003940:	0989      	lsrs	r1, r1, #6
 8003942:	4608      	mov	r0, r1
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	f240 14ff 	movw	r4, #511	; 0x1ff
 800394c:	f04f 0500 	mov.w	r5, #0
 8003950:	ea00 0204 	and.w	r2, r0, r4
 8003954:	ea01 0305 	and.w	r3, r1, r5
 8003958:	493d      	ldr	r1, [pc, #244]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x168>)
 800395a:	fb01 f003 	mul.w	r0, r1, r3
 800395e:	2100      	movs	r1, #0
 8003960:	fb01 f102 	mul.w	r1, r1, r2
 8003964:	1844      	adds	r4, r0, r1
 8003966:	493a      	ldr	r1, [pc, #232]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x168>)
 8003968:	fba2 0101 	umull	r0, r1, r2, r1
 800396c:	1863      	adds	r3, r4, r1
 800396e:	4619      	mov	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	461a      	mov	r2, r3
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f7fd f844 	bl	8000a04 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4613      	mov	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e04a      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	461a      	mov	r2, r3
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003996:	f04f 0100 	mov.w	r1, #0
 800399a:	ea02 0400 	and.w	r4, r2, r0
 800399e:	ea03 0501 	and.w	r5, r3, r1
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	014b      	lsls	r3, r1, #5
 80039b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039b4:	0142      	lsls	r2, r0, #5
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	1b00      	subs	r0, r0, r4
 80039bc:	eb61 0105 	sbc.w	r1, r1, r5
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	018b      	lsls	r3, r1, #6
 80039ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039ce:	0182      	lsls	r2, r0, #6
 80039d0:	1a12      	subs	r2, r2, r0
 80039d2:	eb63 0301 	sbc.w	r3, r3, r1
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	00d9      	lsls	r1, r3, #3
 80039e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039e4:	00d0      	lsls	r0, r2, #3
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	1912      	adds	r2, r2, r4
 80039ec:	eb45 0303 	adc.w	r3, r5, r3
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0299      	lsls	r1, r3, #10
 80039fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039fe:	0290      	lsls	r0, r2, #10
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	f7fc fff8 	bl	8000a04 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	3301      	adds	r3, #1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	60bb      	str	r3, [r7, #8]
      break;
 8003a36:	e002      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x164>)
 8003a3a:	60bb      	str	r3, [r7, #8]
      break;
 8003a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bdb0      	pop	{r4, r5, r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	017d7840 	.word	0x017d7840

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000010 	.word	0x20000010

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08005a9c 	.word	0x08005a9c

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffdc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0b5b      	lsrs	r3, r3, #13
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08005a9c 	.word	0x08005a9c

08003abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e041      	b.n	8003b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f9dc 	bl	8001ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f000 fe94 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e044      	b.n	8003bfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d111      	bne.n	8003bec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d010      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bea:	e007      	b.n	8003bfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40014000 	.word	0x40014000

08003c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e041      	b.n	8003cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe fa20 	bl	800208c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f000 fde2 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0x24>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e022      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d109      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x3e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	e015      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d109      	bne.n	8003d18 <HAL_TIM_PWM_Start+0x58>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e008      	b.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e068      	b.n	8003e04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x82>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d40:	e013      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	e00b      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d60:	e003      	b.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f91c 	bl	8004fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_TIM_PWM_Start+0x14c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <HAL_TIM_PWM_Start+0x14c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d018      	beq.n	8003dce <HAL_TIM_PWM_Start+0x10e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d013      	beq.n	8003dce <HAL_TIM_PWM_Start+0x10e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_TIM_PWM_Start+0x150>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIM_PWM_Start+0x10e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_TIM_PWM_Start+0x154>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_TIM_PWM_Start+0x10e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_TIM_PWM_Start+0x158>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIM_PWM_Start+0x10e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <HAL_TIM_PWM_Start+0x15c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d111      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d010      	beq.n	8003e02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	e007      	b.n	8003e02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000

08003e20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f839 	bl	8003ebe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 fce2 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <HAL_TIM_IC_Start_IT+0x1e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e013      	b.n	8003f1a <HAL_TIM_IC_Start_IT+0x46>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_IC_Start_IT+0x2e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e00b      	b.n	8003f1a <HAL_TIM_IC_Start_IT+0x46>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_IC_Start_IT+0x3e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e003      	b.n	8003f1a <HAL_TIM_IC_Start_IT+0x46>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_TIM_IC_Start_IT+0x58>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e013      	b.n	8003f54 <HAL_TIM_IC_Start_IT+0x80>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d104      	bne.n	8003f3c <HAL_TIM_IC_Start_IT+0x68>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e00b      	b.n	8003f54 <HAL_TIM_IC_Start_IT+0x80>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d104      	bne.n	8003f4c <HAL_TIM_IC_Start_IT+0x78>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e003      	b.n	8003f54 <HAL_TIM_IC_Start_IT+0x80>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f56:	7bbb      	ldrb	r3, [r7, #14]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d102      	bne.n	8003f62 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5c:	7b7b      	ldrb	r3, [r7, #13]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d001      	beq.n	8003f66 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0c2      	b.n	80040ec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_IC_Start_IT+0xa2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f74:	e013      	b.n	8003f9e <HAL_TIM_IC_Start_IT+0xca>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_IC_Start_IT+0xb2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	e00b      	b.n	8003f9e <HAL_TIM_IC_Start_IT+0xca>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_IC_Start_IT+0xc2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	e003      	b.n	8003f9e <HAL_TIM_IC_Start_IT+0xca>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d104      	bne.n	8003fae <HAL_TIM_IC_Start_IT+0xda>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	e013      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x102>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_IC_Start_IT+0xea>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fbc:	e00b      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x102>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_IC_Start_IT+0xfa>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fcc:	e003      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x102>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d841      	bhi.n	8004060 <HAL_TIM_IC_Start_IT+0x18c>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_TIM_IC_Start_IT+0x110>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004061 	.word	0x08004061
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004061 	.word	0x08004061
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004061 	.word	0x08004061
 8004004:	0800403d 	.word	0x0800403d
 8004008:	08004061 	.word	0x08004061
 800400c:	08004061 	.word	0x08004061
 8004010:	08004061 	.word	0x08004061
 8004014:	0800404f 	.word	0x0800404f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0202 	orr.w	r2, r2, #2
 8004026:	60da      	str	r2, [r3, #12]
      break;
 8004028:	e01d      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0204 	orr.w	r2, r2, #4
 8004038:	60da      	str	r2, [r3, #12]
      break;
 800403a:	e014      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	60da      	str	r2, [r3, #12]
      break;
 800404c:	e00b      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0210 	orr.w	r2, r2, #16
 800405c:	60da      	str	r2, [r3, #12]
      break;
 800405e:	e002      	b.n	8004066 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	bf00      	nop
  }

  if (status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d13e      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 ff9b 	bl	8004fb0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_TIM_IC_Start_IT+0x220>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d013      	beq.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_TIM_IC_Start_IT+0x224>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <HAL_TIM_IC_Start_IT+0x228>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIM_IC_Start_IT+0x22c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <HAL_TIM_IC_Start_IT+0x230>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d111      	bne.n	80040da <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d010      	beq.n	80040ea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	e007      	b.n	80040ea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40014000 	.word	0x40014000

08004108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0202 	mvn.w	r2, #2
 8004134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fdd6 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fb4a 	bl	80047ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb51 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0204 	mvn.w	r2, #4
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fdac 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fb20 	bl	80047ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb27 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0208 	mvn.w	r2, #8
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc fd82 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 faf6 	bl	80047ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fafd 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0210 	mvn.w	r2, #16
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2208      	movs	r2, #8
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc fd58 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 facc 	bl	80047ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fad3 	bl	8004800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10e      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0201 	mvn.w	r2, #1
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd fd6e 	bl	8001d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d10e      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 ff1a 	bl	80050ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d10e      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa98 	bl	8004814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0220 	mvn.w	r2, #32
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fee4 	bl	80050d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004332:	2302      	movs	r3, #2
 8004334:	e088      	b.n	8004448 <HAL_TIM_IC_ConfigChannel+0x130>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f000 fc74 	bl	8004c40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 020c 	bic.w	r2, r2, #12
 8004366:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	619a      	str	r2, [r3, #24]
 800437a:	e060      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b04      	cmp	r3, #4
 8004380:	d11c      	bne.n	80043bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6819      	ldr	r1, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f000 fcec 	bl	8004d6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6999      	ldr	r1, [r3, #24]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	619a      	str	r2, [r3, #24]
 80043ba:	e040      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fd39 	bl	8004e48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 020c 	bic.w	r2, r2, #12
 80043e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	61da      	str	r2, [r3, #28]
 80043f8:	e021      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d11c      	bne.n	800443a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f000 fd56 	bl	8004ec0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004422:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69d9      	ldr	r1, [r3, #28]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
 8004438:	e001      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446a:	2302      	movs	r3, #2
 800446c:	e0ae      	b.n	80045cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	f200 809f 	bhi.w	80045bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080045bd 	.word	0x080045bd
 800448c:	080045bd 	.word	0x080045bd
 8004490:	080045bd 	.word	0x080045bd
 8004494:	080044f9 	.word	0x080044f9
 8004498:	080045bd 	.word	0x080045bd
 800449c:	080045bd 	.word	0x080045bd
 80044a0:	080045bd 	.word	0x080045bd
 80044a4:	0800453b 	.word	0x0800453b
 80044a8:	080045bd 	.word	0x080045bd
 80044ac:	080045bd 	.word	0x080045bd
 80044b0:	080045bd 	.word	0x080045bd
 80044b4:	0800457b 	.word	0x0800457b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fa32 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6999      	ldr	r1, [r3, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	619a      	str	r2, [r3, #24]
      break;
 80044f6:	e064      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fa78 	bl	80049f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	021a      	lsls	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]
      break;
 8004538:	e043      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fac3 	bl	8004acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0208 	orr.w	r2, r2, #8
 8004554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0204 	bic.w	r2, r2, #4
 8004564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69d9      	ldr	r1, [r3, #28]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	61da      	str	r2, [r3, #28]
      break;
 8004578:	e023      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb0d 	bl	8004ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	021a      	lsls	r2, r3, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	61da      	str	r2, [r3, #28]
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
      break;
 80045c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_ConfigClockSource+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e0b4      	b.n	800475a <HAL_TIM_ConfigClockSource+0x186>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800460e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004628:	d03e      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xd4>
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462e:	f200 8087 	bhi.w	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	f000 8086 	beq.w	8004746 <HAL_TIM_ConfigClockSource+0x172>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d87f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b70      	cmp	r3, #112	; 0x70
 8004642:	d01a      	beq.n	800467a <HAL_TIM_ConfigClockSource+0xa6>
 8004644:	2b70      	cmp	r3, #112	; 0x70
 8004646:	d87b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d050      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x11a>
 800464c:	2b60      	cmp	r3, #96	; 0x60
 800464e:	d877      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b50      	cmp	r3, #80	; 0x50
 8004652:	d03c      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xfa>
 8004654:	2b50      	cmp	r3, #80	; 0x50
 8004656:	d873      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d058      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x13a>
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d86f      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d064      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d86b      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d060      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 800466c:	2b20      	cmp	r3, #32
 800466e:	d867      	bhi.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05c      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d05a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0x15a>
 8004678:	e062      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6899      	ldr	r1, [r3, #8]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f000 fc71 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800469c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	609a      	str	r2, [r3, #8]
      break;
 80046a6:	e04f      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f000 fc5a 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ca:	609a      	str	r2, [r3, #8]
      break;
 80046cc:	e03c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 fb18 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2150      	movs	r1, #80	; 0x50
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fc27 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 80046ec:	e02c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 fb74 	bl	8004de8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2160      	movs	r1, #96	; 0x60
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fc17 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 800470c:	e01c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	461a      	mov	r2, r3
 800471c:	f000 faf8 	bl	8004d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fc07 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 800472c:	e00c      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f000 fbfe 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 800473e:	e003      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e000      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d831      	bhi.n	80047dc <HAL_TIM_ReadCapturedValue+0x78>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_ReadCapturedValue+0x1c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047dd 	.word	0x080047dd
 8004788:	080047dd 	.word	0x080047dd
 800478c:	080047dd 	.word	0x080047dd
 8004790:	080047bf 	.word	0x080047bf
 8004794:	080047dd 	.word	0x080047dd
 8004798:	080047dd 	.word	0x080047dd
 800479c:	080047dd 	.word	0x080047dd
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047dd 	.word	0x080047dd
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047dd 	.word	0x080047dd
 80047b0:	080047d3 	.word	0x080047d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	60fb      	str	r3, [r7, #12]

      break;
 80047bc:	e00f      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	60fb      	str	r3, [r7, #12]

      break;
 80047c6:	e00a      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	60fb      	str	r3, [r7, #12]

      break;
 80047d0:	e005      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	60fb      	str	r3, [r7, #12]

      break;
 80047da:	e000      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047dc:	bf00      	nop
  }

  return tmpreg;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a34      	ldr	r2, [pc, #208]	; (800490c <TIM_Base_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00f      	beq.n	8004860 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a31      	ldr	r2, [pc, #196]	; (8004910 <TIM_Base_SetConfig+0xe8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a30      	ldr	r2, [pc, #192]	; (8004914 <TIM_Base_SetConfig+0xec>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2f      	ldr	r2, [pc, #188]	; (8004918 <TIM_Base_SetConfig+0xf0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d108      	bne.n	8004872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a25      	ldr	r2, [pc, #148]	; (800490c <TIM_Base_SetConfig+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01b      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d017      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a22      	ldr	r2, [pc, #136]	; (8004910 <TIM_Base_SetConfig+0xe8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a21      	ldr	r2, [pc, #132]	; (8004914 <TIM_Base_SetConfig+0xec>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <TIM_Base_SetConfig+0xf0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1f      	ldr	r2, [pc, #124]	; (800491c <TIM_Base_SetConfig+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <TIM_Base_SetConfig+0xf8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <TIM_Base_SetConfig+0xfc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <TIM_Base_SetConfig+0xe4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0302 	bic.w	r3, r3, #2
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <TIM_OC1_SetConfig+0xc8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d10c      	bne.n	800499e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0308 	bic.w	r3, r3, #8
 800498a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 0304 	bic.w	r3, r3, #4
 800499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <TIM_OC1_SetConfig+0xc8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d111      	bne.n	80049ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40010000 	.word	0x40010000

080049f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0210 	bic.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0320 	bic.w	r3, r3, #32
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <TIM_OC2_SetConfig+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10d      	bne.n	8004a70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <TIM_OC2_SetConfig+0xd4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d113      	bne.n	8004aa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000

08004acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	; (8004b9c <TIM_OC3_SetConfig+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10d      	bne.n	8004b46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <TIM_OC3_SetConfig+0xd0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d113      	bne.n	8004b76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	621a      	str	r2, [r3, #32]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40010000 	.word	0x40010000

08004ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <TIM_OC4_SetConfig+0x9c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d109      	bne.n	8004c14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000

08004c40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f023 0201 	bic.w	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a24      	ldr	r2, [pc, #144]	; (8004cfc <TIM_TI1_SetConfig+0xbc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <TIM_TI1_SetConfig+0x56>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d00f      	beq.n	8004c96 <TIM_TI1_SetConfig+0x56>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a21      	ldr	r2, [pc, #132]	; (8004d00 <TIM_TI1_SetConfig+0xc0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <TIM_TI1_SetConfig+0x56>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <TIM_TI1_SetConfig+0xc4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d007      	beq.n	8004c96 <TIM_TI1_SetConfig+0x56>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	; (8004d08 <TIM_TI1_SetConfig+0xc8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_TI1_SetConfig+0x56>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <TIM_TI1_SetConfig+0xcc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <TIM_TI1_SetConfig+0x5a>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <TIM_TI1_SetConfig+0x5c>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e003      	b.n	8004cba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f023 030a 	bic.w	r3, r3, #10
 8004cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 030a 	and.w	r3, r3, #10
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000

08004d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 030a 	bic.w	r3, r3, #10
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f023 0210 	bic.w	r2, r3, #16
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	031b      	lsls	r3, r3, #12
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	621a      	str	r2, [r3, #32]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 0303 	bic.w	r3, r3, #3
 8004e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004efe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	031b      	lsls	r3, r3, #12
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f043 0307 	orr.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e050      	b.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d013      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10c      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e03f      	b.n	8005192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd f8be 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 faa1 	bl	800568c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d11d      	bne.n	80051f0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Receive_DMA+0x26>
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e016      	b.n	80051f2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Receive_DMA+0x38>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e00f      	b.n	80051f2 <HAL_UART_Receive_DMA+0x58>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f92a 	bl	8005440 <UART_Start_Receive_DMA>
 80051ec:	4603      	mov	r3, r0
 80051ee:	e000      	b.n	80051f2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b09c      	sub	sp, #112	; 0x70
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d172      	bne.n	8005350 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	2200      	movs	r2, #0
 800526e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005286:	66bb      	str	r3, [r7, #104]	; 0x68
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005290:	65ba      	str	r2, [r7, #88]	; 0x58
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	667b      	str	r3, [r7, #100]	; 0x64
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052c4:	647a      	str	r2, [r7, #68]	; 0x44
 80052c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3314      	adds	r3, #20
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	623b      	str	r3, [r7, #32]
   return(result);
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ee:	663b      	str	r3, [r7, #96]	; 0x60
 80052f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3314      	adds	r3, #20
 80052f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052f8:	633a      	str	r2, [r7, #48]	; 0x30
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800530c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	d119      	bne.n	8005350 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	60fb      	str	r3, [r7, #12]
   return(result);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0310 	bic.w	r3, r3, #16
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800533c:	61fa      	str	r2, [r7, #28]
 800533e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	69b9      	ldr	r1, [r7, #24]
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	617b      	str	r3, [r7, #20]
   return(result);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e5      	bne.n	800531c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800535c:	4619      	mov	r1, r3
 800535e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005360:	f7ff ff69 	bl	8005236 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005364:	e002      	b.n	800536c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005366:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005368:	f7ff ff47 	bl	80051fa <HAL_UART_RxCpltCallback>
}
 800536c:	bf00      	nop
 800536e:	3770      	adds	r7, #112	; 0x70
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d108      	bne.n	800539c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	b29b      	uxth	r3, r3
 8005392:	4619      	mov	r1, r3
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff4e 	bl	8005236 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800539a:	e002      	b.n	80053a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff36 	bl	800520e <HAL_UART_RxHalfCpltCallback>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b21      	cmp	r3, #33	; 0x21
 80053dc:	d108      	bne.n	80053f0 <UART_DMAError+0x46>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80053ea:	68b8      	ldr	r0, [r7, #8]
 80053ec:	f000 f8c2 	bl	8005574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b22      	cmp	r3, #34	; 0x22
 8005410:	d108      	bne.n	8005424 <UART_DMAError+0x7a>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 f8d0 	bl	80055c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005430:	68b8      	ldr	r0, [r7, #8]
 8005432:	f7ff fef6 	bl	8005222 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b098      	sub	sp, #96	; 0x60
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2222      	movs	r2, #34	; 0x22
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	4a3e      	ldr	r2, [pc, #248]	; (8005568 <UART_Start_Receive_DMA+0x128>)
 800546e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	4a3d      	ldr	r2, [pc, #244]	; (800556c <UART_Start_Receive_DMA+0x12c>)
 8005476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	4a3c      	ldr	r2, [pc, #240]	; (8005570 <UART_Start_Receive_DMA+0x130>)
 800547e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	2200      	movs	r2, #0
 8005486:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	f7fd fa64 	bl	800296c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80054e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	657b      	str	r3, [r7, #84]	; 0x54
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3314      	adds	r3, #20
 8005514:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005516:	63ba      	str	r2, [r7, #56]	; 0x38
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800551c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e5      	bne.n	80054f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	617b      	str	r3, [r7, #20]
   return(result);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800554a:	627a      	str	r2, [r7, #36]	; 0x24
 800554c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6a39      	ldr	r1, [r7, #32]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	61fb      	str	r3, [r7, #28]
   return(result);
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3760      	adds	r7, #96	; 0x60
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	0800524f 	.word	0x0800524f
 800556c:	08005375 	.word	0x08005375
 8005570:	080053ab 	.word	0x080053ab

08005574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60bb      	str	r3, [r7, #8]
   return(result);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	61ba      	str	r2, [r7, #24]
 800559e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e5      	bne.n	800557c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80055b8:	bf00      	nop
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b095      	sub	sp, #84	; 0x54
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ec:	643a      	str	r2, [r7, #64]	; 0x40
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	64bb      	str	r3, [r7, #72]	; 0x48
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e5      	bne.n	8005600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	2b01      	cmp	r3, #1
 800563a:	d119      	bne.n	8005670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	60bb      	str	r3, [r7, #8]
   return(result);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f023 0310 	bic.w	r3, r3, #16
 8005652:	647b      	str	r3, [r7, #68]	; 0x44
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565c:	61ba      	str	r2, [r7, #24]
 800565e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6979      	ldr	r1, [r7, #20]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800567e:	bf00      	nop
 8005680:	3754      	adds	r7, #84	; 0x54
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005690:	b09f      	sub	sp, #124	; 0x7c
 8005692:	af00      	add	r7, sp, #0
 8005694:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	68d9      	ldr	r1, [r3, #12]
 80056a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	ea40 0301 	orr.w	r3, r0, r1
 80056ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	431a      	orrs	r2, r3
 80056be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056d0:	f021 010c 	bic.w	r1, r1, #12
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056da:	430b      	orrs	r3, r1
 80056dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	6999      	ldr	r1, [r3, #24]
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	ea40 0301 	orr.w	r3, r0, r1
 80056f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4bc5      	ldr	r3, [pc, #788]	; (8005a10 <UART_SetConfig+0x384>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d004      	beq.n	800570a <UART_SetConfig+0x7e>
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4bc3      	ldr	r3, [pc, #780]	; (8005a14 <UART_SetConfig+0x388>)
 8005706:	429a      	cmp	r2, r3
 8005708:	d103      	bne.n	8005712 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800570a:	f7fe f9c3 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 800570e:	6778      	str	r0, [r7, #116]	; 0x74
 8005710:	e002      	b.n	8005718 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005712:	f7fe f9ab 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8005716:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005720:	f040 80b6 	bne.w	8005890 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005726:	461c      	mov	r4, r3
 8005728:	f04f 0500 	mov.w	r5, #0
 800572c:	4622      	mov	r2, r4
 800572e:	462b      	mov	r3, r5
 8005730:	1891      	adds	r1, r2, r2
 8005732:	6439      	str	r1, [r7, #64]	; 0x40
 8005734:	415b      	adcs	r3, r3
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
 8005738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800573c:	1912      	adds	r2, r2, r4
 800573e:	eb45 0303 	adc.w	r3, r5, r3
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	00d9      	lsls	r1, r3, #3
 800574c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005750:	00d0      	lsls	r0, r2, #3
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	1911      	adds	r1, r2, r4
 8005758:	6639      	str	r1, [r7, #96]	; 0x60
 800575a:	416b      	adcs	r3, r5
 800575c:	667b      	str	r3, [r7, #100]	; 0x64
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	1891      	adds	r1, r2, r2
 800576a:	63b9      	str	r1, [r7, #56]	; 0x38
 800576c:	415b      	adcs	r3, r3
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005774:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005778:	f7fb f944 	bl	8000a04 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4ba5      	ldr	r3, [pc, #660]	; (8005a18 <UART_SetConfig+0x38c>)
 8005782:	fba3 2302 	umull	r2, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	011e      	lsls	r6, r3, #4
 800578a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800578c:	461c      	mov	r4, r3
 800578e:	f04f 0500 	mov.w	r5, #0
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	1891      	adds	r1, r2, r2
 8005798:	6339      	str	r1, [r7, #48]	; 0x30
 800579a:	415b      	adcs	r3, r3
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057a2:	1912      	adds	r2, r2, r4
 80057a4:	eb45 0303 	adc.w	r3, r5, r3
 80057a8:	f04f 0000 	mov.w	r0, #0
 80057ac:	f04f 0100 	mov.w	r1, #0
 80057b0:	00d9      	lsls	r1, r3, #3
 80057b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057b6:	00d0      	lsls	r0, r2, #3
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	1911      	adds	r1, r2, r4
 80057be:	65b9      	str	r1, [r7, #88]	; 0x58
 80057c0:	416b      	adcs	r3, r5
 80057c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	461a      	mov	r2, r3
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	1891      	adds	r1, r2, r2
 80057d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80057d2:	415b      	adcs	r3, r3
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057de:	f7fb f911 	bl	8000a04 <__aeabi_uldivmod>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4b8c      	ldr	r3, [pc, #560]	; (8005a18 <UART_SetConfig+0x38c>)
 80057e8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	2164      	movs	r1, #100	; 0x64
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	3332      	adds	r3, #50	; 0x32
 80057fa:	4a87      	ldr	r2, [pc, #540]	; (8005a18 <UART_SetConfig+0x38c>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005808:	441e      	add	r6, r3
 800580a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580c:	4618      	mov	r0, r3
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	1894      	adds	r4, r2, r2
 8005818:	623c      	str	r4, [r7, #32]
 800581a:	415b      	adcs	r3, r3
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005822:	1812      	adds	r2, r2, r0
 8005824:	eb41 0303 	adc.w	r3, r1, r3
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	f04f 0500 	mov.w	r5, #0
 8005830:	00dd      	lsls	r5, r3, #3
 8005832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005836:	00d4      	lsls	r4, r2, #3
 8005838:	4622      	mov	r2, r4
 800583a:	462b      	mov	r3, r5
 800583c:	1814      	adds	r4, r2, r0
 800583e:	653c      	str	r4, [r7, #80]	; 0x50
 8005840:	414b      	adcs	r3, r1
 8005842:	657b      	str	r3, [r7, #84]	; 0x54
 8005844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	461a      	mov	r2, r3
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	1891      	adds	r1, r2, r2
 8005850:	61b9      	str	r1, [r7, #24]
 8005852:	415b      	adcs	r3, r3
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800585a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800585e:	f7fb f8d1 	bl	8000a04 <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <UART_SetConfig+0x38c>)
 8005868:	fba3 1302 	umull	r1, r3, r3, r2
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	2164      	movs	r1, #100	; 0x64
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	3332      	adds	r3, #50	; 0x32
 800587a:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <UART_SetConfig+0x38c>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f003 0207 	and.w	r2, r3, #7
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4432      	add	r2, r6
 800588c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588e:	e0b9      	b.n	8005a04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005892:	461c      	mov	r4, r3
 8005894:	f04f 0500 	mov.w	r5, #0
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	1891      	adds	r1, r2, r2
 800589e:	6139      	str	r1, [r7, #16]
 80058a0:	415b      	adcs	r3, r3
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058a8:	1912      	adds	r2, r2, r4
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	00d9      	lsls	r1, r3, #3
 80058b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058bc:	00d0      	lsls	r0, r2, #3
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	eb12 0804 	adds.w	r8, r2, r4
 80058c6:	eb43 0905 	adc.w	r9, r3, r5
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f04f 0100 	mov.w	r1, #0
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	008b      	lsls	r3, r1, #2
 80058de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058e2:	0082      	lsls	r2, r0, #2
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fb f88c 	bl	8000a04 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4b49      	ldr	r3, [pc, #292]	; (8005a18 <UART_SetConfig+0x38c>)
 80058f2:	fba3 2302 	umull	r2, r3, r3, r2
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	011e      	lsls	r6, r3, #4
 80058fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fc:	4618      	mov	r0, r3
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	1894      	adds	r4, r2, r2
 8005908:	60bc      	str	r4, [r7, #8]
 800590a:	415b      	adcs	r3, r3
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005912:	1812      	adds	r2, r2, r0
 8005914:	eb41 0303 	adc.w	r3, r1, r3
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	f04f 0500 	mov.w	r5, #0
 8005920:	00dd      	lsls	r5, r3, #3
 8005922:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005926:	00d4      	lsls	r4, r2, #3
 8005928:	4622      	mov	r2, r4
 800592a:	462b      	mov	r3, r5
 800592c:	1814      	adds	r4, r2, r0
 800592e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005930:	414b      	adcs	r3, r1
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800594c:	0082      	lsls	r2, r0, #2
 800594e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005952:	f7fb f857 	bl	8000a04 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <UART_SetConfig+0x38c>)
 800595c:	fba3 1302 	umull	r1, r3, r3, r2
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	2164      	movs	r1, #100	; 0x64
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	3332      	adds	r3, #50	; 0x32
 800596e:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <UART_SetConfig+0x38c>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597a:	441e      	add	r6, r3
 800597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597e:	4618      	mov	r0, r3
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	1894      	adds	r4, r2, r2
 800598a:	603c      	str	r4, [r7, #0]
 800598c:	415b      	adcs	r3, r3
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005994:	1812      	adds	r2, r2, r0
 8005996:	eb41 0303 	adc.w	r3, r1, r3
 800599a:	f04f 0400 	mov.w	r4, #0
 800599e:	f04f 0500 	mov.w	r5, #0
 80059a2:	00dd      	lsls	r5, r3, #3
 80059a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059a8:	00d4      	lsls	r4, r2, #3
 80059aa:	4622      	mov	r2, r4
 80059ac:	462b      	mov	r3, r5
 80059ae:	eb12 0a00 	adds.w	sl, r2, r0
 80059b2:	eb43 0b01 	adc.w	fp, r3, r1
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f04f 0100 	mov.w	r1, #0
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	008b      	lsls	r3, r1, #2
 80059ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059ce:	0082      	lsls	r2, r0, #2
 80059d0:	4650      	mov	r0, sl
 80059d2:	4659      	mov	r1, fp
 80059d4:	f7fb f816 	bl	8000a04 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <UART_SetConfig+0x38c>)
 80059de:	fba3 1302 	umull	r1, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2164      	movs	r1, #100	; 0x64
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	; 0x32
 80059f0:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <UART_SetConfig+0x38c>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 020f 	and.w	r2, r3, #15
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4432      	add	r2, r6
 8005a02:	609a      	str	r2, [r3, #8]
}
 8005a04:	bf00      	nop
 8005a06:	377c      	adds	r7, #124	; 0x7c
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40011000 	.word	0x40011000
 8005a14:	40011400 	.word	0x40011400
 8005a18:	51eb851f 	.word	0x51eb851f

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4d0d      	ldr	r5, [pc, #52]	; (8005a54 <__libc_init_array+0x38>)
 8005a20:	4c0d      	ldr	r4, [pc, #52]	; (8005a58 <__libc_init_array+0x3c>)
 8005a22:	1b64      	subs	r4, r4, r5
 8005a24:	10a4      	asrs	r4, r4, #2
 8005a26:	2600      	movs	r6, #0
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	4d0b      	ldr	r5, [pc, #44]	; (8005a5c <__libc_init_array+0x40>)
 8005a2e:	4c0c      	ldr	r4, [pc, #48]	; (8005a60 <__libc_init_array+0x44>)
 8005a30:	f000 f820 	bl	8005a74 <_init>
 8005a34:	1b64      	subs	r4, r4, r5
 8005a36:	10a4      	asrs	r4, r4, #2
 8005a38:	2600      	movs	r6, #0
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	08005ab4 	.word	0x08005ab4
 8005a58:	08005ab4 	.word	0x08005ab4
 8005a5c:	08005ab4 	.word	0x08005ab4
 8005a60:	08005ab8 	.word	0x08005ab8

08005a64 <memset>:
 8005a64:	4402      	add	r2, r0
 8005a66:	4603      	mov	r3, r0
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d100      	bne.n	8005a6e <memset+0xa>
 8005a6c:	4770      	bx	lr
 8005a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a72:	e7f9      	b.n	8005a68 <memset+0x4>

08005a74 <_init>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	bf00      	nop
 8005a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7a:	bc08      	pop	{r3}
 8005a7c:	469e      	mov	lr, r3
 8005a7e:	4770      	bx	lr

08005a80 <_fini>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	bf00      	nop
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr
