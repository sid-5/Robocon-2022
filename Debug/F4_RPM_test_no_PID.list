
F4_RPM_test_no_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000585c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a14  08005a14  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a1c  08005a1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000001c  08005a40  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005a40  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfab  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  0002dff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001585f  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dab7  00000000  00000000  00046c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a80d  00000000  00000000  0005472e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000def3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000def90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080059dc 	.word	0x080059dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	080059dc 	.word	0x080059dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <HAL_TIM_IC_CaptureCallback>:

//if PWM is not working then use max 40kHz of frequency for cytron driver


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  //direction set

 if (htim == &htim1)  // if interrupt source is channel 1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4e      	ldr	r2, [pc, #312]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d148      	bne.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
 {
  if (Is_First_Captured==0)  // is the first value captured ?
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10a      	bne.n	8000d2a <HAL_TIM_IC_CaptureCallback+0x2e>
  {
   IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000d14:	2100      	movs	r1, #0
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f003 fcd8 	bl	80046cc <HAL_TIM_ReadCapturedValue>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d20:	6013      	str	r3, [r2, #0]
   Is_First_Captured =1;  // set the first value captured as true
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e039      	b.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
  }

  else if (Is_First_Captured)  // if the first is captured
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d035      	beq.n	8000d9e <HAL_TIM_IC_CaptureCallback+0xa2>
  {
   IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000d32:	2100      	movs	r1, #0
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f003 fcc9 	bl	80046cc <HAL_TIM_ReadCapturedValue>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d3e:	6013      	str	r3, [r2, #0]

   if (IC_Value2 > IC_Value1)
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d907      	bls.n	8000d5c <HAL_TIM_IC_CaptureCallback+0x60>
   {
    Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4a3e      	ldr	r2, [pc, #248]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e011      	b.n	8000d80 <HAL_TIM_IC_CaptureCallback+0x84>
   }

   else if (IC_Value2 < IC_Value1)
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d209      	bcs.n	8000d7c <HAL_TIM_IC_CaptureCallback+0x80>
   {
    Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000d76:	4a36      	ldr	r2, [pc, #216]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e001      	b.n	8000d80 <HAL_TIM_IC_CaptureCallback+0x84>
   }

   else
   {
    Error_Handler();
 8000d7c:	f001 f816 	bl	8001dac <Error_Handler>
   }

   Frequency = HAL_RCC_GetPCLK2Freq()/(50*Difference);  // calculate frequency
 8000d80:	f002 fe3c 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8000d84:	4602      	mov	r2, r0
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2132      	movs	r1, #50	; 0x32
 8000d8c:	fb01 f303 	mul.w	r3, r1, r3
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d96:	6013      	str	r3, [r2, #0]


   Is_First_Captured = 0;  // reset the first captured
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  }
 }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 if (htim == &htim2)  // if interrupt source is channel 1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d148      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
  {
   if (Is_First_Captured2==0)  // is the first value captured ?
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <HAL_TIM_IC_CaptureCallback+0xc8>
   {
    IC_Value12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000dae:	2100      	movs	r1, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f003 fc8b 	bl	80046cc <HAL_TIM_ReadCapturedValue>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dba:	6013      	str	r3, [r2, #0]
    Is_First_Captured2 =1;  // set the first value captured as true
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
    Frequency2 = HAL_RCC_GetPCLK2Freq()/(50*Difference2);  // calculate frequency

    Is_First_Captured2 = 0;  // reset the first captured
   }
  }
}
 8000dc2:	e039      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
   else if (Is_First_Captured2)  // if the first is captured
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d035      	beq.n	8000e38 <HAL_TIM_IC_CaptureCallback+0x13c>
    IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f003 fc7c 	bl	80046cc <HAL_TIM_ReadCapturedValue>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000dd8:	6013      	str	r3, [r2, #0]
    if (IC_Value22 > IC_Value12)
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <HAL_TIM_IC_CaptureCallback+0xfa>
     Difference2 = IC_Value2-IC_Value12;   // calculate the difference
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x150>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e011      	b.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x11e>
    else if (IC_Value22 < IC_Value12)
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d209      	bcs.n	8000e16 <HAL_TIM_IC_CaptureCallback+0x11a>
     Difference2 = ((0xffff-IC_Value12)+IC_Value22) +1;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e001      	b.n	8000e1a <HAL_TIM_IC_CaptureCallback+0x11e>
     Error_Handler();
 8000e16:	f000 ffc9 	bl	8001dac <Error_Handler>
    Frequency2 = HAL_RCC_GetPCLK2Freq()/(50*Difference2);  // calculate frequency
 8000e1a:	f002 fdef 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2132      	movs	r1, #50	; 0x32
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0x170>)
 8000e30:	6013      	str	r3, [r2, #0]
    Is_First_Captured2 = 0;  // reset the first captured
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000264 	.word	0x20000264
 8000e44:	2000004c 	.word	0x2000004c
 8000e48:	2000003c 	.word	0x2000003c
 8000e4c:	20000040 	.word	0x20000040
 8000e50:	20000044 	.word	0x20000044
 8000e54:	20000048 	.word	0x20000048
 8000e58:	200002f4 	.word	0x200002f4
 8000e5c:	20000060 	.word	0x20000060
 8000e60:	20000050 	.word	0x20000050
 8000e64:	20000054 	.word	0x20000054
 8000e68:	20000058 	.word	0x20000058
 8000e6c:	2000005c 	.word	0x2000005c

08000e70 <stepper>:

void stepper(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,STEPPER_DIR_Pin,GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <stepper+0x3c>)
 8000e7c:	f002 f970 	bl	8003160 <HAL_GPIO_WritePin>
	while(stepperCount<10){
 8000e80:	e003      	b.n	8000e8a <stepper+0x1a>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1,50);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <stepper+0x40>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
	while(stepperCount<10){
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <stepper+0x44>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	ddf7      	ble.n	8000e82 <stepper+0x12>
	}
	start_stepper=0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <stepper+0x48>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
	stepperCount=0;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <stepper+0x44>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1,0);
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <stepper+0x40>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	200000e8 	.word	0x200000e8
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	20000078 	.word	0x20000078

08000ebc <servo>:

void servo(){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	//90 degree rotation
	if(countServo==0 && debounce==0){
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <servo+0x58>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10e      	bne.n	8000ee6 <servo+0x2a>
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <servo+0x5c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10a      	bne.n	8000ee6 <servo+0x2a>
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,125);  // duty cycle is 2.5 ms
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <servo+0x60>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	227d      	movs	r2, #125	; 0x7d
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
	countServo=1;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <servo+0x58>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
	debounce =5;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <servo+0x5c>)
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	601a      	str	r2, [r3, #0]
	}else if(countServo==1 && debounce==0){
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
			countServo=0;
			debounce =5;
	}
}
 8000ee4:	e011      	b.n	8000f0a <servo+0x4e>
	}else if(countServo==1 && debounce==0){
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <servo+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10d      	bne.n	8000f0a <servo+0x4e>
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <servo+0x5c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <servo+0x4e>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <servo+0x60>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2232      	movs	r2, #50	; 0x32
 8000efc:	63da      	str	r2, [r3, #60]	; 0x3c
			countServo=0;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <servo+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
			debounce =5;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <servo+0x5c>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000080 	.word	0x20000080
 8000f18:	20000084 	.word	0x20000084
 8000f1c:	20000130 	.word	0x20000130

08000f20 <linearActuator>:

void linearActuator(int dir){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(dir1 == 0 && linearDebounce==0){
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <linearActuator+0xc4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d114      	bne.n	8000f5a <linearActuator+0x3a>
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <linearActuator+0xc8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d110      	bne.n	8000f5a <linearActuator+0x3a>
		 HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	482b      	ldr	r0, [pc, #172]	; (8000fec <linearActuator+0xcc>)
 8000f3e:	f002 f90f 	bl	8003160 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	482a      	ldr	r0, [pc, #168]	; (8000ff0 <linearActuator+0xd0>)
 8000f48:	f002 f90a 	bl	8003160 <HAL_GPIO_WritePin>
		 dir1 = 1;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <linearActuator+0xc4>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
		 linearDebounce= 5;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <linearActuator+0xc8>)
 8000f54:	2205      	movs	r2, #5
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e040      	b.n	8000fdc <linearActuator+0xbc>
	}else if(dir1 == 1 && linearDebounce==0){
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <linearActuator+0xc4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10f      	bne.n	8000f82 <linearActuator+0x62>
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <linearActuator+0xc8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10b      	bne.n	8000f82 <linearActuator+0x62>
		 HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	481f      	ldr	r0, [pc, #124]	; (8000fec <linearActuator+0xcc>)
 8000f70:	f002 f8f6 	bl	8003160 <HAL_GPIO_WritePin>
				 dir1=0;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <linearActuator+0xc4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
				 linearDebounce=5;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <linearActuator+0xc8>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e02c      	b.n	8000fdc <linearActuator+0xbc>
	}
	else if(dir2==0 && linearDebounce==0){
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <linearActuator+0xd4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d114      	bne.n	8000fb4 <linearActuator+0x94>
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <linearActuator+0xc8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d110      	bne.n	8000fb4 <linearActuator+0x94>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	4815      	ldr	r0, [pc, #84]	; (8000fec <linearActuator+0xcc>)
 8000f98:	f002 f8e2 	bl	8003160 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <linearActuator+0xd0>)
 8000fa2:	f002 f8dd 	bl	8003160 <HAL_GPIO_WritePin>
		 dir2 = 1;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <linearActuator+0xd4>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		 linearDebounce=5;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <linearActuator+0xc8>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e013      	b.n	8000fdc <linearActuator+0xbc>
	}else if(dir2==1 && linearDebounce==0){
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <linearActuator+0xd4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d10f      	bne.n	8000fdc <linearActuator+0xbc>
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <linearActuator+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <linearActuator+0xbc>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	4808      	ldr	r0, [pc, #32]	; (8000fec <linearActuator+0xcc>)
 8000fca:	f002 f8c9 	bl	8003160 <HAL_GPIO_WritePin>

		 dir2 = 0;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <linearActuator+0xd4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		 linearDebounce=5;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <linearActuator+0xc8>)
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	601a      	str	r2, [r3, #0]
	}

}
 8000fda:	e7ff      	b.n	8000fdc <linearActuator+0xbc>
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000094 	.word	0x20000094
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	20000098 	.word	0x20000098

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f001 fa38 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 fa4a 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fdb2 	bl	8001b6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001008:	f000 fd90 	bl	8001b2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fd64 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001010:	f000 fb1e 	bl	8001650 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001014:	f000 fbe6 	bl	80017e4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001018:	f000 faa6 	bl	8001568 <MX_TIM1_Init>
  MX_TIM9_Init();
 800101c:	f000 fcd4 	bl	80019c8 <MX_TIM9_Init>
  MX_TIM5_Init();
 8001020:	f000 fc5a 	bl	80018d8 <MX_TIM5_Init>
  MX_TIM10_Init();
 8001024:	f000 fd0a 	bl	8001a3c <MX_TIM10_Init>
  MX_TIM3_Init();
 8001028:	f000 fb82 	bl	8001730 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//Locomotion
 800102c:	2100      	movs	r1, #0
 800102e:	48b2      	ldr	r0, [pc, #712]	; (80012f8 <main+0x300>)
 8001030:	f002 fdfa 	bl	8003c28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//Locomotion
 8001034:	2104      	movs	r1, #4
 8001036:	48b0      	ldr	r0, [pc, #704]	; (80012f8 <main+0x300>)
 8001038:	f002 fdf6 	bl	8003c28 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);//Passing
 800103c:	2108      	movs	r1, #8
 800103e:	48ae      	ldr	r0, [pc, #696]	; (80012f8 <main+0x300>)
 8001040:	f002 fdf2 	bl	8003c28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);//Lifting
 8001044:	210c      	movs	r1, #12
 8001046:	48ac      	ldr	r0, [pc, #688]	; (80012f8 <main+0x300>)
 8001048:	f002 fdee 	bl	8003c28 <HAL_TIM_PWM_Start>

	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);//BLDC1
 800104c:	2100      	movs	r1, #0
 800104e:	48ab      	ldr	r0, [pc, #684]	; (80012fc <main+0x304>)
 8001050:	f002 fdea 	bl	8003c28 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);//BLDC2
 8001054:	2104      	movs	r1, #4
 8001056:	48a9      	ldr	r0, [pc, #676]	; (80012fc <main+0x304>)
 8001058:	f002 fde6 	bl	8003c28 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);//Servo
 800105c:	2108      	movs	r1, #8
 800105e:	48a7      	ldr	r0, [pc, #668]	; (80012fc <main+0x304>)
 8001060:	f002 fde2 	bl	8003c28 <HAL_TIM_PWM_Start>

	 HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);//Stepper
 8001064:	2100      	movs	r1, #0
 8001066:	48a6      	ldr	r0, [pc, #664]	; (8001300 <main+0x308>)
 8001068:	f002 fdde 	bl	8003c28 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);//Encoder
 800106c:	2100      	movs	r1, #0
 800106e:	48a5      	ldr	r0, [pc, #660]	; (8001304 <main+0x30c>)
 8001070:	f002 fee4 	bl	8003e3c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001074:	2100      	movs	r1, #0
 8001076:	48a4      	ldr	r0, [pc, #656]	; (8001308 <main+0x310>)
 8001078:	f002 fee0 	bl	8003e3c <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim9);
 800107c:	48a3      	ldr	r0, [pc, #652]	; (800130c <main+0x314>)
 800107e:	f002 fd21 	bl	8003ac4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxData, 3);
 8001082:	2203      	movs	r2, #3
 8001084:	49a2      	ldr	r1, [pc, #648]	; (8001310 <main+0x318>)
 8001086:	48a3      	ldr	r0, [pc, #652]	; (8001314 <main+0x31c>)
 8001088:	f004 f83b 	bl	8005102 <HAL_UART_Receive_DMA>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
 800108c:	4b9a      	ldr	r3, [pc, #616]	; (80012f8 <main+0x300>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2232      	movs	r2, #50	; 0x32
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,0);//bldc default 0
 8001094:	4b99      	ldr	r3, [pc, #612]	; (80012fc <main+0x304>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);
 800109c:	4b97      	ldr	r3, [pc, #604]	; (80012fc <main+0x304>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3,50);
 80010a4:	4b95      	ldr	r3, [pc, #596]	; (80012fc <main+0x304>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2232      	movs	r2, #50	; 0x32
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOE, BLDC1_brk_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2104      	movs	r1, #4
 80010b0:	4899      	ldr	r0, [pc, #612]	; (8001318 <main+0x320>)
 80010b2:	f002 f855 	bl	8003160 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(GPIOE, BLDC2_brk_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2108      	movs	r1, #8
 80010ba:	4897      	ldr	r0, [pc, #604]	; (8001318 <main+0x320>)
 80010bc:	f002 f850 	bl	8003160 <HAL_GPIO_WritePin>

	////////////////////////////

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,100);
 80010c0:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <main+0x304>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag){
 80010c8:	4b94      	ldr	r3, [pc, #592]	; (800131c <main+0x324>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8085 	beq.w	80011dc <main+0x1e4>
	  	  	  		speed = Frequency/30;
 80010d2:	4b93      	ldr	r3, [pc, #588]	; (8001320 <main+0x328>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a93      	ldr	r2, [pc, #588]	; (8001324 <main+0x32c>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	461a      	mov	r2, r3
 80010e0:	4b91      	ldr	r3, [pc, #580]	; (8001328 <main+0x330>)
 80010e2:	601a      	str	r2, [r3, #0]
	  	  	  		speed2 = Frequency2/30;
 80010e4:	4b91      	ldr	r3, [pc, #580]	; (800132c <main+0x334>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a8e      	ldr	r2, [pc, #568]	; (8001324 <main+0x32c>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b8f      	ldr	r3, [pc, #572]	; (8001330 <main+0x338>)
 80010f4:	601a      	str	r2, [r3, #0]
	  	  	  		errorSum = errorSum + (target - speed)*0.1;
 80010f6:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <main+0x33c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f9ae 	bl	800045c <__aeabi_ui2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
 8001104:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <main+0x340>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b87      	ldr	r3, [pc, #540]	; (8001328 <main+0x330>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f9b4 	bl	800047c <__aeabi_i2d>
 8001114:	a376      	add	r3, pc, #472	; (adr r3, 80012f0 <main+0x2f8>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa19 	bl	8000550 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f85d 	bl	80001e4 <__adddf3>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fc47 	bl	80009c4 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	4a7e      	ldr	r2, [pc, #504]	; (8001334 <main+0x33c>)
 800113a:	6013      	str	r3, [r2, #0]
	  	  	  	PID = (target-speed)*KP + KD*(speed - prev_speed)/0.1;// + KI*errorSum;
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <main+0x340>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b79      	ldr	r3, [pc, #484]	; (8001328 <main+0x330>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <main+0x344>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	ee17 0a90 	vmov	r0, s15
 800115c:	f7ff f9a0 	bl	80004a0 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b70      	ldr	r3, [pc, #448]	; (8001328 <main+0x330>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <main+0x348>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001176:	4b73      	ldr	r3, [pc, #460]	; (8001344 <main+0x34c>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	ee17 0a90 	vmov	r0, s15
 8001184:	f7ff f98c 	bl	80004a0 <__aeabi_f2d>
 8001188:	a359      	add	r3, pc, #356	; (adr r3, 80012f0 <main+0x2f8>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fb09 	bl	80007a4 <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4620      	mov	r0, r4
 8001198:	4629      	mov	r1, r5
 800119a:	f7ff f823 	bl	80001e4 <__adddf3>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fbe5 	bl	8000974 <__aeabi_d2iz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a66      	ldr	r2, [pc, #408]	; (8001348 <main+0x350>)
 80011ae:	6013      	str	r3, [r2, #0]
	  	  	  		  if(PID<0){
 80011b0:	4b65      	ldr	r3, [pc, #404]	; (8001348 <main+0x350>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da03      	bge.n	80011c0 <main+0x1c8>
	  	  	  			  PID = 0;
 80011b8:	4b63      	ldr	r3, [pc, #396]	; (8001348 <main+0x350>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e006      	b.n	80011ce <main+0x1d6>
	  	  	  		  }else if(PID>100){
 80011c0:	4b61      	ldr	r3, [pc, #388]	; (8001348 <main+0x350>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	dd02      	ble.n	80011ce <main+0x1d6>
	  	  	  			  PID = 100;
 80011c8:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <main+0x350>)
 80011ca:	2264      	movs	r2, #100	; 0x64
 80011cc:	601a      	str	r2, [r3, #0]
	  	  	  		  }
	  	  	  		  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,PID);// PID*100/target);
	  	  	  		  prev_speed = speed;
 80011ce:	4b56      	ldr	r3, [pc, #344]	; (8001328 <main+0x330>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <main+0x348>)
 80011d4:	6013      	str	r3, [r2, #0]
	  	  	  		  flag = 0;
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <main+0x324>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
	  	  	  	  }

	  	  if(rxData[0] == 1) //up//Button Up
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <main+0x318>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d114      	bne.n	800120e <main+0x216>
	  	  		{
	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	4858      	ldr	r0, [pc, #352]	; (800134c <main+0x354>)
 80011ec:	f001 ffb8 	bl	8003160 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	4855      	ldr	r0, [pc, #340]	; (800134c <main+0x354>)
 80011f8:	f001 ffb2 	bl	8003160 <HAL_GPIO_WritePin>

	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <main+0x300>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2264      	movs	r2, #100	; 0x64
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 8001204:	4b3c      	ldr	r3, [pc, #240]	; (80012f8 <main+0x300>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2264      	movs	r2, #100	; 0x64
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
 800120c:	e75c      	b.n	80010c8 <main+0xd0>
	  	  		}

	  	  //Down // Button Down
	  	  		else if (rxData[0] == 2)
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <main+0x318>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d114      	bne.n	8001240 <main+0x248>
	  	  		{
	  	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800121c:	484b      	ldr	r0, [pc, #300]	; (800134c <main+0x354>)
 800121e:	f001 ff9f 	bl	8003160 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	4848      	ldr	r0, [pc, #288]	; (800134c <main+0x354>)
 800122a:	f001 ff99 	bl	8003160 <HAL_GPIO_WritePin>

	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <main+0x300>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2264      	movs	r2, #100	; 0x64
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <main+0x300>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2264      	movs	r2, #100	; 0x64
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
 800123e:	e743      	b.n	80010c8 <main+0xd0>
	  	  		}

	  	  		//left // Button Left
	  	  		else if (rxData[0] == 3)
 8001240:	4b33      	ldr	r3, [pc, #204]	; (8001310 <main+0x318>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d114      	bne.n	8001272 <main+0x27a>
	  	  		{
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124e:	483f      	ldr	r0, [pc, #252]	; (800134c <main+0x354>)
 8001250:	f001 ff86 	bl	8003160 <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	483c      	ldr	r0, [pc, #240]	; (800134c <main+0x354>)
 800125c:	f001 ff80 	bl	8003160 <HAL_GPIO_WritePin>

	  	  		    __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,100);
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <main+0x300>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	635a      	str	r2, [r3, #52]	; 0x34
	  		        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <main+0x300>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2264      	movs	r2, #100	; 0x64
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
 8001270:	e72a      	b.n	80010c8 <main+0xd0>
	  	    }

	  	  	  //right // Button Rights
	  	  		else if (rxData[0] == 4)
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <main+0x318>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d114      	bne.n	80012a4 <main+0x2ac>
	  	  		{
	  	  			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001280:	4832      	ldr	r0, [pc, #200]	; (800134c <main+0x354>)
 8001282:	f001 ff6d 	bl	8003160 <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128c:	482f      	ldr	r0, [pc, #188]	; (800134c <main+0x354>)
 800128e:	f001 ff67 	bl	8003160 <HAL_GPIO_WritePin>

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,100);
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <main+0x300>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2264      	movs	r2, #100	; 0x64
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
				    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,100);
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <main+0x300>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	e711      	b.n	80010c8 <main+0xd0>
	  	    }

	  	  	  //PASSING //Button Square
	  	  	else if (rxData[0] == 5)
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <main+0x318>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d10a      	bne.n	80012c2 <main+0x2ca>
	  	  	{
	  	  		//Passing on
	  	  		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b2:	4826      	ldr	r0, [pc, #152]	; (800134c <main+0x354>)
 80012b4:	f001 ff54 	bl	8003160 <HAL_GPIO_WritePin>

	  	  	 	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,32);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <main+0x300>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2220      	movs	r2, #32
 80012be:	63da      	str	r2, [r3, #60]	; 0x3c
 80012c0:	e702      	b.n	80010c8 <main+0xd0>
//	  	  					bldcDebounce = 5;
//	  	  		  	  		}
	  	  	}

	  	 //toggle servo//Button Circle
	  	  	else if (rxData[0] == 6)
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <main+0x318>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d102      	bne.n	80012d0 <main+0x2d8>
	  	  	 {
	  	  	servo();
 80012ca:	f7ff fdf7 	bl	8000ebc <servo>
 80012ce:	e6fb      	b.n	80010c8 <main+0xd0>

	  	  	 }

	  	    //toggle linear actuator down  //Button L1
	  	  	else if(rxData[0] == 7){
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <main+0x318>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	d103      	bne.n	80012e0 <main+0x2e8>
	  	  	// HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_SET);
			 //HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR2_Pin, GPIO_PIN_SET);
				linearActuator(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fe21 	bl	8000f20 <linearActuator>
 80012de:	e6f3      	b.n	80010c8 <main+0xd0>
	  			 //HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
	  			 //HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
	  	  	}

			//toggle linear actuator up	  //Button R1
	  	  	else if(rxData[0] == 9){
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <main+0x318>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d133      	bne.n	8001350 <main+0x358>
	  	  	 //HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_SET);
	  	  		//	 HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR2_Pin, GPIO_PIN_RESET);
	  	  			 linearActuator(0);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fe19 	bl	8000f20 <linearActuator>
 80012ee:	e6eb      	b.n	80010c8 <main+0xd0>
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fb99999 	.word	0x3fb99999
 80012f8:	200000a0 	.word	0x200000a0
 80012fc:	20000130 	.word	0x20000130
 8001300:	200000e8 	.word	0x200000e8
 8001304:	20000264 	.word	0x20000264
 8001308:	200002f4 	.word	0x200002f4
 800130c:	200002ac 	.word	0x200002ac
 8001310:	2000009c 	.word	0x2000009c
 8001314:	20000220 	.word	0x20000220
 8001318:	40021000 	.word	0x40021000
 800131c:	20000038 	.word	0x20000038
 8001320:	20000048 	.word	0x20000048
 8001324:	88888889 	.word	0x88888889
 8001328:	2000006c 	.word	0x2000006c
 800132c:	2000005c 	.word	0x2000005c
 8001330:	20000070 	.word	0x20000070
 8001334:	20000068 	.word	0x20000068
 8001338:	20000000 	.word	0x20000000
 800133c:	20000004 	.word	0x20000004
 8001340:	20000074 	.word	0x20000074
 8001344:	20000008 	.word	0x20000008
 8001348:	20000064 	.word	0x20000064
 800134c:	40020c00 	.word	0x40020c00
	  	  		// HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
	  	  		// HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
	  	  	}

	  	   //BLDC ON //Button L2
	  	  	else if(rxData[0] == 8){
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <main+0x47c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b08      	cmp	r3, #8
 8001356:	d133      	bne.n	80013c0 <main+0x3c8>
//	  	  	 HAL_GPIO_WritePin(GPIOA, BLDC_PWM1_Pin, GPIO_PIN_SET);
//	  	  	 HAL_GPIO_WritePin(GPIOA, BLDC_PWM2_Pin, GPIO_PIN_SET);
				if(countBldc==0 && bldcDebounce == 0){
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <main+0x480>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d114      	bne.n	800138a <main+0x392>
 8001360:	4b46      	ldr	r3, [pc, #280]	; (800147c <main+0x484>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d110      	bne.n	800138a <main+0x392>
					HAL_GPIO_WritePin(GPIOE, BLDC1_brk_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2104      	movs	r1, #4
 800136c:	4844      	ldr	r0, [pc, #272]	; (8001480 <main+0x488>)
 800136e:	f001 fef7 	bl	8003160 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, BLDC2_brk_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4842      	ldr	r0, [pc, #264]	; (8001480 <main+0x488>)
 8001378:	f001 fef2 	bl	8003160 <HAL_GPIO_WritePin>
					countBldc=1;
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <main+0x480>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
					bldcDebounce = 5;
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <main+0x484>)
 8001384:	2205      	movs	r2, #5
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e073      	b.n	8001472 <main+0x47a>
					}
				else if(countBldc==1 && bldcDebounce == 0){
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <main+0x480>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f47f ae9a 	bne.w	80010c8 <main+0xd0>
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <main+0x484>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f47f ae95 	bne.w	80010c8 <main+0xd0>
					HAL_GPIO_WritePin(GPIOE, BLDC1_brk_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2104      	movs	r1, #4
 80013a2:	4837      	ldr	r0, [pc, #220]	; (8001480 <main+0x488>)
 80013a4:	f001 fedc 	bl	8003160 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOE, BLDC2_brk_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2108      	movs	r1, #8
 80013ac:	4834      	ldr	r0, [pc, #208]	; (8001480 <main+0x488>)
 80013ae:	f001 fed7 	bl	8003160 <HAL_GPIO_WritePin>
					countBldc=0;
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <main+0x480>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <main+0x484>)
 80013ba:	2205      	movs	r2, #5
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e683      	b.n	80010c8 <main+0xd0>
//	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,1000);
//	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,1000);
	  	  	}

	  	  // Stepper 90 deg//Button R2
	  	  	else if(rxData[0] == 10){
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x47c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d105      	bne.n	80013d4 <main+0x3dc>
				start_stepper = 1;
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <main+0x48c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
				stepper();
 80013ce:	f7ff fd4f 	bl	8000e70 <stepper>
 80013d2:	e679      	b.n	80010c8 <main+0xd0>
	  	  	}
	  	  	  //Lifting Up //Button Triangle
	  	  	else if(rxData[0] == 11){
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <main+0x47c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b0b      	cmp	r3, #11
 80013da:	d10a      	bne.n	80013f2 <main+0x3fa>
				 HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e2:	4829      	ldr	r0, [pc, #164]	; (8001488 <main+0x490>)
 80013e4:	f001 febc 	bl	8003160 <HAL_GPIO_WritePin>

				 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,250);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <main+0x494>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	22fa      	movs	r2, #250	; 0xfa
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
 80013f0:	e66a      	b.n	80010c8 <main+0xd0>
	  	  	}
	  	  	  //Lifting Down// Button Cross
	  	  	else if(rxData[0] == 12){
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x47c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d10a      	bne.n	8001410 <main+0x418>
	  	  	  	  HAL_GPIO_WritePin(GPIOD,  LiftingMotor_DIR_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <main+0x490>)
 8001402:	f001 fead 	bl	8003160 <HAL_GPIO_WritePin>

				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,250);
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <main+0x494>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	22fa      	movs	r2, #250	; 0xfa
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
 800140e:	e65b      	b.n	80010c8 <main+0xd0>
	  	  	else{
	  	  	  	  		  	//repeating block to set PID frequency and setting tp zero
//	  	  	  	  	  check = 0;
//	  	  	  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  	  	  	  		  	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	  	  	HAL_GPIO_WritePin(GPIOC, LinearActuator_DIR1_Pin, GPIO_PIN_RESET); //linearActuator
 8001410:	2200      	movs	r2, #0
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <main+0x498>)
 8001416:	f001 fea3 	bl	8003160 <HAL_GPIO_WritePin>
	  	  	  	  		  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <main+0x494>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2200      	movs	r2, #0
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  		  	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,0);
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <main+0x494>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	639a      	str	r2, [r3, #56]	; 0x38

	  	  	  	  		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET );
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <main+0x490>)
 8001432:	f001 fe95 	bl	8003160 <HAL_GPIO_WritePin>
	  	  	  	  		  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET );
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <main+0x490>)
 800143e:	f001 fe8f 	bl	8003160 <HAL_GPIO_WritePin>

	  	  	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);//locomotion 0
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <main+0x494>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,0);
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <main+0x494>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	639a      	str	r2, [r3, #56]	; 0x38

	  	  	  	  		  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,0);//Passing 0
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <main+0x494>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2200      	movs	r2, #0
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	  	  		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0);//lifting 0
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <main+0x494>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

	  	  	  	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,0);//BLDC 0
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <main+0x49c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	  	  	  	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2,0);//BLDC 0
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <main+0x49c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
	  if(flag){
 8001472:	e629      	b.n	80010c8 <main+0xd0>
 8001474:	2000009c 	.word	0x2000009c
 8001478:	2000008c 	.word	0x2000008c
 800147c:	20000090 	.word	0x20000090
 8001480:	40021000 	.word	0x40021000
 8001484:	20000078 	.word	0x20000078
 8001488:	40020c00 	.word	0x40020c00
 800148c:	200000a0 	.word	0x200000a0
 8001490:	40020800 	.word	0x40020800
 8001494:	20000130 	.word	0x20000130

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fa90 	bl	80059cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <SystemClock_Config+0xc8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <SystemClock_Config+0xc8>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <SystemClock_Config+0xc8>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <SystemClock_Config+0xcc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <SystemClock_Config+0xcc>)
 80014e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <SystemClock_Config+0xcc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fc:	2310      	movs	r3, #16
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001508:	2308      	movs	r3, #8
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001510:	2302      	movs	r3, #2
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fe39 	bl	8003194 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001528:	f000 fc40 	bl	8001dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f89c 	bl	8003684 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001552:	f000 fc2b 	bl	8001dac <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3750      	adds	r7, #80	; 0x50
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_TIM1_Init+0xe0>)
 8001594:	4a2d      	ldr	r2, [pc, #180]	; (800164c <MX_TIM1_Init+0xe4>)
 8001596:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <MX_TIM1_Init+0xe0>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015be:	4822      	ldr	r0, [pc, #136]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015c0:	f002 fa30 	bl	8003a24 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80015ca:	f000 fbef 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4619      	mov	r1, r3
 80015da:	481b      	ldr	r0, [pc, #108]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015dc:	f002 ffae 	bl	800453c <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015e6:	f000 fbe1 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <MX_TIM1_Init+0xe0>)
 80015ec:	f002 fbcc 	bl	8003d88 <HAL_TIM_IC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80015f6:	f000 fbd9 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <MX_TIM1_Init+0xe0>)
 800160a:	f003 fcab 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001614:	f000 fbca 	bl	8001dac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_TIM1_Init+0xe0>)
 8001630:	f002 fe26 	bl	8004280 <HAL_TIM_IC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800163a:	f000 fbb7 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000264 	.word	0x20000264
 800164c:	40010000 	.word	0x40010000

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <MX_TIM2_Init+0xdc>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <MX_TIM2_Init+0xdc>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <MX_TIM2_Init+0xdc>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <MX_TIM2_Init+0xdc>)
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <MX_TIM2_Init+0xdc>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_TIM2_Init+0xdc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a2:	4822      	ldr	r0, [pc, #136]	; (800172c <MX_TIM2_Init+0xdc>)
 80016a4:	f002 f9be 	bl	8003a24 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80016ae:	f000 fb7d 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	4619      	mov	r1, r3
 80016be:	481b      	ldr	r0, [pc, #108]	; (800172c <MX_TIM2_Init+0xdc>)
 80016c0:	f002 ff3c 	bl	800453c <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ca:	f000 fb6f 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <MX_TIM2_Init+0xdc>)
 80016d0:	f002 fb5a 	bl	8003d88 <HAL_TIM_IC_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016da:	f000 fb67 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	; (800172c <MX_TIM2_Init+0xdc>)
 80016ee:	f003 fc39 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80016f8:	f000 fb58 	bl	8001dac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001700:	2301      	movs	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_TIM2_Init+0xdc>)
 8001714:	f002 fdb4 	bl	8004280 <HAL_TIM_IC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800171e:	f000 fb45 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002f4 	.word	0x200002f4

08001730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_TIM3_Init+0xac>)
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <MX_TIM3_Init+0xb0>)
 8001756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM3_Init+0xac>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_TIM3_Init+0xac>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM3_Init+0xac>)
 8001766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_TIM3_Init+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM3_Init+0xac>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM3_Init+0xac>)
 800177a:	f002 fa05 	bl	8003b88 <HAL_TIM_PWM_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 fb12 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_TIM3_Init+0xac>)
 8001798:	f003 fbe4 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017a2:	f000 fb03 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM3_Init+0xac>)
 80017be:	f002 fdfb 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017c8:	f000 faf0 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM3_Init+0xac>)
 80017ce:	f000 fc4f 	bl	8002070 <HAL_TIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000178 	.word	0x20000178
 80017e0:	40000400 	.word	0x40000400

080017e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001808:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <MX_TIM4_Init+0xf0>)
 800180a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <MX_TIM4_Init+0xec>)
 800180e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001812:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <MX_TIM4_Init+0xec>)
 800181c:	2264      	movs	r2, #100	; 0x64
 800181e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800182c:	4828      	ldr	r0, [pc, #160]	; (80018d0 <MX_TIM4_Init+0xec>)
 800182e:	f002 f9ab 	bl	8003b88 <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001838:	f000 fab8 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4619      	mov	r1, r3
 800184a:	4821      	ldr	r0, [pc, #132]	; (80018d0 <MX_TIM4_Init+0xec>)
 800184c:	f003 fb8a 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001856:	f000 faa9 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	; 0x60
 800185c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	4817      	ldr	r0, [pc, #92]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001872:	f002 fda1 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800187c:	f000 fa96 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2204      	movs	r2, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4812      	ldr	r0, [pc, #72]	; (80018d0 <MX_TIM4_Init+0xec>)
 8001888:	f002 fd96 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001892:	f000 fa8b 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2208      	movs	r2, #8
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <MX_TIM4_Init+0xec>)
 800189e:	f002 fd8b 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80018a8:	f000 fa80 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	220c      	movs	r2, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM4_Init+0xec>)
 80018b4:	f002 fd80 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80018be:	f000 fa75 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM4_Init+0xec>)
 80018c4:	f000 fbd4 	bl	8002070 <HAL_TIM_MspPostInit>

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200000a0 	.word	0x200000a0
 80018d4:	40000800 	.word	0x40000800

080018d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <MX_TIM5_Init+0xec>)
 800190c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <MX_TIM5_Init+0xe8>)
 8001910:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001914:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_TIM5_Init+0xe8>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800191e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001922:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <MX_TIM5_Init+0xe8>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001930:	4823      	ldr	r0, [pc, #140]	; (80019c0 <MX_TIM5_Init+0xe8>)
 8001932:	f002 f877 	bl	8003a24 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800193c:	f000 fa36 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194a:	4619      	mov	r1, r3
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800194e:	f002 fdf5 	bl	800453c <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001958:	f000 fa28 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800195c:	4818      	ldr	r0, [pc, #96]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800195e:	f002 f913 	bl	8003b88 <HAL_TIM_PWM_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001968:	f000 fa20 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4619      	mov	r1, r3
 800197a:	4811      	ldr	r0, [pc, #68]	; (80019c0 <MX_TIM5_Init+0xe8>)
 800197c:	f003 faf2 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001986:	f000 fa11 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2208      	movs	r2, #8
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <MX_TIM5_Init+0xe8>)
 80019a2:	f002 fd09 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80019ac:	f000 f9fe 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <MX_TIM5_Init+0xe8>)
 80019b2:	f000 fb5d 	bl	8002070 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	; 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000130 	.word	0x20000130
 80019c4:	40000c00 	.word	0x40000c00

080019c8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <MX_TIM9_Init+0x70>)
 80019de:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 50000-1;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019e2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80019e6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019f0:	2264      	movs	r2, #100	; 0x64
 80019f2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_TIM9_Init+0x6c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <MX_TIM9_Init+0x6c>)
 8001a02:	f002 f80f 	bl	8003a24 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001a0c:	f000 f9ce 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_TIM9_Init+0x6c>)
 8001a1c:	f002 fd8e 	bl	800453c <HAL_TIM_ConfigClockSource>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001a26:	f000 f9c1 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200002ac 	.word	0x200002ac
 8001a38:	40014000 	.word	0x40014000

08001a3c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <MX_TIM10_Init+0x98>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000-1;
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a60:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a6e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a7c:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a7e:	f001 ffd1 	bl	8003a24 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001a88:	f000 f990 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001a8e:	f002 f87b 	bl	8003b88 <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001a98:	f000 f988 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001ab4:	f002 fc80 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001abe:	f000 f975 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM10_Init+0x94>)
 8001ac4:	f000 fad4 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200000e8 	.word	0x200000e8
 8001ad4:	40014400 	.word	0x40014400

08001ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_USART1_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b10:	f003 faaa 	bl	8005068 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f000 f947 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000220 	.word	0x20000220
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_DMA_Init+0x3c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	203a      	movs	r0, #58	; 0x3a
 8001b54:	f000 fdd9 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001b58:	203a      	movs	r0, #58	; 0x3a
 8001b5a:	f000 fdf2 	bl	8002742 <HAL_NVIC_EnableIRQ>

}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a56      	ldr	r2, [pc, #344]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a4f      	ldr	r2, [pc, #316]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a41      	ldr	r2, [pc, #260]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BLDC1_brk_Pin|BLDC2_brk_Pin|GPIO2_1_Pin|GPIO2_2_Pin
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f641 013c 	movw	r1, #6204	; 0x183c
 8001c14:	4834      	ldr	r0, [pc, #208]	; (8001ce8 <MX_GPIO_Init+0x17c>)
 8001c16:	f001 faa3 	bl	8003160 <HAL_GPIO_WritePin>
                          |GPIO3_1_Pin|GPIO3_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLDC_1_Pin|BLDC_2_Pin|Motor3_DIR1_Pin|LinearActuator_dir_Pin
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001c20:	4832      	ldr	r0, [pc, #200]	; (8001cec <MX_GPIO_Init+0x180>)
 8001c22:	f001 fa9d 	bl	8003160 <HAL_GPIO_WritePin>
                          |LinearActuator_EN_Pin|LinearActuator_DIR1_Pin|LinearActuator_DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LinearActuator_en_GPIO_Port, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	4831      	ldr	r0, [pc, #196]	; (8001cf0 <MX_GPIO_Init+0x184>)
 8001c2c:	f001 fa98 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin|LiftingMotor_DIR_Pin|LOCO_DIR1_Pin|LOCO_DIR2_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8001c36:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <MX_GPIO_Init+0x188>)
 8001c38:	f001 fa92 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	482d      	ldr	r0, [pc, #180]	; (8001cf8 <MX_GPIO_Init+0x18c>)
 8001c44:	f001 fa8c 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLDC1_brk_Pin BLDC2_brk_Pin GPIO2_1_Pin GPIO2_2_Pin
                           GPIO3_1_Pin GPIO3_2_Pin */
  GPIO_InitStruct.Pin = BLDC1_brk_Pin|BLDC2_brk_Pin|GPIO2_1_Pin|GPIO2_2_Pin
 8001c48:	f641 033c 	movw	r3, #6204	; 0x183c
 8001c4c:	617b      	str	r3, [r7, #20]
                          |GPIO3_1_Pin|GPIO3_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <MX_GPIO_Init+0x17c>)
 8001c62:	f001 f8f9 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLDC_1_Pin BLDC_2_Pin Motor3_DIR1_Pin LinearActuator_dir_Pin
                           LinearActuator_EN_Pin LinearActuator_DIR1_Pin LinearActuator_DIR2_Pin */
  GPIO_InitStruct.Pin = BLDC_1_Pin|BLDC_2_Pin|Motor3_DIR1_Pin|LinearActuator_dir_Pin
 8001c66:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8001c6a:	617b      	str	r3, [r7, #20]
                          |LinearActuator_EN_Pin|LinearActuator_DIR1_Pin|LinearActuator_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481b      	ldr	r0, [pc, #108]	; (8001cec <MX_GPIO_Init+0x180>)
 8001c80:	f001 f8ea 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LinearActuator_en_Pin */
  GPIO_InitStruct.Pin = LinearActuator_en_Pin;
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LinearActuator_en_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4815      	ldr	r0, [pc, #84]	; (8001cf0 <MX_GPIO_Init+0x184>)
 8001c9c:	f001 f8dc 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PassingMotor_DIR_Pin LiftingMotor_DIR_Pin LOCO_DIR1_Pin LOCO_DIR2_Pin */
  GPIO_InitStruct.Pin = PassingMotor_DIR_Pin|LiftingMotor_DIR_Pin|LOCO_DIR1_Pin|LOCO_DIR2_Pin;
 8001ca0:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <MX_GPIO_Init+0x188>)
 8001cba:	f001 f8cd 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEPPER_DIR_Pin */
  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
 8001cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEPPER_DIR_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <MX_GPIO_Init+0x18c>)
 8001cd8:	f001 f8be 	bl	8002e58 <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40020400 	.word	0x40020400

08001cfc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	//test +=1;
	if(linearDebounce>0){
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dd04      	ble.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x1a>
		linearDebounce--;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d14:	6013      	str	r3, [r2, #0]

	}
	if(bldcDebounce>0){
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	dd04      	ble.n	8001d28 <HAL_TIM_PeriodElapsedCallback+0x2c>
		bldcDebounce--;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d26:	6013      	str	r3, [r2, #0]
	}
	if(debounce>0){
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	dd04      	ble.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x3e>
				debounce --;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d38:	6013      	str	r3, [r2, #0]
			}
	if(start_stepper){
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_PeriodElapsedCallback+0x50>
		stepperCount+=1;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d4a:	6013      	str	r3, [r2, #0]
	}
	if(htim == &htim9){  //updates every 100ms
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d102      	bne.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x5e>
		flag = 1;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

	}
	if(start_stepper){
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00e      	beq.n	8001d80 <HAL_TIM_PeriodElapsedCallback+0x84>
		stepperIsOn += 1;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d6a:	6013      	str	r3, [r2, #0]
		if(stepperIsOn == 10){
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b0a      	cmp	r3, #10
 8001d72:	d105      	bne.n	8001d80 <HAL_TIM_PeriodElapsedCallback+0x84>
			start_stepper = 0;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
			stepperIsOn = 0;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	20000090 	.word	0x20000090
 8001d94:	20000084 	.word	0x20000084
 8001d98:	20000078 	.word	0x20000078
 8001d9c:	20000088 	.word	0x20000088
 8001da0:	200002ac 	.word	0x200002ac
 8001da4:	20000038 	.word	0x20000038
 8001da8:	2000007c 	.word	0x2000007c

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <Error_Handler+0x8>
	...

08001db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_MspInit+0x4c>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6c      	ldr	r2, [pc, #432]	; (8001fd8 <HAL_TIM_Base_MspInit+0x1d0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d145      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
 8001e2e:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
 8001e44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Encoder2_Pin;
 8001e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4858      	ldr	r0, [pc, #352]	; (8001fe0 <HAL_TIM_Base_MspInit+0x1d8>)
 8001e80:	f000 ffea 	bl	8002e58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2018      	movs	r0, #24
 8001e8a:	f000 fc3e 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e8e:	2018      	movs	r0, #24
 8001e90:	f000 fc57 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2019      	movs	r0, #25
 8001e9a:	f000 fc36 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e9e:	2019      	movs	r0, #25
 8001ea0:	f000 fc4f 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	201b      	movs	r0, #27
 8001eaa:	f000 fc2e 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001eae:	201b      	movs	r0, #27
 8001eb0:	f000 fc47 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001eb4:	e08c      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d134      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a44      	ldr	r2, [pc, #272]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder1_Pin;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder1_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	4834      	ldr	r0, [pc, #208]	; (8001fe4 <HAL_TIM_Base_MspInit+0x1dc>)
 8001f14:	f000 ffa0 	bl	8002e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	201c      	movs	r0, #28
 8001f1e:	f000 fbf4 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f22:	201c      	movs	r0, #28
 8001f24:	f000 fc0d 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001f28:	e052      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM5)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_TIM_Base_MspInit+0x1e0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d116      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	2032      	movs	r0, #50	; 0x32
 8001f56:	f000 fbd8 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f5a:	2032      	movs	r0, #50	; 0x32
 8001f5c:	f000 fbf1 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001f60:	e036      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM9)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_TIM_Base_MspInit+0x1e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d116      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2018      	movs	r0, #24
 8001f8e:	f000 fbbc 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f92:	2018      	movs	r0, #24
 8001f94:	f000 fbd5 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001f98:	e01a      	b.n	8001fd0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM10)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_TIM_Base_MspInit+0x1e8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d115      	bne.n	8001fd0 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_TIM_Base_MspInit+0x1d4>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2019      	movs	r0, #25
 8001fc6:	f000 fba0 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fca:	2019      	movs	r0, #25
 8001fcc:	f000 fbb9 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001fd0:	bf00      	nop
 8001fd2:	3738      	adds	r7, #56	; 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40020000 	.word	0x40020000
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40014400 	.word	0x40014400

08001ff4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_TIM_PWM_MspInit+0x70>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002022:	e01a      	b.n	800205a <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_TIM_PWM_MspInit+0x78>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d115      	bne.n	800205a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_PWM_MspInit+0x74>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201e      	movs	r0, #30
 8002050:	f000 fb5b 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002054:	201e      	movs	r0, #30
 8002056:	f000 fb74 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40000400 	.word	0x40000400
 8002068:	40023800 	.word	0x40023800
 800206c:	40000800 	.word	0x40000800

08002070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_TIM_MspPostInit+0x180>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11e      	bne.n	80020d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor3_PWM1_Pin;
 80020ae:	2340      	movs	r3, #64	; 0x40
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020be:	2302      	movs	r3, #2
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor3_PWM1_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	484b      	ldr	r0, [pc, #300]	; (80021f8 <HAL_TIM_MspPostInit+0x188>)
 80020ca:	f000 fec5 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80020ce:	e08a      	b.n	80021e6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a49      	ldr	r2, [pc, #292]	; (80021fc <HAL_TIM_MspPostInit+0x18c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d13d      	bne.n	8002156 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a44      	ldr	r2, [pc, #272]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PassingMotor_PWM_Pin|LiftingMotor_PWM_Pin;
 8002112:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002124:	2302      	movs	r3, #2
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4834      	ldr	r0, [pc, #208]	; (8002200 <HAL_TIM_MspPostInit+0x190>)
 8002130:	f000 fe92 	bl	8002e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LOCO_PWM1_Pin|LOCO_PWM2_Pin;
 8002134:	23c0      	movs	r3, #192	; 0xc0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002144:	2302      	movs	r3, #2
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	482d      	ldr	r0, [pc, #180]	; (8002204 <HAL_TIM_MspPostInit+0x194>)
 8002150:	f000 fe82 	bl	8002e58 <HAL_GPIO_Init>
}
 8002154:	e047      	b.n	80021e6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM5)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_TIM_MspPostInit+0x198>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d11e      	bne.n	800219e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6313      	str	r3, [r2, #48]	; 0x30
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_Pin;
 800217c:	2304      	movs	r3, #4
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800218c:	2302      	movs	r3, #2
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	4818      	ldr	r0, [pc, #96]	; (80021f8 <HAL_TIM_MspPostInit+0x188>)
 8002198:	f000 fe5e 	bl	8002e58 <HAL_GPIO_Init>
}
 800219c:	e023      	b.n	80021e6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1a      	ldr	r2, [pc, #104]	; (800220c <HAL_TIM_MspPostInit+0x19c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d11e      	bne.n	80021e6 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_TIM_MspPostInit+0x184>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 80021c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <HAL_TIM_MspPostInit+0x194>)
 80021e2:	f000 fe39 	bl	8002e58 <HAL_GPIO_Init>
}
 80021e6:	bf00      	nop
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40000800 	.word	0x40000800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40020400 	.word	0x40020400
 8002208:	40000c00 	.word	0x40000c00
 800220c:	40014400 	.word	0x40014400

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_UART_MspInit+0xe4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d15b      	bne.n	80022ea <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800226a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800227c:	2307      	movs	r3, #7
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	481d      	ldr	r0, [pc, #116]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002288:	f000 fde6 	bl	8002e58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_UART_MspInit+0xf0>)
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_UART_MspInit+0xf4>)
 8002290:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_UART_MspInit+0xf0>)
 8002294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002298:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_UART_MspInit+0xf0>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ce:	480c      	ldr	r0, [pc, #48]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022d0:	f000 fa52 	bl	8002778 <HAL_DMA_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80022da:	f7ff fd67 	bl	8001dac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	200001c0 	.word	0x200001c0
 8002304:	40026440 	.word	0x40026440

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002354:	f000 f8de 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002362:	f001 fe85 	bl	8004070 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002366:	4803      	ldr	r0, [pc, #12]	; (8002374 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002368:	f001 fe82 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000264 	.word	0x20000264
 8002374:	200002ac 	.word	0x200002ac

08002378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800237e:	f001 fe77 	bl	8004070 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002384:	f001 fe74 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000264 	.word	0x20000264
 8002390:	200000e8 	.word	0x200000e8

08002394 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM1_CC_IRQHandler+0x10>)
 800239a:	f001 fe69 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000264 	.word	0x20000264

080023a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM2_IRQHandler+0x10>)
 80023ae:	f001 fe5f 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200002f4 	.word	0x200002f4

080023bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <TIM4_IRQHandler+0x10>)
 80023c2:	f001 fe55 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200000a0 	.word	0x200000a0

080023d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <TIM5_IRQHandler+0x10>)
 80023d6:	f001 fe4b 	bl	8004070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000130 	.word	0x20000130

080023e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA2_Stream2_IRQHandler+0x10>)
 80023ea:	f000 facb 	bl	8002984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200001c0 	.word	0x200001c0

080023f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd7 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f003 fa9b 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7fe fdd3 	bl	8000ff8 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002460:	08005a24 	.word	0x08005a24
  ldr r2, =_sbss
 8002464:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002468:	20000340 	.word	0x20000340

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f92b 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	200f      	movs	r0, #15
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fc88 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f943 	bl	800275e <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f0:	f000 f90b 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000010 	.word	0x20000010
 800250c:	20000018 	.word	0x20000018
 8002510:	20000014 	.word	0x20000014

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000018 	.word	0x20000018
 8002538:	2000033c 	.word	0x2000033c

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2000033c 	.word	0x2000033c

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff feda 	bl	800253c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e099      	b.n	80028c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	e00f      	b.n	80027d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b6:	f7ff fec1 	bl	800253c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d908      	bls.n	80027d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e078      	b.n	80028c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e8      	bne.n	80027b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_DMA_Init+0x158>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4313      	orrs	r3, r2
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b04      	cmp	r3, #4
 8002868:	d117      	bne.n	800289a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fa6f 	bl	8002d60 <DMA_CheckFifoParam>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002896:	2301      	movs	r3, #1
 8002898:	e016      	b.n	80028c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa26 	bl	8002cf4 <DMA_CalcBaseAndBitshift>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	f010803f 	.word	0xf010803f

080028d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Start_IT+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e040      	b.n	800297c <HAL_DMA_Start_IT+0xa8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12f      	bne.n	800296e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9b8 	bl	8002c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	223f      	movs	r2, #63	; 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0216 	orr.w	r2, r2, #22
 8002942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e005      	b.n	800297a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002990:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <HAL_DMA_IRQHandler+0x258>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a92      	ldr	r2, [pc, #584]	; (8002be0 <HAL_DMA_IRQHandler+0x25c>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	2208      	movs	r2, #8
 80029b0:	409a      	lsls	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01a      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	2208      	movs	r2, #8
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2201      	movs	r2, #1
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f043 0202 	orr.w	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d012      	beq.n	8002a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2204      	movs	r2, #4
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2210      	movs	r2, #16
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d043      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03c      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2210      	movs	r2, #16
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d108      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d024      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
 8002ab2:	e01f      	b.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e016      	b.n	8002af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0208 	bic.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2220      	movs	r2, #32
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 808e 	beq.w	8002c22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8086 	beq.w	8002c22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d136      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0216 	bic.w	r2, r2, #22
 8002b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x1da>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0208 	bic.w	r2, r2, #8
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	223f      	movs	r2, #63	; 0x3f
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d07d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
        }
        return;
 8002b9a:	e078      	b.n	8002c8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01c      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d030      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
 8002bc8:	e02b      	b.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d027      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
 8002bda:	e022      	b.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
 8002bdc:	20000010 	.word	0x20000010
 8002be0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0210 	bic.w	r2, r2, #16
 8002c00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d032      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d022      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d307      	bcc.n	8002c6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f2      	bne.n	8002c4e <HAL_DMA_IRQHandler+0x2ca>
 8002c68:	e000      	b.n	8002c6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e000      	b.n	8002c90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c8e:	bf00      	nop
    }
  }
}
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop

08002c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d108      	bne.n	8002cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cd6:	e007      	b.n	8002ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3b10      	subs	r3, #16
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <DMA_CalcBaseAndBitshift+0x64>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <DMA_CalcBaseAndBitshift+0x68>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d909      	bls.n	8002d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	1d1a      	adds	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	659a      	str	r2, [r3, #88]	; 0x58
 8002d34:	e007      	b.n	8002d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	aaaaaaab 	.word	0xaaaaaaab
 8002d5c:	08005a0c 	.word	0x08005a0c

08002d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11f      	bne.n	8002dba <DMA_CheckFifoParam+0x5a>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d856      	bhi.n	8002e2e <DMA_CheckFifoParam+0xce>
 8002d80:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <DMA_CheckFifoParam+0x28>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002dab 	.word	0x08002dab
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002e2f 	.word	0x08002e2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d046      	beq.n	8002e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e043      	b.n	8002e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db2:	d140      	bne.n	8002e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db8:	e03d      	b.n	8002e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	d121      	bne.n	8002e08 <DMA_CheckFifoParam+0xa8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d837      	bhi.n	8002e3a <DMA_CheckFifoParam+0xda>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <DMA_CheckFifoParam+0x70>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002de7 	.word	0x08002de7
 8002dd8:	08002de1 	.word	0x08002de1
 8002ddc:	08002df9 	.word	0x08002df9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e030      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d025      	beq.n	8002e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df6:	e022      	b.n	8002e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e00:	d11f      	bne.n	8002e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e06:	e01c      	b.n	8002e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d903      	bls.n	8002e16 <DMA_CheckFifoParam+0xb6>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d003      	beq.n	8002e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e14:	e018      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1a:	e015      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00e      	beq.n	8002e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e00b      	b.n	8002e46 <DMA_CheckFifoParam+0xe6>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e00a      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e32:	bf00      	nop
 8002e34:	e008      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e36:	bf00      	nop
 8002e38:	e006      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3a:	bf00      	nop
 8002e3c:	e004      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
    }
  } 
  
  return status; 
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e159      	b.n	8003128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e74:	2201      	movs	r2, #1
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	f040 8148 	bne.w	8003122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d005      	beq.n	8002eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d130      	bne.n	8002f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d017      	beq.n	8002f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d123      	bne.n	8002f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	08da      	lsrs	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3208      	adds	r2, #8
 8002f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a2 	beq.w	8003122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_GPIO_Init+0x2e8>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ffa:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x2ec>)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a49      	ldr	r2, [pc, #292]	; (8003148 <HAL_GPIO_Init+0x2f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d019      	beq.n	800305a <HAL_GPIO_Init+0x202>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a48      	ldr	r2, [pc, #288]	; (800314c <HAL_GPIO_Init+0x2f4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_GPIO_Init+0x1fe>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a47      	ldr	r2, [pc, #284]	; (8003150 <HAL_GPIO_Init+0x2f8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00d      	beq.n	8003052 <HAL_GPIO_Init+0x1fa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a46      	ldr	r2, [pc, #280]	; (8003154 <HAL_GPIO_Init+0x2fc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d007      	beq.n	800304e <HAL_GPIO_Init+0x1f6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a45      	ldr	r2, [pc, #276]	; (8003158 <HAL_GPIO_Init+0x300>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_GPIO_Init+0x1f2>
 8003046:	2304      	movs	r3, #4
 8003048:	e008      	b.n	800305c <HAL_GPIO_Init+0x204>
 800304a:	2307      	movs	r3, #7
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x204>
 800304e:	2303      	movs	r3, #3
 8003050:	e004      	b.n	800305c <HAL_GPIO_Init+0x204>
 8003052:	2302      	movs	r3, #2
 8003054:	e002      	b.n	800305c <HAL_GPIO_Init+0x204>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_GPIO_Init+0x204>
 800305a:	2300      	movs	r3, #0
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f002 0203 	and.w	r2, r2, #3
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	4093      	lsls	r3, r2
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306c:	4935      	ldr	r1, [pc, #212]	; (8003144 <HAL_GPIO_Init+0x2ec>)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_GPIO_Init+0x304>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <HAL_GPIO_Init+0x304>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_GPIO_Init+0x304>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <HAL_GPIO_Init+0x304>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_GPIO_Init+0x304>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_GPIO_Init+0x304>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_GPIO_Init+0x304>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800311c:	4a0f      	ldr	r2, [pc, #60]	; (800315c <HAL_GPIO_Init+0x304>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	f67f aea2 	bls.w	8002e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	40013800 	.word	0x40013800
 8003148:	40020000 	.word	0x40020000
 800314c:	40020400 	.word	0x40020400
 8003150:	40020800 	.word	0x40020800
 8003154:	40020c00 	.word	0x40020c00
 8003158:	40021000 	.word	0x40021000
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e264      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d075      	beq.n	800329e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031b2:	4ba3      	ldr	r3, [pc, #652]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4ba0      	ldr	r3, [pc, #640]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d112      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b9d      	ldr	r3, [pc, #628]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b99      	ldr	r3, [pc, #612]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05b      	beq.n	800329c <HAL_RCC_OscConfig+0x108>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d157      	bne.n	800329c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e23f      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x74>
 80031fa:	4b91      	ldr	r3, [pc, #580]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e01d      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x98>
 8003212:	4b8b      	ldr	r3, [pc, #556]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a8a      	ldr	r2, [pc, #552]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a87      	ldr	r2, [pc, #540]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 800322c:	4b84      	ldr	r3, [pc, #528]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a83      	ldr	r2, [pc, #524]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7ff f976 	bl	800253c <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003254:	f7ff f972 	bl	800253c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e204      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0xc0>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7ff f962 	bl	800253c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7ff f95e 	bl	800253c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1f0      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0xe8>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d063      	beq.n	8003372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b62      	ldr	r3, [pc, #392]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d11c      	bne.n	80032fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x152>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e1c4      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4952      	ldr	r1, [pc, #328]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	e03a      	b.n	8003372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_RCC_OscConfig+0x2b0>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7ff f917 	bl	800253c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003312:	f7ff f913 	bl	800253c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1a5      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4940      	ldr	r1, [pc, #256]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e015      	b.n	8003372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_RCC_OscConfig+0x2b0>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7ff f8f6 	bl	800253c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003354:	f7ff f8f2 	bl	800253c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e184      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d030      	beq.n	80033e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x2b4>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7ff f8d6 	bl	800253c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003394:	f7ff f8d2 	bl	800253c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e164      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	4b26      	ldr	r3, [pc, #152]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x200>
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x2b4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ba:	f7ff f8bf 	bl	800253c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c2:	f7ff f8bb 	bl	800253c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e14d      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a0 	beq.w	800352e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x2b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d121      	bne.n	800346e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_RCC_OscConfig+0x2b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_RCC_OscConfig+0x2b8>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7ff f881 	bl	800253c <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e011      	b.n	8003462 <HAL_RCC_OscConfig+0x2ce>
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	42470000 	.word	0x42470000
 8003448:	42470e80 	.word	0x42470e80
 800344c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7ff f874 	bl	800253c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e106      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003462:	4b85      	ldr	r3, [pc, #532]	; (8003678 <HAL_RCC_OscConfig+0x4e4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x2f0>
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a80      	ldr	r2, [pc, #512]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	e01c      	b.n	80034be <HAL_RCC_OscConfig+0x32a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b05      	cmp	r3, #5
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_OscConfig+0x312>
 800348c:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a7a      	ldr	r2, [pc, #488]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	4b78      	ldr	r3, [pc, #480]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a77      	ldr	r2, [pc, #476]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	e00b      	b.n	80034be <HAL_RCC_OscConfig+0x32a>
 80034a6:	4b75      	ldr	r3, [pc, #468]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a74      	ldr	r2, [pc, #464]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b72      	ldr	r3, [pc, #456]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a71      	ldr	r2, [pc, #452]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d015      	beq.n	80034f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7ff f839 	bl	800253c <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7ff f835 	bl	800253c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0c5      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	4b65      	ldr	r3, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ee      	beq.n	80034ce <HAL_RCC_OscConfig+0x33a>
 80034f0:	e014      	b.n	800351c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7ff f823 	bl	800253c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7ff f81f 	bl	800253c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0af      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ee      	bne.n	80034fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a55      	ldr	r2, [pc, #340]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 809b 	beq.w	800366e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d05c      	beq.n	80035fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d141      	bne.n	80035d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x4ec>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fff3 	bl	800253c <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe ffef 	bl	800253c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e081      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356c:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	019b      	lsls	r3, r3, #6
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	4937      	ldr	r1, [pc, #220]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_RCC_OscConfig+0x4ec>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe ffc8 	bl	800253c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe ffc4 	bl	800253c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e056      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x41c>
 80035ce:	e04e      	b.n	800366e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_OscConfig+0x4ec>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe ffb1 	bl	800253c <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe ffad 	bl	800253c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e03f      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_OscConfig+0x44a>
 80035fc:	e037      	b.n	800366e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e032      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCC_OscConfig+0x4e8>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d028      	beq.n	800366a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d121      	bne.n	800366a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d11a      	bne.n	800366a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003640:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003642:	4293      	cmp	r3, r2
 8003644:	d111      	bne.n	800366a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d107      	bne.n	800366a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40007000 	.word	0x40007000
 800367c:	40023800 	.word	0x40023800
 8003680:	42470060 	.word	0x42470060

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fe fee2 	bl	800253c <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fede 	bl	800253c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fe42 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	080059f4 	.word	0x080059f4
 8003848:	20000010 	.word	0x20000010
 800384c:	20000014 	.word	0x20000014

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003856:	2100      	movs	r1, #0
 8003858:	6079      	str	r1, [r7, #4]
 800385a:	2100      	movs	r1, #0
 800385c:	60f9      	str	r1, [r7, #12]
 800385e:	2100      	movs	r1, #0
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003862:	2100      	movs	r1, #0
 8003864:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003868:	6889      	ldr	r1, [r1, #8]
 800386a:	f001 010c 	and.w	r1, r1, #12
 800386e:	2908      	cmp	r1, #8
 8003870:	d00d      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x3e>
 8003872:	2908      	cmp	r1, #8
 8003874:	f200 8094 	bhi.w	80039a0 <HAL_RCC_GetSysClockFreq+0x150>
 8003878:	2900      	cmp	r1, #0
 800387a:	d002      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x32>
 800387c:	2904      	cmp	r1, #4
 800387e:	d003      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x38>
 8003880:	e08e      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003882:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003884:	60bb      	str	r3, [r7, #8]
       break;
 8003886:	e08e      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800388a:	60bb      	str	r3, [r7, #8]
      break;
 800388c:	e08b      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388e:	4948      	ldr	r1, [pc, #288]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003890:	6849      	ldr	r1, [r1, #4]
 8003892:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003896:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003898:	4945      	ldr	r1, [pc, #276]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d024      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a4:	4942      	ldr	r1, [pc, #264]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038a6:	6849      	ldr	r1, [r1, #4]
 80038a8:	0989      	lsrs	r1, r1, #6
 80038aa:	4608      	mov	r0, r1
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80038b4:	f04f 0500 	mov.w	r5, #0
 80038b8:	ea00 0204 	and.w	r2, r0, r4
 80038bc:	ea01 0305 	and.w	r3, r1, r5
 80038c0:	493d      	ldr	r1, [pc, #244]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80038c2:	fb01 f003 	mul.w	r0, r1, r3
 80038c6:	2100      	movs	r1, #0
 80038c8:	fb01 f102 	mul.w	r1, r1, r2
 80038cc:	1844      	adds	r4, r0, r1
 80038ce:	493a      	ldr	r1, [pc, #232]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80038d0:	fba2 0101 	umull	r0, r1, r2, r1
 80038d4:	1863      	adds	r3, r4, r1
 80038d6:	4619      	mov	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	f7fd f890 	bl	8000a04 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e04a      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	461a      	mov	r2, r3
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	ea02 0400 	and.w	r4, r2, r0
 8003906:	ea03 0501 	and.w	r5, r3, r1
 800390a:	4620      	mov	r0, r4
 800390c:	4629      	mov	r1, r5
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	014b      	lsls	r3, r1, #5
 8003918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800391c:	0142      	lsls	r2, r0, #5
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	1b00      	subs	r0, r0, r4
 8003924:	eb61 0105 	sbc.w	r1, r1, r5
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	018b      	lsls	r3, r1, #6
 8003932:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003936:	0182      	lsls	r2, r0, #6
 8003938:	1a12      	subs	r2, r2, r0
 800393a:	eb63 0301 	sbc.w	r3, r3, r1
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	00d9      	lsls	r1, r3, #3
 8003948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800394c:	00d0      	lsls	r0, r2, #3
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	1912      	adds	r2, r2, r4
 8003954:	eb45 0303 	adc.w	r3, r5, r3
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	0299      	lsls	r1, r3, #10
 8003962:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003966:	0290      	lsls	r0, r2, #10
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	461a      	mov	r2, r3
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f7fd f844 	bl	8000a04 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4613      	mov	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	3301      	adds	r3, #1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	60bb      	str	r3, [r7, #8]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80039a2:	60bb      	str	r3, [r7, #8]
      break;
 80039a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a6:	68bb      	ldr	r3, [r7, #8]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bdb0      	pop	{r4, r5, r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	00f42400 	.word	0x00f42400
 80039b8:	017d7840 	.word	0x017d7840

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000010 	.word	0x20000010

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08005a04 	.word	0x08005a04

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a00:	f7ff ffdc 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08005a04 	.word	0x08005a04

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e041      	b.n	8003aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe f9dc 	bl	8001e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 fe94 	bl	8004790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e044      	b.n	8003b66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_TIM_Base_Start_IT+0xb0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x6c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d013      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x6c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a19      	ldr	r2, [pc, #100]	; (8003b7c <HAL_TIM_Base_Start_IT+0xb8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d111      	bne.n	8003b54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d010      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	e007      	b.n	8003b64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40014000 	.word	0x40014000

08003b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e041      	b.n	8003c1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fa20 	bl	8001ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 fde2 	bl	8004790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_TIM_PWM_Start+0x24>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e022      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d109      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x3e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e015      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start+0x58>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e008      	b.n	8003c92 <HAL_TIM_PWM_Start+0x6a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e068      	b.n	8003d6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_PWM_Start+0x82>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	e013      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start+0x92>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	e00b      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start+0xa2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_PWM_Start+0xaa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f91c 	bl	8004f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_TIM_PWM_Start+0x14c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_TIM_PWM_Start+0x14c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x10e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x10e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_TIM_PWM_Start+0x150>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x10e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_TIM_PWM_Start+0x154>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x10e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <HAL_TIM_PWM_Start+0x158>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIM_PWM_Start+0x10e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <HAL_TIM_PWM_Start+0x15c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d111      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d010      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	e007      	b.n	8003d6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e041      	b.n	8003e1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f839 	bl	8003e26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fce2 	bl	8004790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start_IT+0x1e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	e013      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0x46>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_IC_Start_IT+0x2e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	e00b      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0x46>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_IC_Start_IT+0x3e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	e003      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0x46>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <HAL_TIM_IC_Start_IT+0x58>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e013      	b.n	8003ebc <HAL_TIM_IC_Start_IT+0x80>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d104      	bne.n	8003ea4 <HAL_TIM_IC_Start_IT+0x68>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e00b      	b.n	8003ebc <HAL_TIM_IC_Start_IT+0x80>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d104      	bne.n	8003eb4 <HAL_TIM_IC_Start_IT+0x78>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e003      	b.n	8003ebc <HAL_TIM_IC_Start_IT+0x80>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ebe:	7bbb      	ldrb	r3, [r7, #14]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d102      	bne.n	8003eca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec4:	7b7b      	ldrb	r3, [r7, #13]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0c2      	b.n	8004054 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <HAL_TIM_IC_Start_IT+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	e013      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0xca>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_IC_Start_IT+0xb2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eec:	e00b      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0xca>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_IC_Start_IT+0xc2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003efc:	e003      	b.n	8003f06 <HAL_TIM_IC_Start_IT+0xca>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_IC_Start_IT+0xda>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f14:	e013      	b.n	8003f3e <HAL_TIM_IC_Start_IT+0x102>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_IC_Start_IT+0xea>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f24:	e00b      	b.n	8003f3e <HAL_TIM_IC_Start_IT+0x102>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_IC_Start_IT+0xfa>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	e003      	b.n	8003f3e <HAL_TIM_IC_Start_IT+0x102>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d841      	bhi.n	8003fc8 <HAL_TIM_IC_Start_IT+0x18c>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_TIM_IC_Start_IT+0x110>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003fc9 	.word	0x08003fc9
 8003f54:	08003fc9 	.word	0x08003fc9
 8003f58:	08003fc9 	.word	0x08003fc9
 8003f5c:	08003f93 	.word	0x08003f93
 8003f60:	08003fc9 	.word	0x08003fc9
 8003f64:	08003fc9 	.word	0x08003fc9
 8003f68:	08003fc9 	.word	0x08003fc9
 8003f6c:	08003fa5 	.word	0x08003fa5
 8003f70:	08003fc9 	.word	0x08003fc9
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003fb7 	.word	0x08003fb7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0202 	orr.w	r2, r2, #2
 8003f8e:	60da      	str	r2, [r3, #12]
      break;
 8003f90:	e01d      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0204 	orr.w	r2, r2, #4
 8003fa0:	60da      	str	r2, [r3, #12]
      break;
 8003fa2:	e014      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	60da      	str	r2, [r3, #12]
      break;
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0210 	orr.w	r2, r2, #16
 8003fc4:	60da      	str	r2, [r3, #12]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d13e      	bne.n	8004052 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	6839      	ldr	r1, [r7, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff9b 	bl	8004f18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_TIM_IC_Start_IT+0x220>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <HAL_TIM_IC_Start_IT+0x1e2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d013      	beq.n	800401e <HAL_TIM_IC_Start_IT+0x1e2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_IC_Start_IT+0x224>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <HAL_TIM_IC_Start_IT+0x1e2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <HAL_TIM_IC_Start_IT+0x228>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_TIM_IC_Start_IT+0x1e2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_TIM_IC_Start_IT+0x22c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <HAL_TIM_IC_Start_IT+0x1e2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_IC_Start_IT+0x230>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b06      	cmp	r3, #6
 800402e:	d010      	beq.n	8004052 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	e007      	b.n	8004052 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b02      	cmp	r3, #2
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b02      	cmp	r3, #2
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0202 	mvn.w	r2, #2
 800409c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fe22 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb4a 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fb51 	bl	8004768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0204 	mvn.w	r2, #4
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fdf8 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb20 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fb27 	bl	8004768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b08      	cmp	r3, #8
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0208 	mvn.w	r2, #8
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2204      	movs	r2, #4
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc fdce 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 faf6 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fafd 	bl	8004768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b10      	cmp	r3, #16
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b10      	cmp	r3, #16
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0210 	mvn.w	r2, #16
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2208      	movs	r2, #8
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fda4 	bl	8000cfc <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 facc 	bl	8004754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fad3 	bl	8004768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0201 	mvn.w	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd fd84 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b80      	cmp	r3, #128	; 0x80
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 ff1a 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d10e      	bne.n	800424c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d107      	bne.n	800424c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa98 	bl	800477c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b20      	cmp	r3, #32
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0220 	mvn.w	r2, #32
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fee4 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_TIM_IC_ConfigChannel+0x1e>
 800429a:	2302      	movs	r3, #2
 800429c:	e088      	b.n	80043b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f000 fc74 	bl	8004ba8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 020c 	bic.w	r2, r2, #12
 80042ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6999      	ldr	r1, [r3, #24]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	619a      	str	r2, [r3, #24]
 80042e2:	e060      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d11c      	bne.n	8004324 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f000 fcec 	bl	8004cd6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800430c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6999      	ldr	r1, [r3, #24]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	021a      	lsls	r2, r3, #8
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	619a      	str	r2, [r3, #24]
 8004322:	e040      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11b      	bne.n	8004362 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f000 fd39 	bl	8004db0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020c 	bic.w	r2, r2, #12
 800434c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69d9      	ldr	r1, [r3, #28]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
 8004360:	e021      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d11c      	bne.n	80043a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f000 fd56 	bl	8004e28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800438a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69d9      	ldr	r1, [r3, #28]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	021a      	lsls	r2, r3, #8
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	61da      	str	r2, [r3, #28]
 80043a0:	e001      	b.n	80043a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0ae      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f200 809f 	bhi.w	8004524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004525 	.word	0x08004525
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004461 	.word	0x08004461
 8004400:	08004525 	.word	0x08004525
 8004404:	08004525 	.word	0x08004525
 8004408:	08004525 	.word	0x08004525
 800440c:	080044a3 	.word	0x080044a3
 8004410:	08004525 	.word	0x08004525
 8004414:	08004525 	.word	0x08004525
 8004418:	08004525 	.word	0x08004525
 800441c:	080044e3 	.word	0x080044e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa32 	bl	8004890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e064      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa78 	bl	800495c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e043      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fac3 	bl	8004a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e023      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fb0d 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e002      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIM_ConfigClockSource+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e0b4      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x186>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0xd4>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x172>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xa6>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x11a>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0xfa>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x13a>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fc71 	bl	8004ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f000 fc5a 	bl	8004ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fb18 	bl	8004c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	; 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fc27 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fb74 	bl	8004d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fc17 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 faf8 	bl	8004c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc07 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fbfe 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d831      	bhi.n	8004744 <HAL_TIM_ReadCapturedValue+0x78>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004745 	.word	0x08004745
 80046f0:	08004745 	.word	0x08004745
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004727 	.word	0x08004727
 80046fc:	08004745 	.word	0x08004745
 8004700:	08004745 	.word	0x08004745
 8004704:	08004745 	.word	0x08004745
 8004708:	08004731 	.word	0x08004731
 800470c:	08004745 	.word	0x08004745
 8004710:	08004745 	.word	0x08004745
 8004714:	08004745 	.word	0x08004745
 8004718:	0800473b 	.word	0x0800473b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	60fb      	str	r3, [r7, #12]

      break;
 8004724:	e00f      	b.n	8004746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	60fb      	str	r3, [r7, #12]

      break;
 800472e:	e00a      	b.n	8004746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	60fb      	str	r3, [r7, #12]

      break;
 8004738:	e005      	b.n	8004746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	60fb      	str	r3, [r7, #12]

      break;
 8004742:	e000      	b.n	8004746 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004744:	bf00      	nop
  }

  return tmpreg;
 8004746:	68fb      	ldr	r3, [r7, #12]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a34      	ldr	r2, [pc, #208]	; (8004874 <TIM_Base_SetConfig+0xe4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00f      	beq.n	80047c8 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d00b      	beq.n	80047c8 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a31      	ldr	r2, [pc, #196]	; (8004878 <TIM_Base_SetConfig+0xe8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x38>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a30      	ldr	r2, [pc, #192]	; (800487c <TIM_Base_SetConfig+0xec>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x38>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2f      	ldr	r2, [pc, #188]	; (8004880 <TIM_Base_SetConfig+0xf0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <TIM_Base_SetConfig+0xe4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01b      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d017      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a22      	ldr	r2, [pc, #136]	; (8004878 <TIM_Base_SetConfig+0xe8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a21      	ldr	r2, [pc, #132]	; (800487c <TIM_Base_SetConfig+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00f      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a20      	ldr	r2, [pc, #128]	; (8004880 <TIM_Base_SetConfig+0xf0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <TIM_Base_SetConfig+0xf4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <TIM_Base_SetConfig+0xf8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <TIM_Base_SetConfig+0xfc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d108      	bne.n	800482c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <TIM_Base_SetConfig+0xe4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d103      	bne.n	8004860 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	615a      	str	r2, [r3, #20]
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10c      	bne.n	8004906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0308 	bic.w	r3, r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40010000 	.word	0x40010000

0800495c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0210 	bic.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0320 	bic.w	r3, r3, #32
 80049a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <TIM_OC2_SetConfig+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <TIM_OC2_SetConfig+0xd4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d113      	bne.n	8004a08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000

08004a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <TIM_OC3_SetConfig+0xd0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10d      	bne.n	8004aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <TIM_OC3_SetConfig+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40010000 	.word	0x40010000

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <TIM_OC4_SetConfig+0x9c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40010000 	.word	0x40010000

08004ba8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <TIM_TI1_SetConfig+0xbc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_TI1_SetConfig+0x56>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d00f      	beq.n	8004bfe <TIM_TI1_SetConfig+0x56>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <TIM_TI1_SetConfig+0xc0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_TI1_SetConfig+0x56>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <TIM_TI1_SetConfig+0xc4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_TI1_SetConfig+0x56>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <TIM_TI1_SetConfig+0xc8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_TI1_SetConfig+0x56>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <TIM_TI1_SetConfig+0xcc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <TIM_TI1_SetConfig+0x5a>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <TIM_TI1_SetConfig+0x5c>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0303 	bic.w	r3, r3, #3
 8004c0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e003      	b.n	8004c22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f023 030a 	bic.w	r3, r3, #10
 8004c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 030a 	and.w	r3, r3, #10
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40014000 	.word	0x40014000

08004c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0210 	bic.w	r2, r3, #16
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0210 	bic.w	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	031b      	lsls	r3, r3, #12
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0303 	bic.w	r3, r3, #3
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	031b      	lsls	r3, r3, #12
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	031b      	lsls	r3, r3, #12
 8004e80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e050      	b.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10c      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e03f      	b.n	80050fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f8be 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	; 0x24
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 faa1 	bl	80055f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	4613      	mov	r3, r2
 800510e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	d11d      	bne.n	8005158 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Receive_DMA+0x26>
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e016      	b.n	800515a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_UART_Receive_DMA+0x38>
 8005136:	2302      	movs	r3, #2
 8005138:	e00f      	b.n	800515a <HAL_UART_Receive_DMA+0x58>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	461a      	mov	r2, r3
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f92a 	bl	80053a8 <UART_Start_Receive_DMA>
 8005154:	4603      	mov	r3, r0
 8005156:	e000      	b.n	800515a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005158:	2302      	movs	r3, #2
  }
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b09c      	sub	sp, #112	; 0x70
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d172      	bne.n	80052b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	2200      	movs	r2, #0
 80051d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051fa:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3314      	adds	r3, #20
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800521c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	667b      	str	r3, [r7, #100]	; 0x64
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800522c:	647a      	str	r2, [r7, #68]	; 0x44
 800522e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e5      	bne.n	800520c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	623b      	str	r3, [r7, #32]
   return(result);
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	663b      	str	r3, [r7, #96]	; 0x60
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005260:	633a      	str	r2, [r7, #48]	; 0x30
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	2b01      	cmp	r3, #1
 8005282:	d119      	bne.n	80052b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60fb      	str	r3, [r7, #12]
   return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052c4:	4619      	mov	r1, r3
 80052c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052c8:	f7ff ff69 	bl	800519e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052cc:	e002      	b.n	80052d4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80052ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052d0:	f7ff ff47 	bl	8005162 <HAL_UART_RxCpltCallback>
}
 80052d4:	bf00      	nop
 80052d6:	3770      	adds	r7, #112	; 0x70
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d108      	bne.n	8005304 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff4e 	bl	800519e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005302:	e002      	b.n	800530a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff36 	bl	8005176 <HAL_UART_RxHalfCpltCallback>
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b21      	cmp	r3, #33	; 0x21
 8005344:	d108      	bne.n	8005358 <UART_DMAError+0x46>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005352:	68b8      	ldr	r0, [r7, #8]
 8005354:	f000 f8c2 	bl	80054dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b22      	cmp	r3, #34	; 0x22
 8005378:	d108      	bne.n	800538c <UART_DMAError+0x7a>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005386:	68b8      	ldr	r0, [r7, #8]
 8005388:	f000 f8d0 	bl	800552c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005398:	68b8      	ldr	r0, [r7, #8]
 800539a:	f7ff fef6 	bl	800518a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b098      	sub	sp, #96	; 0x60
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2222      	movs	r2, #34	; 0x22
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	4a3e      	ldr	r2, [pc, #248]	; (80054d0 <UART_Start_Receive_DMA+0x128>)
 80053d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <UART_Start_Receive_DMA+0x12c>)
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <UART_Start_Receive_DMA+0x130>)
 80053e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053f0:	f107 0308 	add.w	r3, r7, #8
 80053f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3304      	adds	r3, #4
 8005400:	4619      	mov	r1, r3
 8005402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f7fd fa64 	bl	80028d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800543a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005440:	65bb      	str	r3, [r7, #88]	; 0x58
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800544c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005450:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	657b      	str	r3, [r7, #84]	; 0x54
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800547e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	617b      	str	r3, [r7, #20]
   return(result);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3314      	adds	r3, #20
 80054b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054b2:	627a      	str	r2, [r7, #36]	; 0x24
 80054b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6a39      	ldr	r1, [r7, #32]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3760      	adds	r7, #96	; 0x60
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	080051b7 	.word	0x080051b7
 80054d4:	080052dd 	.word	0x080052dd
 80054d8:	08005313 	.word	0x08005313

080054dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	61ba      	str	r2, [r7, #24]
 8005506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	613b      	str	r3, [r7, #16]
   return(result);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005520:	bf00      	nop
 8005522:	3724      	adds	r7, #36	; 0x24
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b095      	sub	sp, #84	; 0x54
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005554:	643a      	str	r2, [r7, #64]	; 0x40
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800555a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	61fb      	str	r3, [r7, #28]
   return(result);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800558e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d119      	bne.n	80055d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	647b      	str	r3, [r7, #68]	; 0x44
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c4:	61ba      	str	r2, [r7, #24]
 80055c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	613b      	str	r3, [r7, #16]
   return(result);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055e6:	bf00      	nop
 80055e8:	3754      	adds	r7, #84	; 0x54
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	b09f      	sub	sp, #124	; 0x7c
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	68d9      	ldr	r1, [r3, #12]
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	ea40 0301 	orr.w	r3, r0, r1
 8005614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	431a      	orrs	r2, r3
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	431a      	orrs	r2, r3
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4313      	orrs	r3, r2
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005638:	f021 010c 	bic.w	r1, r1, #12
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	6999      	ldr	r1, [r3, #24]
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	ea40 0301 	orr.w	r3, r0, r1
 800565c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4bc5      	ldr	r3, [pc, #788]	; (8005978 <UART_SetConfig+0x384>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d004      	beq.n	8005672 <UART_SetConfig+0x7e>
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4bc3      	ldr	r3, [pc, #780]	; (800597c <UART_SetConfig+0x388>)
 800566e:	429a      	cmp	r2, r3
 8005670:	d103      	bne.n	800567a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005672:	f7fe f9c3 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8005676:	6778      	str	r0, [r7, #116]	; 0x74
 8005678:	e002      	b.n	8005680 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800567a:	f7fe f9ab 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 800567e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005688:	f040 80b6 	bne.w	80057f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800568c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568e:	461c      	mov	r4, r3
 8005690:	f04f 0500 	mov.w	r5, #0
 8005694:	4622      	mov	r2, r4
 8005696:	462b      	mov	r3, r5
 8005698:	1891      	adds	r1, r2, r2
 800569a:	6439      	str	r1, [r7, #64]	; 0x40
 800569c:	415b      	adcs	r3, r3
 800569e:	647b      	str	r3, [r7, #68]	; 0x44
 80056a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056a4:	1912      	adds	r2, r2, r4
 80056a6:	eb45 0303 	adc.w	r3, r5, r3
 80056aa:	f04f 0000 	mov.w	r0, #0
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	00d9      	lsls	r1, r3, #3
 80056b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b8:	00d0      	lsls	r0, r2, #3
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	1911      	adds	r1, r2, r4
 80056c0:	6639      	str	r1, [r7, #96]	; 0x60
 80056c2:	416b      	adcs	r3, r5
 80056c4:	667b      	str	r3, [r7, #100]	; 0x64
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056d4:	415b      	adcs	r3, r3
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056e0:	f7fb f990 	bl	8000a04 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4ba5      	ldr	r3, [pc, #660]	; (8005980 <UART_SetConfig+0x38c>)
 80056ea:	fba3 2302 	umull	r2, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	011e      	lsls	r6, r3, #4
 80056f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f4:	461c      	mov	r4, r3
 80056f6:	f04f 0500 	mov.w	r5, #0
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	6339      	str	r1, [r7, #48]	; 0x30
 8005702:	415b      	adcs	r3, r3
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
 8005706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800570a:	1912      	adds	r2, r2, r4
 800570c:	eb45 0303 	adc.w	r3, r5, r3
 8005710:	f04f 0000 	mov.w	r0, #0
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	00d9      	lsls	r1, r3, #3
 800571a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800571e:	00d0      	lsls	r0, r2, #3
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	1911      	adds	r1, r2, r4
 8005726:	65b9      	str	r1, [r7, #88]	; 0x58
 8005728:	416b      	adcs	r3, r5
 800572a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	461a      	mov	r2, r3
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	1891      	adds	r1, r2, r2
 8005738:	62b9      	str	r1, [r7, #40]	; 0x28
 800573a:	415b      	adcs	r3, r3
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005742:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005746:	f7fb f95d 	bl	8000a04 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b8c      	ldr	r3, [pc, #560]	; (8005980 <UART_SetConfig+0x38c>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	3332      	adds	r3, #50	; 0x32
 8005762:	4a87      	ldr	r2, [pc, #540]	; (8005980 <UART_SetConfig+0x38c>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005770:	441e      	add	r6, r3
 8005772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005774:	4618      	mov	r0, r3
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	1894      	adds	r4, r2, r2
 8005780:	623c      	str	r4, [r7, #32]
 8005782:	415b      	adcs	r3, r3
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800578a:	1812      	adds	r2, r2, r0
 800578c:	eb41 0303 	adc.w	r3, r1, r3
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	f04f 0500 	mov.w	r5, #0
 8005798:	00dd      	lsls	r5, r3, #3
 800579a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800579e:	00d4      	lsls	r4, r2, #3
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	1814      	adds	r4, r2, r0
 80057a6:	653c      	str	r4, [r7, #80]	; 0x50
 80057a8:	414b      	adcs	r3, r1
 80057aa:	657b      	str	r3, [r7, #84]	; 0x54
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	61b9      	str	r1, [r7, #24]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	61fb      	str	r3, [r7, #28]
 80057be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057c6:	f7fb f91d 	bl	8000a04 <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4b6c      	ldr	r3, [pc, #432]	; (8005980 <UART_SetConfig+0x38c>)
 80057d0:	fba3 1302 	umull	r1, r3, r3, r2
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	2164      	movs	r1, #100	; 0x64
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	3332      	adds	r3, #50	; 0x32
 80057e2:	4a67      	ldr	r2, [pc, #412]	; (8005980 <UART_SetConfig+0x38c>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	f003 0207 	and.w	r2, r3, #7
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4432      	add	r2, r6
 80057f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057f6:	e0b9      	b.n	800596c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fa:	461c      	mov	r4, r3
 80057fc:	f04f 0500 	mov.w	r5, #0
 8005800:	4622      	mov	r2, r4
 8005802:	462b      	mov	r3, r5
 8005804:	1891      	adds	r1, r2, r2
 8005806:	6139      	str	r1, [r7, #16]
 8005808:	415b      	adcs	r3, r3
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005810:	1912      	adds	r2, r2, r4
 8005812:	eb45 0303 	adc.w	r3, r5, r3
 8005816:	f04f 0000 	mov.w	r0, #0
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	00d9      	lsls	r1, r3, #3
 8005820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005824:	00d0      	lsls	r0, r2, #3
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	eb12 0804 	adds.w	r8, r2, r4
 800582e:	eb43 0905 	adc.w	r9, r3, r5
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4618      	mov	r0, r3
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	008b      	lsls	r3, r1, #2
 8005846:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800584a:	0082      	lsls	r2, r0, #2
 800584c:	4640      	mov	r0, r8
 800584e:	4649      	mov	r1, r9
 8005850:	f7fb f8d8 	bl	8000a04 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4b49      	ldr	r3, [pc, #292]	; (8005980 <UART_SetConfig+0x38c>)
 800585a:	fba3 2302 	umull	r2, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	011e      	lsls	r6, r3, #4
 8005862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005864:	4618      	mov	r0, r3
 8005866:	f04f 0100 	mov.w	r1, #0
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	1894      	adds	r4, r2, r2
 8005870:	60bc      	str	r4, [r7, #8]
 8005872:	415b      	adcs	r3, r3
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800587a:	1812      	adds	r2, r2, r0
 800587c:	eb41 0303 	adc.w	r3, r1, r3
 8005880:	f04f 0400 	mov.w	r4, #0
 8005884:	f04f 0500 	mov.w	r5, #0
 8005888:	00dd      	lsls	r5, r3, #3
 800588a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800588e:	00d4      	lsls	r4, r2, #3
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	1814      	adds	r4, r2, r0
 8005896:	64bc      	str	r4, [r7, #72]	; 0x48
 8005898:	414b      	adcs	r3, r1
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	008b      	lsls	r3, r1, #2
 80058b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058b4:	0082      	lsls	r2, r0, #2
 80058b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058ba:	f7fb f8a3 	bl	8000a04 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <UART_SetConfig+0x38c>)
 80058c4:	fba3 1302 	umull	r1, r3, r3, r2
 80058c8:	095b      	lsrs	r3, r3, #5
 80058ca:	2164      	movs	r1, #100	; 0x64
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	3332      	adds	r3, #50	; 0x32
 80058d6:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <UART_SetConfig+0x38c>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e2:	441e      	add	r6, r3
 80058e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e6:	4618      	mov	r0, r3
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	1894      	adds	r4, r2, r2
 80058f2:	603c      	str	r4, [r7, #0]
 80058f4:	415b      	adcs	r3, r3
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058fc:	1812      	adds	r2, r2, r0
 80058fe:	eb41 0303 	adc.w	r3, r1, r3
 8005902:	f04f 0400 	mov.w	r4, #0
 8005906:	f04f 0500 	mov.w	r5, #0
 800590a:	00dd      	lsls	r5, r3, #3
 800590c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005910:	00d4      	lsls	r4, r2, #3
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	eb12 0a00 	adds.w	sl, r2, r0
 800591a:	eb43 0b01 	adc.w	fp, r3, r1
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4618      	mov	r0, r3
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	008b      	lsls	r3, r1, #2
 8005932:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005936:	0082      	lsls	r2, r0, #2
 8005938:	4650      	mov	r0, sl
 800593a:	4659      	mov	r1, fp
 800593c:	f7fb f862 	bl	8000a04 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <UART_SetConfig+0x38c>)
 8005946:	fba3 1302 	umull	r1, r3, r3, r2
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	2164      	movs	r1, #100	; 0x64
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	3332      	adds	r3, #50	; 0x32
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <UART_SetConfig+0x38c>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4432      	add	r2, r6
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	377c      	adds	r7, #124	; 0x7c
 8005970:	46bd      	mov	sp, r7
 8005972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005976:	bf00      	nop
 8005978:	40011000 	.word	0x40011000
 800597c:	40011400 	.word	0x40011400
 8005980:	51eb851f 	.word	0x51eb851f

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	; (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	; (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f820 	bl	80059dc <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005a1c 	.word	0x08005a1c
 80059c0:	08005a1c 	.word	0x08005a1c
 80059c4:	08005a1c 	.word	0x08005a1c
 80059c8:	08005a20 	.word	0x08005a20

080059cc <memset>:
 80059cc:	4402      	add	r2, r0
 80059ce:	4603      	mov	r3, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d100      	bne.n	80059d6 <memset+0xa>
 80059d4:	4770      	bx	lr
 80059d6:	f803 1b01 	strb.w	r1, [r3], #1
 80059da:	e7f9      	b.n	80059d0 <memset+0x4>

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
