
R1_no_PID_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005734  08005734  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800573c  0800573c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000010  08005754  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005754  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e388  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca1  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00030d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175b4  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de99  00000000  00000000  00048f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b11c  00000000  00000000  00056dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1ef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  000e1f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080056fc 	.word	0x080056fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080056fc 	.word	0x080056fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_IC_CaptureCallback>:
int countLas = 0;
int LasDebounce = 0;

///////////////////////////////////////////////////////////////////////////////////////////
//encoder feedback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  //direction set

	if (htim == &htim1)  // if interrupt source is channel 1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a4e      	ldr	r2, [pc, #312]	; (8000614 <HAL_TIM_IC_CaptureCallback+0x144>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d148      	bne.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
			{
		if (Is_First_Captured == 0)  // is the first value captured ?
 80004e0:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10a      	bne.n	80004fe <HAL_TIM_IC_CaptureCallback+0x2e>
				{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture the first value
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f003 ff7e 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a4a      	ldr	r2, [pc, #296]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80004f4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first value captured as true
 80004f6:	4b48      	ldr	r3, [pc, #288]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	e039      	b.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else if (Is_First_Captured)  // if the first is captured
 80004fe:	4b46      	ldr	r3, [pc, #280]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d035      	beq.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
		{
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture second value
 8000506:	2100      	movs	r1, #0
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f003 ff6f 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 800050e:	4603      	mov	r3, r0
 8000510:	4a43      	ldr	r2, [pc, #268]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000512:	6013      	str	r3, [r2, #0]

			if (IC_Value2 > IC_Value1) {
 8000514:	4b42      	ldr	r3, [pc, #264]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b40      	ldr	r3, [pc, #256]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d907      	bls.n	8000530 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Value2 - IC_Value1;  // calculate the difference
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b3d      	ldr	r3, [pc, #244]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	4a3e      	ldr	r2, [pc, #248]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e011      	b.n	8000554 <HAL_TIM_IC_CaptureCallback+0x84>
			}

			else if (IC_Value2 < IC_Value1) {
 8000530:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b39      	ldr	r3, [pc, #228]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d209      	bcs.n	8000550 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = ((0xffff - IC_Value1) + IC_Value2) + 1;
 800053c:	4b38      	ldr	r3, [pc, #224]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b36      	ldr	r3, [pc, #216]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800054a:	4a36      	ldr	r2, [pc, #216]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e001      	b.n	8000554 <HAL_TIM_IC_CaptureCallback+0x84>
			}

			else {
				Error_Handler();
 8000550:	f001 fabc 	bl	8001acc <Error_Handler>
			}

			Frequency = HAL_RCC_GetPCLK2Freq() / (50 * Difference); // calculate frequency
 8000554:	f003 f8e2 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8000558:	4602      	mov	r2, r0
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2132      	movs	r1, #50	; 0x32
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x158>)
 800056a:	6013      	str	r3, [r2, #0]

			Is_First_Captured = 0;  // reset the first captured
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (htim == &htim2)  // if interrupt source is channel 1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d148      	bne.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
			{
		if (Is_First_Captured2 == 0)  // is the first value captured ?
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10a      	bne.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
				{
			IC_Value12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture the first value
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f003 ff31 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 800058a:	4603      	mov	r3, r0
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 800058e:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first value captured as true
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
			Frequency2 = HAL_RCC_GetPCLK2Freq() / (50 * Difference2); // calculate frequency

			Is_First_Captured2 = 0;  // reset the first captured
		}
	}
}
 8000596:	e039      	b.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
		else if (Is_First_Captured2)  // if the first is captured
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d035      	beq.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture second value
 80005a0:	2100      	movs	r1, #0
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f003 ff22 	bl	80043ec <HAL_TIM_ReadCapturedValue>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005ac:	6013      	str	r3, [r2, #0]
			if (IC_Value22 > IC_Value12) {
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d907      	bls.n	80005ca <HAL_TIM_IC_CaptureCallback+0xfa>
				Difference2 = IC_Value2 - IC_Value12; // calculate the difference
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e011      	b.n	80005ee <HAL_TIM_IC_CaptureCallback+0x11e>
			else if (IC_Value22 < IC_Value12) {
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d209      	bcs.n	80005ea <HAL_TIM_IC_CaptureCallback+0x11a>
				Difference2 = ((0xffff - IC_Value12) + IC_Value22) + 1;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e001      	b.n	80005ee <HAL_TIM_IC_CaptureCallback+0x11e>
				Error_Handler();
 80005ea:	f001 fa6f 	bl	8001acc <Error_Handler>
			Frequency2 = HAL_RCC_GetPCLK2Freq() / (50 * Difference2); // calculate frequency
 80005ee:	f003 f895 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2132      	movs	r1, #50	; 0x32
 80005fa:	fb01 f303 	mul.w	r3, r1, r3
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000604:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 0;  // reset the first captured
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000002c 	.word	0x2000002c
 8000618:	200002d8 	.word	0x200002d8
 800061c:	200002c8 	.word	0x200002c8
 8000620:	200002cc 	.word	0x200002cc
 8000624:	200002d0 	.word	0x200002d0
 8000628:	200002d4 	.word	0x200002d4
 800062c:	20000074 	.word	0x20000074
 8000630:	200002ec 	.word	0x200002ec
 8000634:	200002dc 	.word	0x200002dc
 8000638:	200002e0 	.word	0x200002e0
 800063c:	200002e4 	.word	0x200002e4
 8000640:	200002e8 	.word	0x200002e8

08000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>:
	uint32_t right_chnl;
	uint16_t left_dir;
	uint16_t right_dir;
	uint16_t pwm;

	Loco(TIM_HandleTypeDef *leftm_tim, uint32_t leftm_channel,
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
			GPIO_TypeDef *left_port, uint16_t leftm_direction_pin,
			TIM_HandleTypeDef *rightm_tim, uint32_t rightm_channel,
			uint16_t rightm_direction_pin, GPIO_TypeDef *right_port,
			uint16_t pwmVal) {
		left_tim = leftm_tim;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	601a      	str	r2, [r3, #0]
		right_tim = rightm_tim;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	605a      	str	r2, [r3, #4]
		left_chnl = leftm_channel;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	609a      	str	r2, [r3, #8]
		right_chnl = rightm_channel;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	6a3a      	ldr	r2, [r7, #32]
 8000668:	615a      	str	r2, [r3, #20]
		left_dir = leftm_direction_pin;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	8b3a      	ldrh	r2, [r7, #24]
 800066e:	831a      	strh	r2, [r3, #24]
		right_dir = rightm_direction_pin;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000674:	835a      	strh	r2, [r3, #26]
		left_p = left_port;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	60da      	str	r2, [r3, #12]
		right_p = right_port;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000680:	611a      	str	r2, [r3, #16]
		pwm = pwmVal;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000686:	839a      	strh	r2, [r3, #28]
	}
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <_ZN4Loco7forwardEv>:

	void forward() {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68d8      	ldr	r0, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8b1b      	ldrh	r3, [r3, #24]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f002 fbe9 	bl	8002e80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_SET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6918      	ldr	r0, [r3, #16]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8b5b      	ldrh	r3, [r3, #26]
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f002 fbe1 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, pwm);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d106      	bne.n	80006d4 <_ZN4Loco7forwardEv+0x3e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9a      	ldrh	r2, [r3, #28]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e01b      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d106      	bne.n	80006ea <_ZN4Loco7forwardEv+0x54>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	8b9a      	ldrh	r2, [r3, #28]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
 80006e8:	e010      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d106      	bne.n	8000700 <_ZN4Loco7forwardEv+0x6a>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8b9a      	ldrh	r2, [r3, #28]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80006fe:	e005      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	8b9a      	ldrh	r2, [r3, #28]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d106      	bne.n	8000722 <_ZN4Loco7forwardEv+0x8c>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8b9a      	ldrh	r2, [r3, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000720:	e01b      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d106      	bne.n	8000738 <_ZN4Loco7forwardEv+0xa2>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8b9a      	ldrh	r2, [r3, #28]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000736:	e010      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d106      	bne.n	800074e <_ZN4Loco7forwardEv+0xb8>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	8b9a      	ldrh	r2, [r3, #28]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800074c:	e005      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8b9a      	ldrh	r2, [r3, #28]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN4Loco8backwardEv>:

	void backward() {
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_SET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8b1b      	ldrh	r3, [r3, #24]
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	f002 fb83 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6918      	ldr	r0, [r3, #16]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	8b5b      	ldrh	r3, [r3, #26]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	f002 fb7b 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, pwm);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d106      	bne.n	80007a0 <_ZN4Loco8backwardEv+0x3e>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8b9a      	ldrh	r2, [r3, #28]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	e01b      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d106      	bne.n	80007b6 <_ZN4Loco8backwardEv+0x54>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8b9a      	ldrh	r2, [r3, #28]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	639a      	str	r2, [r3, #56]	; 0x38
 80007b4:	e010      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d106      	bne.n	80007cc <_ZN4Loco8backwardEv+0x6a>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8b9a      	ldrh	r2, [r3, #28]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ca:	e005      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	8b9a      	ldrh	r2, [r3, #28]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <_ZN4Loco8backwardEv+0x8c>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8b9a      	ldrh	r2, [r3, #28]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80007ec:	e01b      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d106      	bne.n	8000804 <_ZN4Loco8backwardEv+0xa2>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	8b9a      	ldrh	r2, [r3, #28]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000802:	e010      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d106      	bne.n	800081a <_ZN4Loco8backwardEv+0xb8>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	8b9a      	ldrh	r2, [r3, #28]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000818:	e005      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8b9a      	ldrh	r2, [r3, #28]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN4Loco4leftEv>:

	void left() {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_SET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8b1b      	ldrh	r3, [r3, #24]
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	f002 fb1d 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_SET);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6918      	ldr	r0, [r3, #16]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8b5b      	ldrh	r3, [r3, #26]
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f002 fb15 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 50);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <_ZN4Loco4leftEv+0x3c>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2232      	movs	r2, #50	; 0x32
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
 8000868:	e018      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d105      	bne.n	800087e <_ZN4Loco4leftEv+0x50>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2232      	movs	r2, #50	; 0x32
 800087a:	639a      	str	r2, [r3, #56]	; 0x38
 800087c:	e00e      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2b08      	cmp	r3, #8
 8000884:	d105      	bne.n	8000892 <_ZN4Loco4leftEv+0x64>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2232      	movs	r2, #50	; 0x32
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000890:	e004      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2232      	movs	r2, #50	; 0x32
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <_ZN4Loco4leftEv+0x82>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80008ae:	e018      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d105      	bne.n	80008c4 <_ZN4Loco4leftEv+0x96>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2264      	movs	r2, #100	; 0x64
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80008c2:	e00e      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d105      	bne.n	80008d8 <_ZN4Loco4leftEv+0xaa>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80008d6:	e004      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2264      	movs	r2, #100	; 0x64
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
	}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_ZN4Loco5rightEv>:

	void right() {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68d8      	ldr	r0, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	8b1b      	ldrh	r3, [r3, #24]
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	f002 fabf 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6918      	ldr	r0, [r3, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	8b5b      	ldrh	r3, [r3, #26]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f002 fab7 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 200);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <_ZN4Loco5rightEv+0x3c>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	22c8      	movs	r2, #200	; 0xc8
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
 8000924:	e018      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d105      	bne.n	800093a <_ZN4Loco5rightEv+0x50>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	22c8      	movs	r2, #200	; 0xc8
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
 8000938:	e00e      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b08      	cmp	r3, #8
 8000940:	d105      	bne.n	800094e <_ZN4Loco5rightEv+0x64>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	22c8      	movs	r2, #200	; 0xc8
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	e004      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	22c8      	movs	r2, #200	; 0xc8
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl,100);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <_ZN4Loco5rightEv+0x82>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800096a:	e018      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl,100);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d105      	bne.n	8000980 <_ZN4Loco5rightEv+0x96>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2264      	movs	r2, #100	; 0x64
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
	}
 800097e:	e00e      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl,100);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	2b08      	cmp	r3, #8
 8000986:	d105      	bne.n	8000994 <_ZN4Loco5rightEv+0xaa>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2264      	movs	r2, #100	; 0x64
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000992:	e004      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl,100);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2264      	movs	r2, #100	; 0x64
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN4Loco4stopEv>:

	void stop() {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68d8      	ldr	r0, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8b1b      	ldrh	r3, [r3, #24]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f002 fa61 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6918      	ldr	r0, [r3, #16]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8b5b      	ldrh	r3, [r3, #26]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f002 fa59 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 0);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <_ZN4Loco4stopEv+0x3c>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	e018      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d105      	bne.n	80009f6 <_ZN4Loco4stopEv+0x50>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	639a      	str	r2, [r3, #56]	; 0x38
 80009f4:	e00e      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d105      	bne.n	8000a0a <_ZN4Loco4stopEv+0x64>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a08:	e004      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <_ZN4Loco4stopEv+0x82>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000a26:	e018      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d105      	bne.n	8000a3c <_ZN4Loco4stopEv+0x96>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000a3a:	e00e      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d105      	bne.n	8000a50 <_ZN4Loco4stopEv+0xaa>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000a4e:	e004      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <_Z7stepperv>:
};

///////////////////////////////////////////////////////////////////////////////////////////////////
//utilities
void stepper() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <_Z7stepperv+0x3c>)
 8000a70:	f002 fa06 	bl	8002e80 <HAL_GPIO_WritePin>
	while (stepperCount < 10) {
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <_Z7stepperv+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	dc04      	bgt.n	8000a86 <_Z7stepperv+0x22>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 50);
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <_Z7stepperv+0x44>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2232      	movs	r2, #50	; 0x32
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
	while (stepperCount < 10) {
 8000a84:	e7f6      	b.n	8000a74 <_Z7stepperv+0x10>
	}
	start_stepper = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <_Z7stepperv+0x48>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	stepperCount = 0;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <_Z7stepperv+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <_Z7stepperv+0x44>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	20000300 	.word	0x20000300
 8000aa8:	200001dc 	.word	0x200001dc
 8000aac:	200002f4 	.word	0x200002f4

08000ab0 <_Z5servov>:

void servo() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	//90 degree rotation
	if (countServo == 0 && debounce == 0) {
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <_Z5servov+0x58>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10e      	bne.n	8000ada <_Z5servov+0x2a>
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_Z5servov+0x5c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <_Z5servov+0x2a>
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 125); // duty cycle is 2.5 ms
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <_Z5servov+0x60>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	227d      	movs	r2, #125	; 0x7d
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
		countServo = 1;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <_Z5servov+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
		debounce = 5;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <_Z5servov+0x5c>)
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	601a      	str	r2, [r3, #0]
	} else if (countServo == 1 && debounce == 0) {
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 50);
		countServo = 0;
		debounce = 5;
	}
}
 8000ad8:	e011      	b.n	8000afe <_Z5servov+0x4e>
	} else if (countServo == 1 && debounce == 0) {
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <_Z5servov+0x58>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10d      	bne.n	8000afe <_Z5servov+0x4e>
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <_Z5servov+0x5c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d109      	bne.n	8000afe <_Z5servov+0x4e>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 50);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <_Z5servov+0x60>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2232      	movs	r2, #50	; 0x32
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
		countServo = 0;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_Z5servov+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		debounce = 5;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <_Z5servov+0x5c>)
 8000afa:	2205      	movs	r2, #5
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	200002f8 	.word	0x200002f8
 8000b0c:	200002fc 	.word	0x200002fc
 8000b10:	2000014c 	.word	0x2000014c

08000b14 <_Z12passingMotorv>:

void passingMotor() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if (passMotor == 0 && passDebounce == 0) {
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d114      	bne.n	8000b4a <_Z12passingMotorv+0x36>
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d110      	bne.n	8000b4a <_Z12passingMotorv+0x36>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <_Z12passingMotorv+0x74>)
 8000b30:	f002 f9a6 	bl	8002e80 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 50);
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_Z12passingMotorv+0x78>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2232      	movs	r2, #50	; 0x32
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
		passMotor = 1;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
		passDebounce = 5;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b44:	2205      	movs	r2, #5
 8000b46:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
		passMotor = 0;
		passDebounce = 5;
	}
}
 8000b48:	e017      	b.n	8000b7a <_Z12passingMotorv+0x66>
	} else if (passMotor == 1 && passDebounce == 0) {
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d113      	bne.n	8000b7a <_Z12passingMotorv+0x66>
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10f      	bne.n	8000b7a <_Z12passingMotorv+0x66>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <_Z12passingMotorv+0x74>)
 8000b62:	f002 f98d 	bl	8002e80 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <_Z12passingMotorv+0x78>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	63da      	str	r2, [r3, #60]	; 0x3c
		passMotor = 0;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
		passDebounce = 5;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b76:	2205      	movs	r2, #5
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000031c 	.word	0x2000031c
 8000b84:	20000320 	.word	0x20000320
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	20000104 	.word	0x20000104

08000b90 <_Z5laserv>:

void laser() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if (laserr == 0 && laserDebounce == 0) {
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_Z5laserv+0x5c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d110      	bne.n	8000bbe <_Z5laserv+0x2e>
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <_Z5laserv+0x60>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <_Z5laserv+0x2e>
		HAL_GPIO_WritePin(GPIOB, laser1_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <_Z5laserv+0x64>)
 8000bac:	f002 f968 	bl	8002e80 <HAL_GPIO_WritePin>

		laserr = 1;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_Z5laserv+0x5c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
		laserDebounce = 5;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_Z5laserv+0x60>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	601a      	str	r2, [r3, #0]

		laserr = 0;
		laserDebounce = 5;
	}

}
 8000bbc:	e013      	b.n	8000be6 <_Z5laserv+0x56>
	} else if (laserr == 1 && laserDebounce == 0) {
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <_Z5laserv+0x5c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d10f      	bne.n	8000be6 <_Z5laserv+0x56>
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <_Z5laserv+0x60>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10b      	bne.n	8000be6 <_Z5laserv+0x56>
		HAL_GPIO_WritePin(GPIOB, laser1_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <_Z5laserv+0x64>)
 8000bd6:	f002 f953 	bl	8002e80 <HAL_GPIO_WritePin>
		laserr = 0;
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <_Z5laserv+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		laserDebounce = 5;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <_Z5laserv+0x60>)
 8000be2:	2205      	movs	r2, #5
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000314 	.word	0x20000314
 8000bf0:	20000318 	.word	0x20000318
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <_Z13VerticalMotori>:

void VerticalMotor(int dir) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if (dir == 0 && dir1 == 0 && linearDebounce == 0) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d118      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d114      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d110      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c1c:	f002 f930 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	482d      	ldr	r0, [pc, #180]	; (8000cdc <_Z13VerticalMotori+0xe4>)
 8000c26:	f002 f92b 	bl	8002e80 <HAL_GPIO_WritePin>
		dir1 = 1;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c32:	2205      	movs	r2, #5
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e015      	b.n	8000c64 <_Z13VerticalMotori+0x6c>
	} else if (dir == 0 && dir1 == 1 && linearDebounce == 0) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d112      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d10e      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c54:	f002 f914 	bl	8002e80 <HAL_GPIO_WritePin>
		dir1 = 0;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	601a      	str	r2, [r3, #0]
	}
	if (dir == 1 && dir2 == 0 && linearDebounce == 0) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d118      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d114      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d110      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c80:	f002 f8fe 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2120      	movs	r1, #32
 8000c88:	4814      	ldr	r0, [pc, #80]	; (8000cdc <_Z13VerticalMotori+0xe4>)
 8000c8a:	f002 f8f9 	bl	8002e80 <HAL_GPIO_WritePin>
		dir2 = 1;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c96:	2205      	movs	r2, #5
 8000c98:	601a      	str	r2, [r3, #0]

		dir2 = 0;
		linearDebounce = 5;
	}

}
 8000c9a:	e015      	b.n	8000cc8 <_Z13VerticalMotori+0xd0>
	} else if (dir == 1 && dir2 == 1 && linearDebounce == 0) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d112      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d10e      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10a      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000cb8:	f002 f8e2 	bl	8002e80 <HAL_GPIO_WritePin>
		dir2 = 0;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000030c 	.word	0x2000030c
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	20000310 	.word	0x20000310

08000ce4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	; 0x58
 8000ce8:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cea:	f001 fa51 	bl	8002190 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cee:	f000 f9c5 	bl	800107c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cf2:	f000 fdc9 	bl	8001888 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000cf6:	f000 fda7 	bl	8001848 <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 8000cfa:	f000 fd77 	bl	80017ec <_ZL19MX_USART1_UART_Initv>
	MX_TIM2_Init();
 8000cfe:	f000 fabb 	bl	8001278 <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 8000d02:	f000 fba9 	bl	8001458 <_ZL12MX_TIM4_Initv>
	MX_TIM1_Init();
 8000d06:	f000 fa2b 	bl	8001160 <_ZL12MX_TIM1_Initv>
	MX_TIM9_Init();
 8000d0a:	f000 fccd 	bl	80016a8 <_ZL12MX_TIM9_Initv>
	MX_TIM5_Init();
 8000d0e:	f000 fc3b 	bl	8001588 <_ZL12MX_TIM5_Initv>
	MX_TIM10_Init();
 8000d12:	f000 fd0d 	bl	8001730 <_ZL13MX_TIM10_Initv>
	MX_TIM3_Init();
 8000d16:	f000 fb37 	bl	8001388 <_ZL12MX_TIM3_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  //Locomotion
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	48a9      	ldr	r0, [pc, #676]	; (8000fc4 <main+0x2e0>)
 8000d1e:	f002 fe13 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);  //Locomotion
 8000d22:	2104      	movs	r1, #4
 8000d24:	48a7      	ldr	r0, [pc, #668]	; (8000fc4 <main+0x2e0>)
 8000d26:	f002 fe0f 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  //Passing
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	48a5      	ldr	r0, [pc, #660]	; (8000fc4 <main+0x2e0>)
 8000d2e:	f002 fe0b 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  //Lifting
 8000d32:	210c      	movs	r1, #12
 8000d34:	48a3      	ldr	r0, [pc, #652]	; (8000fc4 <main+0x2e0>)
 8000d36:	f002 fe07 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);  //BLDC1
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	48a2      	ldr	r0, [pc, #648]	; (8000fc8 <main+0x2e4>)
 8000d3e:	f002 fe03 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  //BLDC2
 8000d42:	2104      	movs	r1, #4
 8000d44:	48a0      	ldr	r0, [pc, #640]	; (8000fc8 <main+0x2e4>)
 8000d46:	f002 fdff 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);  //Servo
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	489e      	ldr	r0, [pc, #632]	; (8000fc8 <main+0x2e4>)
 8000d4e:	f002 fdfb 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  //Stepper
 8000d52:	2100      	movs	r1, #0
 8000d54:	489d      	ldr	r0, [pc, #628]	; (8000fcc <main+0x2e8>)
 8000d56:	f002 fdf7 	bl	8003948 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  //Encoder
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	489c      	ldr	r0, [pc, #624]	; (8000fd0 <main+0x2ec>)
 8000d5e:	f002 fefd 	bl	8003b5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	489b      	ldr	r0, [pc, #620]	; (8000fd4 <main+0x2f0>)
 8000d66:	f002 fef9 	bl	8003b5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 8000d6a:	489b      	ldr	r0, [pc, #620]	; (8000fd8 <main+0x2f4>)
 8000d6c:	f002 fd3a 	bl	80037e4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) rxData, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	499a      	ldr	r1, [pc, #616]	; (8000fdc <main+0x2f8>)
 8000d74:	489a      	ldr	r0, [pc, #616]	; (8000fe0 <main+0x2fc>)
 8000d76:	f004 f854 	bl	8004e22 <HAL_UART_Receive_DMA>

	Loco low = Loco(&htim4, TIM_CHANNEL_1, GPIOD, LOCO_DIR1_Pin, &htim4,
	TIM_CHANNEL_2, LOCO_DIR2_Pin, GPIOD, 60);
 8000d7a:	f107 0020 	add.w	r0, r7, #32
 8000d7e:	233c      	movs	r3, #60	; 0x3c
 8000d80:	9305      	str	r3, [sp, #20]
 8000d82:	4b98      	ldr	r3, [pc, #608]	; (8000fe4 <main+0x300>)
 8000d84:	9304      	str	r3, [sp, #16]
 8000d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8a:	9303      	str	r3, [sp, #12]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <main+0x2e0>)
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4b92      	ldr	r3, [pc, #584]	; (8000fe4 <main+0x300>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4989      	ldr	r1, [pc, #548]	; (8000fc4 <main+0x2e0>)
 8000da0:	f7ff fc50 	bl	8000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>
	Loco high = Loco(&htim4, TIM_CHANNEL_1, GPIOD, LOCO_DIR1_Pin, &htim4,
	TIM_CHANNEL_2, LOCO_DIR2_Pin, GPIOD, 80);
 8000da4:	4638      	mov	r0, r7
 8000da6:	2350      	movs	r3, #80	; 0x50
 8000da8:	9305      	str	r3, [sp, #20]
 8000daa:	4b8e      	ldr	r3, [pc, #568]	; (8000fe4 <main+0x300>)
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	2304      	movs	r3, #4
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	4b82      	ldr	r3, [pc, #520]	; (8000fc4 <main+0x2e0>)
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4b88      	ldr	r3, [pc, #544]	; (8000fe4 <main+0x300>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	497f      	ldr	r1, [pc, #508]	; (8000fc4 <main+0x2e0>)
 8000dc8:	f7ff fc3c 	bl	8000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 50);
 8000dcc:	4b7d      	ldr	r3, [pc, #500]	; (8000fc4 <main+0x2e0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2232      	movs	r2, #50	; 0x32
 8000dd2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0); //bldc default 030:94:35:32:df:3e
 8000dd4:	4b7c      	ldr	r3, [pc, #496]	; (8000fc8 <main+0x2e4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000ddc:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <main+0x2e4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 50);
 8000de4:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <main+0x2e4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2232      	movs	r2, #50	; 0x32
 8000dea:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(GPIOE, Laser_pointer_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df2:	487d      	ldr	r0, [pc, #500]	; (8000fe8 <main+0x304>)
 8000df4:	f002 f844 	bl	8002e80 <HAL_GPIO_WritePin>
	////////////////////////////

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 100);
 8000df8:	4b73      	ldr	r3, [pc, #460]	; (8000fc8 <main+0x2e4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2264      	movs	r2, #100	; 0x64
 8000dfe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8000e00:	4b72      	ldr	r3, [pc, #456]	; (8000fcc <main+0x2e8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (rxData[0] == 13 && laserDebounce == 0) {
 8000e08:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <main+0x2f8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b0d      	cmp	r3, #13
 8000e0e:	d105      	bne.n	8000e1c <main+0x138>
 8000e10:	4b76      	ldr	r3, [pc, #472]	; (8000fec <main+0x308>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <main+0x138>
			laser();
 8000e18:	f7ff feba 	bl	8000b90 <_Z5laserv>

		}
		if (rxData[0] == 1) //up//Button Up
 8000e1c:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <main+0x2f8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <main+0x14c>
				{
			low.forward();
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc34 	bl	8000696 <_ZN4Loco7forwardEv>
 8000e2e:	e7eb      	b.n	8000e08 <main+0x124>
		}

		//Down // Button Down
		else if (rxData[0] == 2) {
 8000e30:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <main+0x2f8>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d105      	bne.n	8000e44 <main+0x160>
			low.backward();
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc90 	bl	8000762 <_ZN4Loco8backwardEv>
 8000e42:	e7e1      	b.n	8000e08 <main+0x124>
		}

		//left // Button Left
		else if (rxData[0] == 3) {
 8000e44:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <main+0x2f8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d105      	bne.n	8000e58 <main+0x174>
			low.left();
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fcec 	bl	800082e <_ZN4Loco4leftEv>
 8000e56:	e7d7      	b.n	8000e08 <main+0x124>
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 50);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 30);
		}

		//right // Button Rights
		else if (rxData[0] == 4) {
 8000e58:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <main+0x2f8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d105      	bne.n	8000e6c <main+0x188>
			low.right();
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd40 	bl	80008ea <_ZN4Loco5rightEv>
 8000e6a:	e7cd      	b.n	8000e08 <main+0x124>
//			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
//					HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 30);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 50);
		} else if (rxData[0] == 14) //up//Button Up
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <main+0x2f8>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b0e      	cmp	r3, #14
 8000e72:	d104      	bne.n	8000e7e <main+0x19a>
				{
			high.forward();
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc0d 	bl	8000696 <_ZN4Loco7forwardEv>
 8000e7c:	e7c4      	b.n	8000e08 <main+0x124>
		}

		//Down // Button Down
		else if (rxData[0] == 16) {
 8000e7e:	4b57      	ldr	r3, [pc, #348]	; (8000fdc <main+0x2f8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b10      	cmp	r3, #16
 8000e84:	d104      	bne.n	8000e90 <main+0x1ac>
			high.backward();
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fc6a 	bl	8000762 <_ZN4Loco8backwardEv>
 8000e8e:	e7bb      	b.n	8000e08 <main+0x124>
		}

		//left // Button Left
		else if (rxData[0] == 20) {
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <main+0x2f8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b14      	cmp	r3, #20
 8000e96:	d104      	bne.n	8000ea2 <main+0x1be>
			high.left();
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fcc7 	bl	800082e <_ZN4Loco4leftEv>
 8000ea0:	e7b2      	b.n	8000e08 <main+0x124>
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 80);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 50);
		}

		//right // Button Rights
		else if (rxData[0] == 18) {
 8000ea2:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <main+0x2f8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d104      	bne.n	8000eb4 <main+0x1d0>
			high.right();
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd1c 	bl	80008ea <_ZN4Loco5rightEv>
 8000eb2:	e7a9      	b.n	8000e08 <main+0x124>
//			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
//					HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 50);
//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 80);
		} else if (rxData[0] == 15) //up//Button Up
 8000eb4:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <main+0x2f8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d105      	bne.n	8000ec8 <main+0x1e4>
				{
			low.forward();
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fbe8 	bl	8000696 <_ZN4Loco7forwardEv>
 8000ec6:	e79f      	b.n	8000e08 <main+0x124>
		}

		//Down // Button Down
		else if (rxData[0] == 17) {
 8000ec8:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <main+0x2f8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b11      	cmp	r3, #17
 8000ece:	d105      	bne.n	8000edc <main+0x1f8>
			low.backward();
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc44 	bl	8000762 <_ZN4Loco8backwardEv>
 8000eda:	e795      	b.n	8000e08 <main+0x124>
		}

		//left // Button Left
		else if (rxData[0] == 21) {
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <main+0x2f8>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b15      	cmp	r3, #21
 8000ee2:	d105      	bne.n	8000ef0 <main+0x20c>
			low.left();
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fca0 	bl	800082e <_ZN4Loco4leftEv>
 8000eee:	e78b      	b.n	8000e08 <main+0x124>
		}

		//right // Button Rights
		else if (rxData[0] == 19) {
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <main+0x2f8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b13      	cmp	r3, #19
 8000ef6:	d105      	bne.n	8000f04 <main+0x220>
			low.right();
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fcf4 	bl	80008ea <_ZN4Loco5rightEv>
 8000f02:	e781      	b.n	8000e08 <main+0x124>
		}
		//PASSING //Button Square
		else if (rxData[0] == 5) {
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <main+0x2f8>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d102      	bne.n	8000f12 <main+0x22e>
			//Passing on
			passingMotor();
 8000f0c:	f7ff fe02 	bl	8000b14 <_Z12passingMotorv>
 8000f10:	e77a      	b.n	8000e08 <main+0x124>

		}

		//toggle servo//Button Circle
		else if (rxData[0] == 6) {
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <main+0x2f8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d102      	bne.n	8000f20 <main+0x23c>
			servo();
 8000f1a:	f7ff fdc9 	bl	8000ab0 <_Z5servov>
 8000f1e:	e773      	b.n	8000e08 <main+0x124>

		}

		//toggle linear actuator down  //Button L1
		else if (rxData[0] == 7) {
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <main+0x2f8>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d103      	bne.n	8000f30 <main+0x24c>
			VerticalMotor(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff fe65 	bl	8000bf8 <_Z13VerticalMotori>
 8000f2e:	e76b      	b.n	8000e08 <main+0x124>

		}

		//toggle linear actuator up	  //Button R1
		else if (rxData[0] == 9) { //&& !HAL_GPIO_ReadPin(GPIOE, Limit_switch_input_Pin) {
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <main+0x2f8>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d103      	bne.n	8000f40 <main+0x25c>
			VerticalMotor(0);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fe5d 	bl	8000bf8 <_Z13VerticalMotori>
 8000f3e:	e763      	b.n	8000e08 <main+0x124>
		}

		//BLDC ON //Button L2
		else if (rxData[0] == 8) {
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <main+0x2f8>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d133      	bne.n	8000fb0 <main+0x2cc>

			if (countBldc == 0 && bldcDebounce == 0) {
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <main+0x30c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d114      	bne.n	8000f7a <main+0x296>
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <main+0x310>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d110      	bne.n	8000f7a <main+0x296>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <main+0x314>)
 8000f5e:	f001 ff8f 	bl	8002e80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2102      	movs	r1, #2
 8000f66:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <main+0x314>)
 8000f68:	f001 ff8a 	bl	8002e80 <HAL_GPIO_WritePin>
				countBldc = 1;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <main+0x30c>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <main+0x310>)
 8000f74:	2205      	movs	r2, #5
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e075      	b.n	8001066 <main+0x382>
			} else if (countBldc == 1 && bldcDebounce == 0) {
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <main+0x30c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f47f af42 	bne.w	8000e08 <main+0x124>
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <main+0x310>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f af3d 	bne.w	8000e08 <main+0x124>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2101      	movs	r1, #1
 8000f92:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <main+0x314>)
 8000f94:	f001 ff74 	bl	8002e80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <main+0x314>)
 8000f9e:	f001 ff6f 	bl	8002e80 <HAL_GPIO_WritePin>
				countBldc = 0;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <main+0x30c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <main+0x310>)
 8000faa:	2205      	movs	r2, #5
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e72b      	b.n	8000e08 <main+0x124>
			}

		}

		// Stepper 90 deg//Button R2
		else if (rxData[0] == 10) {
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <main+0x2f8>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d123      	bne.n	8001000 <main+0x31c>
			start_stepper = 1;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <main+0x318>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
			stepper();
 8000fbe:	f7ff fd51 	bl	8000a64 <_Z7stepperv>
 8000fc2:	e721      	b.n	8000e08 <main+0x124>
 8000fc4:	20000104 	.word	0x20000104
 8000fc8:	2000014c 	.word	0x2000014c
 8000fcc:	200001dc 	.word	0x200001dc
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	20000074 	.word	0x20000074
 8000fd8:	20000194 	.word	0x20000194
 8000fdc:	200002f0 	.word	0x200002f0
 8000fe0:	20000224 	.word	0x20000224
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	20000318 	.word	0x20000318
 8000ff0:	20000304 	.word	0x20000304
 8000ff4:	20000308 	.word	0x20000308
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	200002f4 	.word	0x200002f4
		}
		//Lifting Up //Button Triangle
		else if (rxData[0] == 11){// && !HAL_GPIO_ReadPin(GPIOE, Limit_switch_input1_Pin)) {
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <main+0x384>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b0b      	cmp	r3, #11
 8001006:	d10a      	bne.n	800101e <main+0x33a>
			HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <main+0x388>)
 8001010:	f001 ff36 	bl	8002e80 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 70);
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <main+0x38c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2246      	movs	r2, #70	; 0x46
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
 800101c:	e6f4      	b.n	8000e08 <main+0x124>
		}
		//Lifting Down// Button Cross
		else if (rxData[0] == 12){// && !HAL_GPIO_ReadPin(GPIOE, Liimit_switch_input2_Pin)) {
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <main+0x384>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b0c      	cmp	r3, #12
 8001024:	d10a      	bne.n	800103c <main+0x358>
			HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <main+0x388>)
 800102e:	f001 ff27 	bl	8002e80 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 70);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <main+0x38c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2246      	movs	r2, #70	; 0x46
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
 800103a:	e6e5      	b.n	8000e08 <main+0x124>

		} else {
			low.stop();
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fcb0 	bl	80009a6 <_ZN4Loco4stopEv>
			//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
			//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); //lifting 0
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <main+0x38c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0); //BLDC 0
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <main+0x390>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); //BLDC 0
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <main+0x390>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0); //stepper to zero
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <main+0x394>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
		if (rxData[0] == 13 && laserDebounce == 0) {
 8001066:	e6cf      	b.n	8000e08 <main+0x124>
 8001068:	200002f0 	.word	0x200002f0
 800106c:	40020c00 	.word	0x40020c00
 8001070:	20000104 	.word	0x20000104
 8001074:	2000014c 	.word	0x2000014c
 8001078:	200001dc 	.word	0x200001dc

0800107c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fb2e 	bl	80056ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <_Z18SystemClock_Configv+0xdc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <_Z18SystemClock_Configv+0xdc>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <_Z18SystemClock_Configv+0xdc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <_Z18SystemClock_Configv+0xe0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <_Z18SystemClock_Configv+0xe0>)
 80010c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <_Z18SystemClock_Configv+0xe0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80010f0:	2332      	movs	r3, #50	; 0x32
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fed7 	bl	8002eb4 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8001116:	f000 fcd9 	bl	8001acc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f935 	bl	80033a4 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_Z18SystemClock_Configv+0xd2>
		Error_Handler();
 800114a:	f000 fcbf 	bl	8001acc <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 800118c:	4a39      	ldr	r2, [pc, #228]	; (8001274 <_ZL12MX_TIM1_Initv+0x114>)
 800118e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b36      	ldr	r3, [pc, #216]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800119c:	4b34      	ldr	r3, [pc, #208]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011b6:	482e      	ldr	r0, [pc, #184]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011b8:	f002 fac4 	bl	8003744 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf14      	ite	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	2300      	moveq	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <_ZL12MX_TIM1_Initv+0x70>
		Error_Handler();
 80011cc:	f000 fc7e 	bl	8001acc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	4619      	mov	r1, r3
 80011dc:	4824      	ldr	r0, [pc, #144]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011de:	f003 f83d 	bl	800425c <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <_ZL12MX_TIM1_Initv+0x96>
		Error_Handler();
 80011f2:	f000 fc6b 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80011f6:	481e      	ldr	r0, [pc, #120]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 80011f8:	f002 fc56 	bl	8003aa8 <HAL_TIM_IC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <_ZL12MX_TIM1_Initv+0xb0>
		Error_Handler();
 800120c:	f000 fc5e 	bl	8001acc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 8001220:	f003 fd30 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf14      	ite	ne
 800122a:	2301      	movne	r3, #1
 800122c:	2300      	moveq	r3, #0
 800122e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <_ZL12MX_TIM1_Initv+0xd8>
		Error_Handler();
 8001234:	f000 fc4a 	bl	8001acc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800123c:	2301      	movs	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <_ZL12MX_TIM1_Initv+0x110>)
 8001250:	f002 fea6 	bl	8003fa0 <HAL_TIM_IC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf14      	ite	ne
 800125a:	2301      	movne	r3, #1
 800125c:	2300      	moveq	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <_ZL12MX_TIM1_Initv+0x108>
		Error_Handler();
 8001264:	f000 fc32 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000002c 	.word	0x2000002c
 8001274:	40010000 	.word	0x40010000

08001278 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012a2:	4b38      	ldr	r3, [pc, #224]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012ca:	482e      	ldr	r0, [pc, #184]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012cc:	f002 fa3a 	bl	8003744 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL12MX_TIM2_Initv+0x6c>
		Error_Handler();
 80012e0:	f000 fbf4 	bl	8001acc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4619      	mov	r1, r3
 80012f0:	4824      	ldr	r0, [pc, #144]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 80012f2:	f002 ffb3 	bl	800425c <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZL12MX_TIM2_Initv+0x92>
		Error_Handler();
 8001306:	f000 fbe1 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 800130c:	f002 fbcc 	bl	8003aa8 <HAL_TIM_IC_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 8001320:	f000 fbd4 	bl	8001acc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 8001334:	f003 fca6 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
			!= HAL_OK) {
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_ZL12MX_TIM2_Initv+0xd4>
		Error_Handler();
 8001348:	f000 fbc0 	bl	8001acc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001350:	2301      	movs	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	4619      	mov	r1, r3
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <_ZL12MX_TIM2_Initv+0x10c>)
 8001364:	f002 fe1c 	bl	8003fa0 <HAL_TIM_IC_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_ZL12MX_TIM2_Initv+0x104>
		Error_Handler();
 8001378:	f000 fba8 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000074 	.word	0x20000074

08001388 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013ac:	4a29      	ldr	r2, [pc, #164]	; (8001454 <_ZL12MX_TIM3_Initv+0xcc>)
 80013ae:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80013d0:	481f      	ldr	r0, [pc, #124]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013d2:	f002 fa69 	bl	80038a8 <HAL_TIM_PWM_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 80013e6:	f000 fb71 	bl	8001acc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4619      	mov	r1, r3
 80013f8:	4815      	ldr	r0, [pc, #84]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 80013fa:	f003 fc43 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 800140e:	f000 fb5d 	bl	8001acc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001412:	2360      	movs	r3, #96	; 0x60
 8001414:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 800142a:	f002 fe55 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800142e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 800143e:	f000 fb45 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <_ZL12MX_TIM3_Initv+0xc8>)
 8001444:	f000 fca4 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000bc 	.word	0x200000bc
 8001454:	40000400 	.word	0x40000400

08001458 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800147c:	4a41      	ldr	r2, [pc, #260]	; (8001584 <_ZL12MX_TIM4_Initv+0x12c>)
 800147e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000;
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 8001482:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001486:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100;
 800148e:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 8001490:	2264      	movs	r2, #100	; 0x64
 8001492:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80014a0:	4837      	ldr	r0, [pc, #220]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 80014a2:	f002 fa01 	bl	80038a8 <HAL_TIM_PWM_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	bf14      	ite	ne
 80014ac:	2301      	movne	r3, #1
 80014ae:	2300      	moveq	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 80014b6:	f000 fb09 	bl	8001acc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4619      	mov	r1, r3
 80014c8:	482d      	ldr	r0, [pc, #180]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 80014ca:	f003 fbdb 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
			!= HAL_OK) {
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 80014de:	f000 faf5 	bl	8001acc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 80014fa:	f002 fded 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 800150e:	f000 fadd 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2204      	movs	r2, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4819      	ldr	r0, [pc, #100]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800151a:	f002 fddd 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZL12MX_TIM4_Initv+0xda>
		Error_Handler();
 800152e:	f000 facd 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2208      	movs	r2, #8
 8001536:	4619      	mov	r1, r3
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800153a:	f002 fdcd 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <_ZL12MX_TIM4_Initv+0xfa>
		Error_Handler();
 800154e:	f000 fabd 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	220c      	movs	r2, #12
 8001556:	4619      	mov	r1, r3
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 800155a:	f002 fdbd 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <_ZL12MX_TIM4_Initv+0x11a>
		Error_Handler();
 800156e:	f000 faad 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <_ZL12MX_TIM4_Initv+0x128>)
 8001574:	f000 fc0c 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000104 	.word	0x20000104
 8001584:	40000800 	.word	0x40000800

08001588 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <_ZL12MX_TIM5_Initv+0x11c>)
 80015bc:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 1000 - 1;
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1000 - 1;
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 80015e2:	f002 f8af 	bl	8003744 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf14      	ite	ne
 80015ec:	2301      	movne	r3, #1
 80015ee:	2300      	moveq	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <_ZL12MX_TIM5_Initv+0x72>
		Error_Handler();
 80015f6:	f000 fa69 	bl	8001acc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001604:	4619      	mov	r1, r3
 8001606:	4826      	ldr	r0, [pc, #152]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 8001608:	f002 fe28 	bl	800425c <HAL_TIM_ConfigClockSource>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <_ZL12MX_TIM5_Initv+0x98>
		Error_Handler();
 800161c:	f000 fa56 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 8001622:	f002 f941 	bl	80038a8 <HAL_TIM_PWM_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <_ZL12MX_TIM5_Initv+0xb2>
		Error_Handler();
 8001636:	f000 fa49 	bl	8001acc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001642:	f107 0320 	add.w	r3, r7, #32
 8001646:	4619      	mov	r1, r3
 8001648:	4815      	ldr	r0, [pc, #84]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 800164a:	f003 fb1b 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZL12MX_TIM5_Initv+0xda>
		Error_Handler();
 800165e:	f000 fa35 	bl	8001acc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	; 0x60
 8001664:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2208      	movs	r2, #8
 8001676:	4619      	mov	r1, r3
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 800167a:	f002 fd2d 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_ZL12MX_TIM5_Initv+0x10a>
		Error_Handler();
 800168e:	f000 fa1d 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <_ZL12MX_TIM5_Initv+0x118>)
 8001694:	f000 fb7c 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001698:	bf00      	nop
 800169a:	3738      	adds	r7, #56	; 0x38
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000014c 	.word	0x2000014c
 80016a4:	40000c00 	.word	0x40000c00

080016a8 <_ZL12MX_TIM9_Initv>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016ae:	463b      	mov	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <_ZL12MX_TIM9_Initv+0x84>)
 80016be:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 50000 - 1;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016c2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016c6:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 100;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016d0:	2264      	movs	r2, #100	; 0x64
 80016d2:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 80016e0:	4811      	ldr	r0, [pc, #68]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 80016e2:	f002 f82f 	bl	8003744 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_ZL12MX_TIM9_Initv+0x52>
		Error_Handler();
 80016f6:	f000 f9e9 	bl	8001acc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <_ZL12MX_TIM9_Initv+0x80>)
 8001706:	f002 fda9 	bl	800425c <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <_ZL12MX_TIM9_Initv+0x76>
		Error_Handler();
 800171a:	f000 f9d7 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000194 	.word	0x20000194
 800172c:	40014000 	.word	0x40014000

08001730 <_ZL13MX_TIM10_Initv>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 800174a:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <_ZL13MX_TIM10_Initv+0xb8>)
 800174c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1000 - 1;
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 8001750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001754:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000 - 1;
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001770:	481c      	ldr	r0, [pc, #112]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 8001772:	f001 ffe7 	bl	8003744 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZL13MX_TIM10_Initv+0x5a>
		Error_Handler();
 8001786:	f000 f9a1 	bl	8001acc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 800178a:	4816      	ldr	r0, [pc, #88]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 800178c:	f002 f88c 	bl	80038a8 <HAL_TIM_PWM_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <_ZL13MX_TIM10_Initv+0x74>
		Error_Handler();
 80017a0:	f000 f994 	bl	8001acc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a4:	2360      	movs	r3, #96	; 0x60
 80017a6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 80017bc:	f002 fc8c 	bl	80040d8 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
			!= HAL_OK) {
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <_ZL13MX_TIM10_Initv+0xa4>
		Error_Handler();
 80017d0:	f000 f97c 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <_ZL13MX_TIM10_Initv+0xb4>)
 80017d6:	f000 fadb 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200001dc 	.word	0x200001dc
 80017e8:	40014400 	.word	0x40014400

080017ec <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_ZL19MX_USART1_UART_Initv+0x58>)
 80017f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001824:	f003 fab0 	bl	8004d88 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8001838:	f000 f948 	bl	8001acc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000224 	.word	0x20000224
 8001844:	40011000 	.word	0x40011000

08001848 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <_ZL11MX_DMA_Initv+0x3c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <_ZL11MX_DMA_Initv+0x3c>)
 8001858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <_ZL11MX_DMA_Initv+0x3c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	203a      	movs	r0, #58	; 0x3a
 8001870:	f000 fddb 	bl	800242a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001874:	203a      	movs	r0, #58	; 0x3a
 8001876:	f000 fdf4 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a55      	ldr	r2, [pc, #340]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <_ZL12MX_GPIO_Initv+0x190>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800192a:	2200      	movs	r2, #0
 800192c:	f641 0128 	movw	r1, #6184	; 0x1828
 8001930:	483a      	ldr	r0, [pc, #232]	; (8001a1c <_ZL12MX_GPIO_Initv+0x194>)
 8001932:	f001 faa5 	bl	8002e80 <HAL_GPIO_WritePin>
			Laser1_en_Pin | GPIO2_2_Pin | Laser_pointer_Pin | GPIO3_2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 800193c:	4838      	ldr	r0, [pc, #224]	; (8001a20 <_ZL12MX_GPIO_Initv+0x198>)
 800193e:	f001 fa9f 	bl	8002e80 <HAL_GPIO_WritePin>
			BLDC_1_Pin | BLDC_2_Pin | Motor3_DIR1_Pin | LinearActuator_dir_Pin
					| LinearActuator_EN_Pin | LinearActuator_DIR1_Pin
					| LinearActuator_DIR2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | LinearActuator_en_Pin,
 8001942:	2200      	movs	r2, #0
 8001944:	2183      	movs	r1, #131	; 0x83
 8001946:	4837      	ldr	r0, [pc, #220]	; (8001a24 <_ZL12MX_GPIO_Initv+0x19c>)
 8001948:	f001 fa9a 	bl	8002e80 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, laser1_Pin | STEPPER_DIR_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001952:	4835      	ldr	r0, [pc, #212]	; (8001a28 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001954:	f001 fa94 	bl	8002e80 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800195e:	4833      	ldr	r0, [pc, #204]	; (8001a2c <_ZL12MX_GPIO_Initv+0x1a4>)
 8001960:	f001 fa8e 	bl	8002e80 <HAL_GPIO_WritePin>
			PassingMotor_DIR_Pin | LOCO_DIR2_Pin | LOCO_DIR1_Pin
					| LiftingMotor_DIR_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : Limit_switch_input1_Pin Liimit_switch_input2_Pin */
	GPIO_InitStruct.Pin = Limit_switch_input1_Pin | Liimit_switch_input2_Pin;
 8001964:	2314      	movs	r3, #20
 8001966:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	4829      	ldr	r0, [pc, #164]	; (8001a1c <_ZL12MX_GPIO_Initv+0x194>)
 8001978:	f001 f8fe 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : Laser1_en_Pin GPIO2_2_Pin Laser_pointer_Pin GPIO3_2_Pin */
	GPIO_InitStruct.Pin = Laser1_en_Pin | GPIO2_2_Pin | Laser_pointer_Pin
 800197c:	f641 0328 	movw	r3, #6184	; 0x1828
 8001980:	617b      	str	r3, [r7, #20]
			| GPIO3_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4821      	ldr	r0, [pc, #132]	; (8001a1c <_ZL12MX_GPIO_Initv+0x194>)
 8001996:	f001 f8ef 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : BLDC_1_Pin BLDC_2_Pin Motor3_DIR1_Pin LinearActuator_dir_Pin
	 LinearActuator_EN_Pin LinearActuator_DIR1_Pin LinearActuator_DIR2_Pin */
	GPIO_InitStruct.Pin = BLDC_1_Pin | BLDC_2_Pin | Motor3_DIR1_Pin
 800199a:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800199e:	617b      	str	r3, [r7, #20]
			| LinearActuator_dir_Pin | LinearActuator_EN_Pin
			| LinearActuator_DIR1_Pin | LinearActuator_DIR2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	481b      	ldr	r0, [pc, #108]	; (8001a20 <_ZL12MX_GPIO_Initv+0x198>)
 80019b4:	f001 f8e0 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 LinearActuator_en_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | LinearActuator_en_Pin;
 80019b8:	2383      	movs	r3, #131	; 0x83
 80019ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4815      	ldr	r0, [pc, #84]	; (8001a24 <_ZL12MX_GPIO_Initv+0x19c>)
 80019d0:	f001 f8d2 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : laser1_Pin STEPPER_DIR_Pin */
	GPIO_InitStruct.Pin = laser1_Pin | STEPPER_DIR_Pin;
 80019d4:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80019d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	480e      	ldr	r0, [pc, #56]	; (8001a28 <_ZL12MX_GPIO_Initv+0x1a0>)
 80019ee:	f001 f8c3 	bl	8002b78 <HAL_GPIO_Init>

	/*Configure GPIO pins : PassingMotor_DIR_Pin LOCO_DIR2_Pin LOCO_DIR1_Pin LiftingMotor_DIR_Pin */
	GPIO_InitStruct.Pin = PassingMotor_DIR_Pin | LOCO_DIR2_Pin | LOCO_DIR1_Pin
 80019f2:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 80019f6:	617b      	str	r3, [r7, #20]
			| LiftingMotor_DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <_ZL12MX_GPIO_Initv+0x1a4>)
 8001a0c:	f001 f8b4 	bl	8002b78 <HAL_GPIO_Init>

}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020c00 	.word	0x40020c00

08001a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	//test +=1;

	if (laserDebounce > 0) {
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dd04      	ble.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x1a>
		laserDebounce--;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a48:	6013      	str	r3, [r2, #0]
	}
	if (passDebounce > 0) {
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dd04      	ble.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x2c>
		passDebounce--;
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a5a:	6013      	str	r3, [r2, #0]
	}

	if (linearDebounce > 0) {
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd04      	ble.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x3e>
		linearDebounce--;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a6c:	6013      	str	r3, [r2, #0]

	}
	if (bldcDebounce > 0) {
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dd04      	ble.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x50>
		bldcDebounce--;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a7e:	6013      	str	r3, [r2, #0]
	}
	if (debounce > 0) {
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dd04      	ble.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x62>
		debounce--;
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a90:	6013      	str	r3, [r2, #0]
	}
	if (start_stepper) {
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_TIM_PeriodElapsedCallback+0x74>
		stepperCount += 1;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aa2:	6013      	str	r3, [r2, #0]
	}

}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	20000318 	.word	0x20000318
 8001ab4:	20000320 	.word	0x20000320
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000308 	.word	0x20000308
 8001ac0:	200002fc 	.word	0x200002fc
 8001ac4:	200002f4 	.word	0x200002f4
 8001ac8:	20000300 	.word	0x20000300

08001acc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6c      	ldr	r2, [pc, #432]	; (8001cf8 <HAL_TIM_Base_MspInit+0x1d0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d145      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Encoder2_Pin;
 8001b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b94:	2301      	movs	r3, #1
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4858      	ldr	r0, [pc, #352]	; (8001d00 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ba0:	f000 ffea 	bl	8002b78 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2018      	movs	r0, #24
 8001baa:	f000 fc3e 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001bae:	2018      	movs	r0, #24
 8001bb0:	f000 fc57 	bl	8002462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2019      	movs	r0, #25
 8001bba:	f000 fc36 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bbe:	2019      	movs	r0, #25
 8001bc0:	f000 fc4f 	bl	8002462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	201b      	movs	r0, #27
 8001bca:	f000 fc2e 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bce:	201b      	movs	r0, #27
 8001bd0:	f000 fc47 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001bd4:	e08c      	b.n	8001cf0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bde:	d134      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder1_Pin;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder1_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4834      	ldr	r0, [pc, #208]	; (8001d04 <HAL_TIM_Base_MspInit+0x1dc>)
 8001c34:	f000 ffa0 	bl	8002b78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	201c      	movs	r0, #28
 8001c3e:	f000 fbf4 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c42:	201c      	movs	r0, #28
 8001c44:	f000 fc0d 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8001c48:	e052      	b.n	8001cf0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM5)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_TIM_Base_MspInit+0x1e0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d116      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6413      	str	r3, [r2, #64]	; 0x40
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	2032      	movs	r0, #50	; 0x32
 8001c76:	f000 fbd8 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c7a:	2032      	movs	r0, #50	; 0x32
 8001c7c:	f000 fbf1 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8001c80:	e036      	b.n	8001cf0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM9)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_TIM_Base_MspInit+0x1e4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d116      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2018      	movs	r0, #24
 8001cae:	f000 fbbc 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cb2:	2018      	movs	r0, #24
 8001cb4:	f000 fbd5 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8001cb8:	e01a      	b.n	8001cf0 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM10)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_TIM_Base_MspInit+0x1e8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d115      	bne.n	8001cf0 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_TIM_Base_MspInit+0x1d4>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2019      	movs	r0, #25
 8001ce6:	f000 fba0 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cea:	2019      	movs	r0, #25
 8001cec:	f000 fbb9 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8001cf0:	bf00      	nop
 8001cf2:	3738      	adds	r7, #56	; 0x38
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40014400 	.word	0x40014400

08001d14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_TIM_PWM_MspInit+0x70>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10e      	bne.n	8001d44 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d42:	e01a      	b.n	8001d7a <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM4)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_TIM_PWM_MspInit+0x78>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d115      	bne.n	8001d7a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_TIM_PWM_MspInit+0x74>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201e      	movs	r0, #30
 8001d70:	f000 fb5b 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d74:	201e      	movs	r0, #30
 8001d76:	f000 fb74 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40000800 	.word	0x40000800

08001d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_TIM_MspPostInit+0x180>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11e      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a56      	ldr	r2, [pc, #344]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor3_PWM1_Pin;
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dde:	2302      	movs	r3, #2
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor3_PWM1_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	484b      	ldr	r0, [pc, #300]	; (8001f18 <HAL_TIM_MspPostInit+0x188>)
 8001dea:	f000 fec5 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001dee:	e08a      	b.n	8001f06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_TIM_MspPostInit+0x18c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d13d      	bne.n	8001e76 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PassingMotor_PWM_Pin|LiftingMotor_PWM_Pin;
 8001e32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e44:	2302      	movs	r3, #2
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4834      	ldr	r0, [pc, #208]	; (8001f20 <HAL_TIM_MspPostInit+0x190>)
 8001e50:	f000 fe92 	bl	8002b78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LOCO_PWM1_Pin|LOCO_PWM2_Pin;
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e64:	2302      	movs	r3, #2
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482d      	ldr	r0, [pc, #180]	; (8001f24 <HAL_TIM_MspPostInit+0x194>)
 8001e70:	f000 fe82 	bl	8002b78 <HAL_GPIO_Init>
}
 8001e74:	e047      	b.n	8001f06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM5)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_TIM_MspPostInit+0x198>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d11e      	bne.n	8001ebe <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_Pin;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4818      	ldr	r0, [pc, #96]	; (8001f18 <HAL_TIM_MspPostInit+0x188>)
 8001eb8:	f000 fe5e 	bl	8002b78 <HAL_GPIO_Init>
}
 8001ebc:	e023      	b.n	8001f06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_TIM_MspPostInit+0x19c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d11e      	bne.n	8001f06 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_TIM_MspPostInit+0x184>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 8001ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	4808      	ldr	r0, [pc, #32]	; (8001f24 <HAL_TIM_MspPostInit+0x194>)
 8001f02:	f000 fe39 	bl	8002b78 <HAL_GPIO_Init>
}
 8001f06:	bf00      	nop
 8001f08:	3730      	adds	r7, #48	; 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40014400 	.word	0x40014400

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a31      	ldr	r2, [pc, #196]	; (8002014 <HAL_UART_MspInit+0xe4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d15b      	bne.n	800200a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_UART_MspInit+0xe8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481d      	ldr	r0, [pc, #116]	; (800201c <HAL_UART_MspInit+0xec>)
 8001fa8:	f000 fde6 	bl	8002b78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_UART_MspInit+0xf4>)
 8001fb0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8001ff0:	f000 fa52 	bl	8002498 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ffa:	f7ff fd67 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_UART_MspInit+0xf0>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40011000 	.word	0x40011000
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000
 8002020:	20000268 	.word	0x20000268
 8002024:	40026440 	.word	0x40026440

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 f8de 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002082:	f001 fe85 	bl	8003d90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002088:	f001 fe82 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000002c 	.word	0x2000002c
 8002094:	20000194 	.word	0x20000194

08002098 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <TIM1_UP_TIM10_IRQHandler+0x14>)
 800209e:	f001 fe77 	bl	8003d90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020a4:	f001 fe74 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000002c 	.word	0x2000002c
 80020b0:	200001dc 	.word	0x200001dc

080020b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM1_CC_IRQHandler+0x10>)
 80020ba:	f001 fe69 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000002c 	.word	0x2000002c

080020c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM2_IRQHandler+0x10>)
 80020ce:	f001 fe5f 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000074 	.word	0x20000074

080020dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <TIM4_IRQHandler+0x10>)
 80020e2:	f001 fe55 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000104 	.word	0x20000104

080020f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <TIM5_IRQHandler+0x10>)
 80020f6:	f001 fe4b 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000014c 	.word	0x2000014c

08002104 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <DMA2_Stream2_IRQHandler+0x10>)
 800210a:	f000 facb 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000268 	.word	0x20000268

08002118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <SystemInit+0x20>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <SystemInit+0x20>)
 8002124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800213c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002158:	4c0b      	ldr	r4, [pc, #44]	; (8002188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002166:	f7ff ffd7 	bl	8002118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f003 fa9b 	bl	80056a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7fe fdb9 	bl	8000ce4 <main>
  bx  lr    
 8002172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800217c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002180:	08005744 	.word	0x08005744
  ldr r2, =_sbss
 8002184:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002188:	20000328 	.word	0x20000328

0800218c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_Init+0x40>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_Init+0x40>)
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x40>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f92b 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fc88 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f943 	bl	800247e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002210:	f000 f90b 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000004 	.word	0x20000004
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000000c 	.word	0x2000000c
 8002258:	20000324 	.word	0x20000324

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000324 	.word	0x20000324

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff feda 	bl	800225c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e099      	b.n	80025e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff fec1 	bl	800225c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d908      	bls.n	80024f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e078      	b.n	80025e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_DMA_Init+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa6f 	bl	8002a80 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025b6:	2301      	movs	r3, #1
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa26 	bl	8002a14 <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	f010803f 	.word	0xf010803f

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_DMA_Start_IT+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e040      	b.n	800269c <HAL_DMA_Start_IT+0xa8>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12f      	bne.n	800268e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9b8 	bl	80029b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0216 	orr.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_DMA_IRQHandler+0x258>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a92      	ldr	r2, [pc, #584]	; (8002900 <HAL_DMA_IRQHandler+0x25c>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2208      	movs	r2, #8
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2208      	movs	r2, #8
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2201      	movs	r2, #1
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2201      	movs	r2, #1
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2204      	movs	r2, #4
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2204      	movs	r2, #4
 800276a:	409a      	lsls	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2210      	movs	r2, #16
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d043      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2210      	movs	r2, #16
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
 80027d2:	e01f      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e016      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0208 	bic.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2220      	movs	r2, #32
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 808e 	beq.w	8002942 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8086 	beq.w	8002942 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2220      	movs	r2, #32
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b05      	cmp	r3, #5
 800284c:	d136      	bne.n	80028bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0216 	bic.w	r2, r2, #22
 800285c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_DMA_IRQHandler+0x1da>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	223f      	movs	r2, #63	; 0x3f
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07d      	beq.n	80029ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
        }
        return;
 80028ba:	e078      	b.n	80029ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01c      	beq.n	8002904 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d030      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e02b      	b.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e022      	b.n	8002942 <HAL_DMA_IRQHandler+0x29e>
 80028fc:	20000004 	.word	0x20000004
 8002900:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0210 	bic.w	r2, r2, #16
 8002920:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	2b00      	cmp	r3, #0
 8002948:	d032      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d022      	beq.n	800299c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	429a      	cmp	r2, r3
 8002978:	d307      	bcc.n	800298a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f2      	bne.n	800296e <HAL_DMA_IRQHandler+0x2ca>
 8002988:	e000      	b.n	800298c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800298a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029ae:	bf00      	nop
    }
  }
}
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop

080029b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d108      	bne.n	80029f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029f6:	e007      	b.n	8002a08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	3b10      	subs	r3, #16
 8002a24:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <DMA_CalcBaseAndBitshift+0x64>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <DMA_CalcBaseAndBitshift+0x68>)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d909      	bls.n	8002a56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	1d1a      	adds	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58
 8002a54:	e007      	b.n	8002a66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	aaaaaaab 	.word	0xaaaaaaab
 8002a7c:	0800572c 	.word	0x0800572c

08002a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <DMA_CheckFifoParam+0x5a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d856      	bhi.n	8002b4e <DMA_CheckFifoParam+0xce>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <DMA_CheckFifoParam+0x28>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002b4f 	.word	0x08002b4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d046      	beq.n	8002b52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e043      	b.n	8002b52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad2:	d140      	bne.n	8002b56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e03d      	b.n	8002b56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae2:	d121      	bne.n	8002b28 <DMA_CheckFifoParam+0xa8>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d837      	bhi.n	8002b5a <DMA_CheckFifoParam+0xda>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x70>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b07 	.word	0x08002b07
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b19 	.word	0x08002b19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e030      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d025      	beq.n	8002b5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b16:	e022      	b.n	8002b5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b20:	d11f      	bne.n	8002b62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b26:	e01c      	b.n	8002b62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d903      	bls.n	8002b36 <DMA_CheckFifoParam+0xb6>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d003      	beq.n	8002b3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b34:	e018      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3a:	e015      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e00b      	b.n	8002b66 <DMA_CheckFifoParam+0xe6>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e00a      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e008      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e006      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e004      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e002      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b62:	bf00      	nop
 8002b64:	e000      	b.n	8002b68 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
    }
  } 
  
  return status; 
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e159      	b.n	8002e48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8148 	bne.w	8002e42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a2 	beq.w	8002e42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b57      	ldr	r3, [pc, #348]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a49      	ldr	r2, [pc, #292]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x202>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <HAL_GPIO_Init+0x2f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x1fe>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_GPIO_Init+0x2f8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x1fa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_GPIO_Init+0x2fc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x1f6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a45      	ldr	r2, [pc, #276]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x1f2>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e008      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e004      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f002 0203 	and.w	r2, r2, #3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	4093      	lsls	r3, r2
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d8c:	4935      	ldr	r1, [pc, #212]	; (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_GPIO_Init+0x304>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	f67f aea2 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e264      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	4ba3      	ldr	r3, [pc, #652]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4ba0      	ldr	r3, [pc, #640]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b9d      	ldr	r3, [pc, #628]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b99      	ldr	r3, [pc, #612]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e23f      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x74>
 8002f1a:	4b91      	ldr	r3, [pc, #580]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b8b      	ldr	r3, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a8a      	ldr	r2, [pc, #552]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a87      	ldr	r2, [pc, #540]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	4b84      	ldr	r3, [pc, #528]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a83      	ldr	r2, [pc, #524]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a80      	ldr	r2, [pc, #512]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f976 	bl	800225c <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7ff f972 	bl	800225c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e204      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b76      	ldr	r3, [pc, #472]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff f962 	bl	800225c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7ff f95e 	bl	800225c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f0      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b6c      	ldr	r3, [pc, #432]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c4      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b56      	ldr	r3, [pc, #344]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4952      	ldr	r1, [pc, #328]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b4f      	ldr	r3, [pc, #316]	; (8003164 <HAL_RCC_OscConfig+0x2b0>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7ff f917 	bl	800225c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7ff f913 	bl	800225c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a5      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4940      	ldr	r1, [pc, #256]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_OscConfig+0x2b0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7ff f8f6 	bl	800225c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7ff f8f2 	bl	800225c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e184      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d030      	beq.n	8003100 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <HAL_RCC_OscConfig+0x2b4>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7ff f8d6 	bl	800225c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7ff f8d2 	bl	800225c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e164      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x200>
 80030d2:	e015      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x2b4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7ff f8bf 	bl	800225c <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7ff f8bb 	bl	800225c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e14d      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a0 	beq.w	800324e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x2b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d121      	bne.n	800318e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_RCC_OscConfig+0x2b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_RCC_OscConfig+0x2b8>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7ff f881 	bl	800225c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e011      	b.n	8003182 <HAL_RCC_OscConfig+0x2ce>
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	42470000 	.word	0x42470000
 8003168:	42470e80 	.word	0x42470e80
 800316c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7ff f874 	bl	800225c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e106      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b85      	ldr	r3, [pc, #532]	; (8003398 <HAL_RCC_OscConfig+0x4e4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2f0>
 8003196:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a80      	ldr	r2, [pc, #512]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x32a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x312>
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a7a      	ldr	r2, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a77      	ldr	r2, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x32a>
 80031c6:	4b75      	ldr	r3, [pc, #468]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a74      	ldr	r2, [pc, #464]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
 80031d2:	4b72      	ldr	r3, [pc, #456]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a71      	ldr	r2, [pc, #452]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7ff f839 	bl	800225c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7ff f835 	bl	800225c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0c5      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b65      	ldr	r3, [pc, #404]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x33a>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7ff f823 	bl	800225c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7ff f81f 	bl	800225c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0af      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b5a      	ldr	r3, [pc, #360]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a55      	ldr	r2, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 809b 	beq.w	800338e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d05c      	beq.n	800331e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d141      	bne.n	80032f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fff3 	bl	800225c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe ffef 	bl	800225c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e081      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	019b      	lsls	r3, r3, #6
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	4937      	ldr	r1, [pc, #220]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe ffc8 	bl	800225c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe ffc4 	bl	800225c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e056      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x41c>
 80032ee:	e04e      	b.n	800338e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe ffb1 	bl	800225c <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe ffad 	bl	800225c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e03f      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x44a>
 800331c:	e037      	b.n	800338e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e032      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_RCC_OscConfig+0x4e8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d028      	beq.n	800338a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d121      	bne.n	800338a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d11a      	bne.n	800338a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800335a:	4013      	ands	r3, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003360:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	3b01      	subs	r3, #1
 8003374:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d107      	bne.n	800338a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40007000 	.word	0x40007000
 800339c:	40023800 	.word	0x40023800
 80033a0:	42470060 	.word	0x42470060

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fe fee2 	bl	800225c <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fe fede 	bl	800225c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fe42 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08005714 	.word	0x08005714
 8003568:	20000004 	.word	0x20000004
 800356c:	20000008 	.word	0x20000008

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003576:	2100      	movs	r1, #0
 8003578:	6079      	str	r1, [r7, #4]
 800357a:	2100      	movs	r1, #0
 800357c:	60f9      	str	r1, [r7, #12]
 800357e:	2100      	movs	r1, #0
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003582:	2100      	movs	r1, #0
 8003584:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003586:	4952      	ldr	r1, [pc, #328]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003588:	6889      	ldr	r1, [r1, #8]
 800358a:	f001 010c 	and.w	r1, r1, #12
 800358e:	2908      	cmp	r1, #8
 8003590:	d00d      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3e>
 8003592:	2908      	cmp	r1, #8
 8003594:	f200 8094 	bhi.w	80036c0 <HAL_RCC_GetSysClockFreq+0x150>
 8003598:	2900      	cmp	r1, #0
 800359a:	d002      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32>
 800359c:	2904      	cmp	r1, #4
 800359e:	d003      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x38>
 80035a0:	e08e      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a2:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80035a4:	60bb      	str	r3, [r7, #8]
       break;
 80035a6:	e08e      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80035aa:	60bb      	str	r3, [r7, #8]
      break;
 80035ac:	e08b      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ae:	4948      	ldr	r1, [pc, #288]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b0:	6849      	ldr	r1, [r1, #4]
 80035b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b8:	4945      	ldr	r1, [pc, #276]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035ba:	6849      	ldr	r1, [r1, #4]
 80035bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d024      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c4:	4942      	ldr	r1, [pc, #264]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80035c6:	6849      	ldr	r1, [r1, #4]
 80035c8:	0989      	lsrs	r1, r1, #6
 80035ca:	4608      	mov	r0, r1
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035d4:	f04f 0500 	mov.w	r5, #0
 80035d8:	ea00 0204 	and.w	r2, r0, r4
 80035dc:	ea01 0305 	and.w	r3, r1, r5
 80035e0:	493d      	ldr	r1, [pc, #244]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80035e2:	fb01 f003 	mul.w	r0, r1, r3
 80035e6:	2100      	movs	r1, #0
 80035e8:	fb01 f102 	mul.w	r1, r1, r2
 80035ec:	1844      	adds	r4, r0, r1
 80035ee:	493a      	ldr	r1, [pc, #232]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80035f0:	fba2 0101 	umull	r0, r1, r2, r1
 80035f4:	1863      	adds	r3, r4, r1
 80035f6:	4619      	mov	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f7fc fdea 	bl	80001d8 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e04a      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	461a      	mov	r2, r3
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	ea02 0400 	and.w	r4, r2, r0
 8003626:	ea03 0501 	and.w	r5, r3, r1
 800362a:	4620      	mov	r0, r4
 800362c:	4629      	mov	r1, r5
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	014b      	lsls	r3, r1, #5
 8003638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800363c:	0142      	lsls	r2, r0, #5
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	1b00      	subs	r0, r0, r4
 8003644:	eb61 0105 	sbc.w	r1, r1, r5
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	018b      	lsls	r3, r1, #6
 8003652:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003656:	0182      	lsls	r2, r0, #6
 8003658:	1a12      	subs	r2, r2, r0
 800365a:	eb63 0301 	sbc.w	r3, r3, r1
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800366c:	00d0      	lsls	r0, r2, #3
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	1912      	adds	r2, r2, r4
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0299      	lsls	r1, r3, #10
 8003682:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003686:	0290      	lsls	r0, r2, #10
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f7fc fd9e 	bl	80001d8 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80036c2:	60bb      	str	r3, [r7, #8]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	68bb      	ldr	r3, [r7, #8]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bdb0      	pop	{r4, r5, r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400
 80036d8:	017d7840 	.word	0x017d7840

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000004 	.word	0x20000004

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08005724 	.word	0x08005724

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003720:	f7ff ffdc 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08005724 	.word	0x08005724

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe f9dc 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fe94 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e044      	b.n	8003886 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xb0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d013      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_TIM_Base_Start_IT+0xb4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_TIM_Base_Start_IT+0xb8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b06      	cmp	r3, #6
 8003860:	d010      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	e007      	b.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40014000 	.word	0x40014000

080038a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe fa20 	bl	8001d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 fde2 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x24>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e022      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b04      	cmp	r3, #4
 8003970:	d109      	bne.n	8003986 <HAL_TIM_PWM_Start+0x3e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e015      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_PWM_Start+0x58>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <HAL_TIM_PWM_Start+0x6a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e068      	b.n	8003a8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0x82>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	e013      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0x92>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d8:	e00b      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xa2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	e003      	b.n	80039f2 <HAL_TIM_PWM_Start+0xaa>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f91c 	bl	8004c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_TIM_PWM_Start+0x14c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_TIM_PWM_Start+0x14c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_TIM_PWM_Start+0x150>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIM_PWM_Start+0x154>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIM_PWM_Start+0x158>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x10e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a14      	ldr	r2, [pc, #80]	; (8003aa4 <HAL_TIM_PWM_Start+0x15c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40014000 	.word	0x40014000

08003aa8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f839 	bl	8003b46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 fce2 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_IC_Start_IT+0x1e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	e013      	b.n	8003ba2 <HAL_TIM_IC_Start_IT+0x46>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_IC_Start_IT+0x2e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e00b      	b.n	8003ba2 <HAL_TIM_IC_Start_IT+0x46>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_IC_Start_IT+0x3e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e003      	b.n	8003ba2 <HAL_TIM_IC_Start_IT+0x46>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_TIM_IC_Start_IT+0x58>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e013      	b.n	8003bdc <HAL_TIM_IC_Start_IT+0x80>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d104      	bne.n	8003bc4 <HAL_TIM_IC_Start_IT+0x68>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e00b      	b.n	8003bdc <HAL_TIM_IC_Start_IT+0x80>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d104      	bne.n	8003bd4 <HAL_TIM_IC_Start_IT+0x78>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e003      	b.n	8003bdc <HAL_TIM_IC_Start_IT+0x80>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bde:	7bbb      	ldrb	r3, [r7, #14]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003be4:	7b7b      	ldrb	r3, [r7, #13]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0c2      	b.n	8003d74 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_IC_Start_IT+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bfc:	e013      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0xca>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_IC_Start_IT+0xb2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	e00b      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0xca>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_IC_Start_IT+0xc2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	e003      	b.n	8003c26 <HAL_TIM_IC_Start_IT+0xca>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_TIM_IC_Start_IT+0xda>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c34:	e013      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x102>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_IC_Start_IT+0xea>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c44:	e00b      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x102>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_IC_Start_IT+0xfa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c54:	e003      	b.n	8003c5e <HAL_TIM_IC_Start_IT+0x102>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	d841      	bhi.n	8003ce8 <HAL_TIM_IC_Start_IT+0x18c>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_TIM_IC_Start_IT+0x110>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003ce9 	.word	0x08003ce9
 8003c74:	08003ce9 	.word	0x08003ce9
 8003c78:	08003ce9 	.word	0x08003ce9
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003ce9 	.word	0x08003ce9
 8003c84:	08003ce9 	.word	0x08003ce9
 8003c88:	08003ce9 	.word	0x08003ce9
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003ce9 	.word	0x08003ce9
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003cd7 	.word	0x08003cd7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0202 	orr.w	r2, r2, #2
 8003cae:	60da      	str	r2, [r3, #12]
      break;
 8003cb0:	e01d      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0204 	orr.w	r2, r2, #4
 8003cc0:	60da      	str	r2, [r3, #12]
      break;
 8003cc2:	e014      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	60da      	str	r2, [r3, #12]
      break;
 8003cd4:	e00b      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0210 	orr.w	r2, r2, #16
 8003ce4:	60da      	str	r2, [r3, #12]
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d13e      	bne.n	8003d72 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	6839      	ldr	r1, [r7, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ff9b 	bl	8004c38 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_TIM_IC_Start_IT+0x220>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d013      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_TIM_IC_Start_IT+0x224>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_TIM_IC_Start_IT+0x228>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_TIM_IC_Start_IT+0x22c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <HAL_TIM_IC_Start_IT+0x230>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d111      	bne.n	8003d62 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d010      	beq.n	8003d72 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	e007      	b.n	8003d72 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40014000 	.word	0x40014000

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fc fb7c 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fb4a 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fb51 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc fb52 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fb20 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb27 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fc fb28 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 faf6 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fafd 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fc fafe 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 facc 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fad3 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd fd8e 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 ff1a 	bl	8004d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa98 	bl	800449c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0220 	mvn.w	r2, #32
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fee4 	bl	8004d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e088      	b.n	80040d0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f000 fc74 	bl	80048c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 020c 	bic.w	r2, r2, #12
 8003fee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6999      	ldr	r1, [r3, #24]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	619a      	str	r2, [r3, #24]
 8004002:	e060      	b.n	80040c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d11c      	bne.n	8004044 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f000 fcec 	bl	80049f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800402c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6999      	ldr	r1, [r3, #24]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	021a      	lsls	r2, r3, #8
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	619a      	str	r2, [r3, #24]
 8004042:	e040      	b.n	80040c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11b      	bne.n	8004082 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6819      	ldr	r1, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f000 fd39 	bl	8004ad0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020c 	bic.w	r2, r2, #12
 800406c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69d9      	ldr	r1, [r3, #28]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	61da      	str	r2, [r3, #28]
 8004080:	e021      	b.n	80040c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d11c      	bne.n	80040c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f000 fd56 	bl	8004b48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69d9      	ldr	r1, [r3, #28]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	61da      	str	r2, [r3, #28]
 80040c0:	e001      	b.n	80040c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e0ae      	b.n	8004254 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	f200 809f 	bhi.w	8004244 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004141 	.word	0x08004141
 8004110:	08004245 	.word	0x08004245
 8004114:	08004245 	.word	0x08004245
 8004118:	08004245 	.word	0x08004245
 800411c:	08004181 	.word	0x08004181
 8004120:	08004245 	.word	0x08004245
 8004124:	08004245 	.word	0x08004245
 8004128:	08004245 	.word	0x08004245
 800412c:	080041c3 	.word	0x080041c3
 8004130:	08004245 	.word	0x08004245
 8004134:	08004245 	.word	0x08004245
 8004138:	08004245 	.word	0x08004245
 800413c:	08004203 	.word	0x08004203
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa32 	bl	80045b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	619a      	str	r2, [r3, #24]
      break;
 800417e:	e064      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa78 	bl	800467c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
      break;
 80041c0:	e043      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fac3 	bl	8004754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0208 	orr.w	r2, r2, #8
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0204 	bic.w	r2, r2, #4
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	61da      	str	r2, [r3, #28]
      break;
 8004200:	e023      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb0d 	bl	8004828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	61da      	str	r2, [r3, #28]
      break;
 8004242:	e002      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_TIM_ConfigClockSource+0x1c>
 8004274:	2302      	movs	r3, #2
 8004276:	e0b4      	b.n	80043e2 <HAL_TIM_ConfigClockSource+0x186>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d03e      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xd4>
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	f200 8087 	bhi.w	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	f000 8086 	beq.w	80043ce <HAL_TIM_ConfigClockSource+0x172>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d87f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d01a      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xa6>
 80042cc:	2b70      	cmp	r3, #112	; 0x70
 80042ce:	d87b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b60      	cmp	r3, #96	; 0x60
 80042d2:	d050      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x11a>
 80042d4:	2b60      	cmp	r3, #96	; 0x60
 80042d6:	d877      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b50      	cmp	r3, #80	; 0x50
 80042da:	d03c      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xfa>
 80042dc:	2b50      	cmp	r3, #80	; 0x50
 80042de:	d873      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d058      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0x13a>
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d86f      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d064      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b30      	cmp	r3, #48	; 0x30
 80042ee:	d86b      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d060      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d867      	bhi.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d05c      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d05a      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	e062      	b.n	80043c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f000 fc71 	bl	8004bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e04f      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f000 fc5a 	bl	8004bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004352:	609a      	str	r2, [r3, #8]
      break;
 8004354:	e03c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	461a      	mov	r2, r3
 8004364:	f000 fb18 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2150      	movs	r1, #80	; 0x50
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fc27 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 8004374:	e02c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	461a      	mov	r2, r3
 8004384:	f000 fb74 	bl	8004a70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2160      	movs	r1, #96	; 0x60
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fc17 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 8004394:	e01c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f000 faf8 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fc07 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80043b4:	e00c      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fbfe 	bl	8004bc2 <TIM_ITRx_SetConfig>
      break;
 80043c6:	e003      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d831      	bhi.n	8004464 <HAL_TIM_ReadCapturedValue+0x78>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800443d 	.word	0x0800443d
 800440c:	08004465 	.word	0x08004465
 8004410:	08004465 	.word	0x08004465
 8004414:	08004465 	.word	0x08004465
 8004418:	08004447 	.word	0x08004447
 800441c:	08004465 	.word	0x08004465
 8004420:	08004465 	.word	0x08004465
 8004424:	08004465 	.word	0x08004465
 8004428:	08004451 	.word	0x08004451
 800442c:	08004465 	.word	0x08004465
 8004430:	08004465 	.word	0x08004465
 8004434:	08004465 	.word	0x08004465
 8004438:	0800445b 	.word	0x0800445b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	60fb      	str	r3, [r7, #12]

      break;
 8004444:	e00f      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	60fb      	str	r3, [r7, #12]

      break;
 800444e:	e00a      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	60fb      	str	r3, [r7, #12]

      break;
 8004458:	e005      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	60fb      	str	r3, [r7, #12]

      break;
 8004462:	e000      	b.n	8004466 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004464:	bf00      	nop
  }

  return tmpreg;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a34      	ldr	r2, [pc, #208]	; (8004594 <TIM_Base_SetConfig+0xe4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x38>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x38>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a31      	ldr	r2, [pc, #196]	; (8004598 <TIM_Base_SetConfig+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x38>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a30      	ldr	r2, [pc, #192]	; (800459c <TIM_Base_SetConfig+0xec>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x38>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a2f      	ldr	r2, [pc, #188]	; (80045a0 <TIM_Base_SetConfig+0xf0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <TIM_Base_SetConfig+0xe4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01b      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d017      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <TIM_Base_SetConfig+0xe8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <TIM_Base_SetConfig+0xec>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00f      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <TIM_Base_SetConfig+0xf0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00b      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <TIM_Base_SetConfig+0xf4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <TIM_Base_SetConfig+0xf8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0x8a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <TIM_Base_SetConfig+0xfc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <TIM_Base_SetConfig+0xe4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800

080045b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 0302 	bic.w	r3, r3, #2
 80045f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <TIM_OC1_SetConfig+0xc8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10c      	bne.n	8004626 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0308 	bic.w	r3, r3, #8
 8004612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <TIM_OC1_SetConfig+0xc8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d111      	bne.n	8004652 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800463c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40010000 	.word	0x40010000

0800467c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0210 	bic.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0320 	bic.w	r3, r3, #32
 80046c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <TIM_OC2_SetConfig+0xd4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10d      	bne.n	80046f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <TIM_OC2_SetConfig+0xd4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d113      	bne.n	8004728 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004706:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40010000 	.word	0x40010000

08004754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800479c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC3_SetConfig+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10d      	bne.n	80047ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <TIM_OC3_SetConfig+0xd0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40010000 	.word	0x40010000

08004828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <TIM_OC4_SetConfig+0x9c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d109      	bne.n	800489c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800488e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	019b      	lsls	r3, r3, #6
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000

080048c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_TI1_SetConfig+0xbc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_TI1_SetConfig+0x56>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d00f      	beq.n	800491e <TIM_TI1_SetConfig+0x56>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a21      	ldr	r2, [pc, #132]	; (8004988 <TIM_TI1_SetConfig+0xc0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_TI1_SetConfig+0x56>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a20      	ldr	r2, [pc, #128]	; (800498c <TIM_TI1_SetConfig+0xc4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_TI1_SetConfig+0x56>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <TIM_TI1_SetConfig+0xc8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_TI1_SetConfig+0x56>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <TIM_TI1_SetConfig+0xcc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <TIM_TI1_SetConfig+0x5a>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <TIM_TI1_SetConfig+0x5c>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e003      	b.n	8004942 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	b2db      	uxtb	r3, r3
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 030a 	and.w	r3, r3, #10
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f023 0210 	bic.w	r2, r3, #16
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f023 0210 	bic.w	r2, r3, #16
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0303 	bic.w	r3, r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	031b      	lsls	r3, r3, #12
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f043 0307 	orr.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	609a      	str	r2, [r3, #8]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1a      	ldr	r2, [r3, #32]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e050      	b.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d013      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10c      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000

08004d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03f      	b.n	8004e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd f8be 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2224      	movs	r2, #36	; 0x24
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 faa1 	bl	8005314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d11d      	bne.n	8004e78 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_UART_Receive_DMA+0x26>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e016      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Receive_DMA+0x38>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e00f      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f92a 	bl	80050c8 <UART_Start_Receive_DMA>
 8004e74:	4603      	mov	r3, r0
 8004e76:	e000      	b.n	8004e7a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d172      	bne.n	8004fd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f18:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	e853 3f00 	ldrex	r3, [r3]
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	667b      	str	r3, [r7, #100]	; 0x64
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f4c:	647a      	str	r2, [r7, #68]	; 0x44
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e5      	bne.n	8004f2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3314      	adds	r3, #20
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f76:	663b      	str	r3, [r7, #96]	; 0x60
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f80:	633a      	str	r2, [r7, #48]	; 0x30
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e5      	bne.n	8004f60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d119      	bne.n	8004fd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fc4:	61fa      	str	r2, [r7, #28]
 8004fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	69b9      	ldr	r1, [r7, #24]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d106      	bne.n	8004fee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004fe8:	f7ff ff69 	bl	8004ebe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fec:	e002      	b.n	8004ff4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004fee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ff0:	f7ff ff47 	bl	8004e82 <HAL_UART_RxCpltCallback>
}
 8004ff4:	bf00      	nop
 8004ff6:	3770      	adds	r7, #112	; 0x70
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2b01      	cmp	r3, #1
 8005010:	d108      	bne.n	8005024 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	4619      	mov	r1, r3
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff4e 	bl	8004ebe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005022:	e002      	b.n	800502a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff ff36 	bl	8004e96 <HAL_UART_RxHalfCpltCallback>
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	bf0c      	ite	eq
 8005052:	2301      	moveq	r3, #1
 8005054:	2300      	movne	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	; 0x21
 8005064:	d108      	bne.n	8005078 <UART_DMAError+0x46>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005072:	68b8      	ldr	r0, [r7, #8]
 8005074:	f000 f8c2 	bl	80051fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b22      	cmp	r3, #34	; 0x22
 8005098:	d108      	bne.n	80050ac <UART_DMAError+0x7a>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f000 f8d0 	bl	800524c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f043 0210 	orr.w	r2, r3, #16
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f7ff fef6 	bl	8004eaa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b098      	sub	sp, #96	; 0x60
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2222      	movs	r2, #34	; 0x22
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <UART_Start_Receive_DMA+0x128>)
 80050f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4a3d      	ldr	r2, [pc, #244]	; (80051f4 <UART_Start_Receive_DMA+0x12c>)
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <UART_Start_Receive_DMA+0x130>)
 8005106:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	2200      	movs	r2, #0
 800510e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	f7fd fa64 	bl	80025f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800515a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	65bb      	str	r3, [r7, #88]	; 0x58
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	657b      	str	r3, [r7, #84]	; 0x54
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519e:	63ba      	str	r2, [r7, #56]	; 0x38
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	617b      	str	r3, [r7, #20]
   return(result);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051d2:	627a      	str	r2, [r7, #36]	; 0x24
 80051d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3760      	adds	r7, #96	; 0x60
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	08004ed7 	.word	0x08004ed7
 80051f4:	08004ffd 	.word	0x08004ffd
 80051f8:	08005033 	.word	0x08005033

080051fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60bb      	str	r3, [r7, #8]
   return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	61ba      	str	r2, [r7, #24]
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005240:	bf00      	nop
 8005242:	3724      	adds	r7, #36	; 0x24
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b095      	sub	sp, #84	; 0x54
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005274:	643a      	str	r2, [r7, #64]	; 0x40
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800527a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	61fb      	str	r3, [r7, #28]
   return(result);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e5      	bne.n	8005288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d119      	bne.n	80052f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f023 0310 	bic.w	r3, r3, #16
 80052da:	647b      	str	r3, [r7, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e4:	61ba      	str	r2, [r7, #24]
 80052e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6979      	ldr	r1, [r7, #20]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	613b      	str	r3, [r7, #16]
   return(result);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005306:	bf00      	nop
 8005308:	3754      	adds	r7, #84	; 0x54
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	b09f      	sub	sp, #124	; 0x7c
 800531a:	af00      	add	r7, sp, #0
 800531c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532a:	68d9      	ldr	r1, [r3, #12]
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	ea40 0301 	orr.w	r3, r0, r1
 8005334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	431a      	orrs	r2, r3
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4313      	orrs	r3, r2
 800534c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005358:	f021 010c 	bic.w	r1, r1, #12
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005362:	430b      	orrs	r3, r1
 8005364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005372:	6999      	ldr	r1, [r3, #24]
 8005374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	ea40 0301 	orr.w	r3, r0, r1
 800537c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4bc5      	ldr	r3, [pc, #788]	; (8005698 <UART_SetConfig+0x384>)
 8005384:	429a      	cmp	r2, r3
 8005386:	d004      	beq.n	8005392 <UART_SetConfig+0x7e>
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4bc3      	ldr	r3, [pc, #780]	; (800569c <UART_SetConfig+0x388>)
 800538e:	429a      	cmp	r2, r3
 8005390:	d103      	bne.n	800539a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005392:	f7fe f9c3 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8005396:	6778      	str	r0, [r7, #116]	; 0x74
 8005398:	e002      	b.n	80053a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800539a:	f7fe f9ab 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 800539e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a8:	f040 80b6 	bne.w	8005518 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ae:	461c      	mov	r4, r3
 80053b0:	f04f 0500 	mov.w	r5, #0
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	6439      	str	r1, [r7, #64]	; 0x40
 80053bc:	415b      	adcs	r3, r3
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
 80053c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053c4:	1912      	adds	r2, r2, r4
 80053c6:	eb45 0303 	adc.w	r3, r5, r3
 80053ca:	f04f 0000 	mov.w	r0, #0
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	00d9      	lsls	r1, r3, #3
 80053d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053d8:	00d0      	lsls	r0, r2, #3
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	1911      	adds	r1, r2, r4
 80053e0:	6639      	str	r1, [r7, #96]	; 0x60
 80053e2:	416b      	adcs	r3, r5
 80053e4:	667b      	str	r3, [r7, #100]	; 0x64
 80053e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053f4:	415b      	adcs	r3, r3
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005400:	f7fa feea 	bl	80001d8 <__aeabi_uldivmod>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4ba5      	ldr	r3, [pc, #660]	; (80056a0 <UART_SetConfig+0x38c>)
 800540a:	fba3 2302 	umull	r2, r3, r3, r2
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	011e      	lsls	r6, r3, #4
 8005412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005414:	461c      	mov	r4, r3
 8005416:	f04f 0500 	mov.w	r5, #0
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	1891      	adds	r1, r2, r2
 8005420:	6339      	str	r1, [r7, #48]	; 0x30
 8005422:	415b      	adcs	r3, r3
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
 8005426:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800542a:	1912      	adds	r2, r2, r4
 800542c:	eb45 0303 	adc.w	r3, r5, r3
 8005430:	f04f 0000 	mov.w	r0, #0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	00d9      	lsls	r1, r3, #3
 800543a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800543e:	00d0      	lsls	r0, r2, #3
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	1911      	adds	r1, r2, r4
 8005446:	65b9      	str	r1, [r7, #88]	; 0x58
 8005448:	416b      	adcs	r3, r5
 800544a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	461a      	mov	r2, r3
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	1891      	adds	r1, r2, r2
 8005458:	62b9      	str	r1, [r7, #40]	; 0x28
 800545a:	415b      	adcs	r3, r3
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800545e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005462:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005466:	f7fa feb7 	bl	80001d8 <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4b8c      	ldr	r3, [pc, #560]	; (80056a0 <UART_SetConfig+0x38c>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	2164      	movs	r1, #100	; 0x64
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	3332      	adds	r3, #50	; 0x32
 8005482:	4a87      	ldr	r2, [pc, #540]	; (80056a0 <UART_SetConfig+0x38c>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005490:	441e      	add	r6, r3
 8005492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005494:	4618      	mov	r0, r3
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	1894      	adds	r4, r2, r2
 80054a0:	623c      	str	r4, [r7, #32]
 80054a2:	415b      	adcs	r3, r3
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054aa:	1812      	adds	r2, r2, r0
 80054ac:	eb41 0303 	adc.w	r3, r1, r3
 80054b0:	f04f 0400 	mov.w	r4, #0
 80054b4:	f04f 0500 	mov.w	r5, #0
 80054b8:	00dd      	lsls	r5, r3, #3
 80054ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054be:	00d4      	lsls	r4, r2, #3
 80054c0:	4622      	mov	r2, r4
 80054c2:	462b      	mov	r3, r5
 80054c4:	1814      	adds	r4, r2, r0
 80054c6:	653c      	str	r4, [r7, #80]	; 0x50
 80054c8:	414b      	adcs	r3, r1
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	1891      	adds	r1, r2, r2
 80054d8:	61b9      	str	r1, [r7, #24]
 80054da:	415b      	adcs	r3, r3
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054e6:	f7fa fe77 	bl	80001d8 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4b6c      	ldr	r3, [pc, #432]	; (80056a0 <UART_SetConfig+0x38c>)
 80054f0:	fba3 1302 	umull	r1, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	2164      	movs	r1, #100	; 0x64
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	3332      	adds	r3, #50	; 0x32
 8005502:	4a67      	ldr	r2, [pc, #412]	; (80056a0 <UART_SetConfig+0x38c>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f003 0207 	and.w	r2, r3, #7
 800550e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4432      	add	r2, r6
 8005514:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005516:	e0b9      	b.n	800568c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	461c      	mov	r4, r3
 800551c:	f04f 0500 	mov.w	r5, #0
 8005520:	4622      	mov	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	1891      	adds	r1, r2, r2
 8005526:	6139      	str	r1, [r7, #16]
 8005528:	415b      	adcs	r3, r3
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005530:	1912      	adds	r2, r2, r4
 8005532:	eb45 0303 	adc.w	r3, r5, r3
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	00d9      	lsls	r1, r3, #3
 8005540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005544:	00d0      	lsls	r0, r2, #3
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	eb12 0804 	adds.w	r8, r2, r4
 800554e:	eb43 0905 	adc.w	r9, r3, r5
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800556a:	0082      	lsls	r2, r0, #2
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa fe32 	bl	80001d8 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4b49      	ldr	r3, [pc, #292]	; (80056a0 <UART_SetConfig+0x38c>)
 800557a:	fba3 2302 	umull	r2, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	011e      	lsls	r6, r3, #4
 8005582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005584:	4618      	mov	r0, r3
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	1894      	adds	r4, r2, r2
 8005590:	60bc      	str	r4, [r7, #8]
 8005592:	415b      	adcs	r3, r3
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800559a:	1812      	adds	r2, r2, r0
 800559c:	eb41 0303 	adc.w	r3, r1, r3
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	f04f 0500 	mov.w	r5, #0
 80055a8:	00dd      	lsls	r5, r3, #3
 80055aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055ae:	00d4      	lsls	r4, r2, #3
 80055b0:	4622      	mov	r2, r4
 80055b2:	462b      	mov	r3, r5
 80055b4:	1814      	adds	r4, r2, r0
 80055b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80055b8:	414b      	adcs	r3, r1
 80055ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055d4:	0082      	lsls	r2, r0, #2
 80055d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055da:	f7fa fdfd 	bl	80001d8 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <UART_SetConfig+0x38c>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <UART_SetConfig+0x38c>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005602:	441e      	add	r6, r3
 8005604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005606:	4618      	mov	r0, r3
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	1894      	adds	r4, r2, r2
 8005612:	603c      	str	r4, [r7, #0]
 8005614:	415b      	adcs	r3, r3
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800561c:	1812      	adds	r2, r2, r0
 800561e:	eb41 0303 	adc.w	r3, r1, r3
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	f04f 0500 	mov.w	r5, #0
 800562a:	00dd      	lsls	r5, r3, #3
 800562c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005630:	00d4      	lsls	r4, r2, #3
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	eb12 0a00 	adds.w	sl, r2, r0
 800563a:	eb43 0b01 	adc.w	fp, r3, r1
 800563e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4618      	mov	r0, r3
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	008b      	lsls	r3, r1, #2
 8005652:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005656:	0082      	lsls	r2, r0, #2
 8005658:	4650      	mov	r0, sl
 800565a:	4659      	mov	r1, fp
 800565c:	f7fa fdbc 	bl	80001d8 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <UART_SetConfig+0x38c>)
 8005666:	fba3 1302 	umull	r1, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2164      	movs	r1, #100	; 0x64
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <UART_SetConfig+0x38c>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 020f 	and.w	r2, r3, #15
 8005684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4432      	add	r2, r6
 800568a:	609a      	str	r2, [r3, #8]
}
 800568c:	bf00      	nop
 800568e:	377c      	adds	r7, #124	; 0x7c
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	40011000 	.word	0x40011000
 800569c:	40011400 	.word	0x40011400
 80056a0:	51eb851f 	.word	0x51eb851f

080056a4 <__libc_init_array>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	4d0d      	ldr	r5, [pc, #52]	; (80056dc <__libc_init_array+0x38>)
 80056a8:	4c0d      	ldr	r4, [pc, #52]	; (80056e0 <__libc_init_array+0x3c>)
 80056aa:	1b64      	subs	r4, r4, r5
 80056ac:	10a4      	asrs	r4, r4, #2
 80056ae:	2600      	movs	r6, #0
 80056b0:	42a6      	cmp	r6, r4
 80056b2:	d109      	bne.n	80056c8 <__libc_init_array+0x24>
 80056b4:	4d0b      	ldr	r5, [pc, #44]	; (80056e4 <__libc_init_array+0x40>)
 80056b6:	4c0c      	ldr	r4, [pc, #48]	; (80056e8 <__libc_init_array+0x44>)
 80056b8:	f000 f820 	bl	80056fc <_init>
 80056bc:	1b64      	subs	r4, r4, r5
 80056be:	10a4      	asrs	r4, r4, #2
 80056c0:	2600      	movs	r6, #0
 80056c2:	42a6      	cmp	r6, r4
 80056c4:	d105      	bne.n	80056d2 <__libc_init_array+0x2e>
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056cc:	4798      	blx	r3
 80056ce:	3601      	adds	r6, #1
 80056d0:	e7ee      	b.n	80056b0 <__libc_init_array+0xc>
 80056d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d6:	4798      	blx	r3
 80056d8:	3601      	adds	r6, #1
 80056da:	e7f2      	b.n	80056c2 <__libc_init_array+0x1e>
 80056dc:	0800573c 	.word	0x0800573c
 80056e0:	0800573c 	.word	0x0800573c
 80056e4:	0800573c 	.word	0x0800573c
 80056e8:	08005740 	.word	0x08005740

080056ec <memset>:
 80056ec:	4402      	add	r2, r0
 80056ee:	4603      	mov	r3, r0
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d100      	bne.n	80056f6 <memset+0xa>
 80056f4:	4770      	bx	lr
 80056f6:	f803 1b01 	strb.w	r1, [r3], #1
 80056fa:	e7f9      	b.n	80056f0 <memset+0x4>

080056fc <_init>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr

08005708 <_fini>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr
