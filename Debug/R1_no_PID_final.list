
R1_no_PID_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae4  08005ae4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000010  08005afc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005afc  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001101c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f34  00000000  00000000  0003105c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00033f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b91  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011af6  00000000  00000000  0004c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d731  00000000  00000000  0005e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebbe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004300  00000000  00000000  000ebc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005aa4 	.word	0x08005aa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005aa4 	.word	0x08005aa4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_IC_CaptureCallback>:
int countLas = 0;
int LasDebounce = 0;

///////////////////////////////////////////////////////////////////////////////////////////
//encoder feedback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  //direction set

	if (htim == &htim1)  // if interrupt source is channel 1
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a4e      	ldr	r2, [pc, #312]	; (8000614 <HAL_TIM_IC_CaptureCallback+0x144>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d148      	bne.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
			{
		if (Is_First_Captured == 0)  // is the first value captured ?
 80004e0:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d10a      	bne.n	80004fe <HAL_TIM_IC_CaptureCallback+0x2e>
				{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture the first value
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f004 f952 	bl	8004794 <HAL_TIM_ReadCapturedValue>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a4a      	ldr	r2, [pc, #296]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80004f4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first value captured as true
 80004f6:	4b48      	ldr	r3, [pc, #288]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	e039      	b.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
		}

		else if (Is_First_Captured)  // if the first is captured
 80004fe:	4b46      	ldr	r3, [pc, #280]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d035      	beq.n	8000572 <HAL_TIM_IC_CaptureCallback+0xa2>
		{
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture second value
 8000506:	2100      	movs	r1, #0
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f004 f943 	bl	8004794 <HAL_TIM_ReadCapturedValue>
 800050e:	4603      	mov	r3, r0
 8000510:	4a43      	ldr	r2, [pc, #268]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000512:	6013      	str	r3, [r2, #0]

			if (IC_Value2 > IC_Value1) {
 8000514:	4b42      	ldr	r3, [pc, #264]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b40      	ldr	r3, [pc, #256]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d907      	bls.n	8000530 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Value2 - IC_Value1;  // calculate the difference
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b3d      	ldr	r3, [pc, #244]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	4a3e      	ldr	r2, [pc, #248]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e011      	b.n	8000554 <HAL_TIM_IC_CaptureCallback+0x84>
			}

			else if (IC_Value2 < IC_Value1) {
 8000530:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b39      	ldr	r3, [pc, #228]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d209      	bcs.n	8000550 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = ((0xffff - IC_Value1) + IC_Value2) + 1;
 800053c:	4b38      	ldr	r3, [pc, #224]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b36      	ldr	r3, [pc, #216]	; (800061c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800054a:	4a36      	ldr	r2, [pc, #216]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e001      	b.n	8000554 <HAL_TIM_IC_CaptureCallback+0x84>
			}

			else {
				Error_Handler();
 8000550:	f001 faf4 	bl	8001b3c <Error_Handler>
			}

			Frequency = HAL_RCC_GetPCLK2Freq() / (50 * Difference); // calculate frequency
 8000554:	f003 fab6 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8000558:	4602      	mov	r2, r0
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <HAL_TIM_IC_CaptureCallback+0x154>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2132      	movs	r1, #50	; 0x32
 8000560:	fb01 f303 	mul.w	r3, r1, r3
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <HAL_TIM_IC_CaptureCallback+0x158>)
 800056a:	6013      	str	r3, [r2, #0]

			Is_First_Captured = 0;  // reset the first captured
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <HAL_TIM_IC_CaptureCallback+0x148>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (htim == &htim2)  // if interrupt source is channel 1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a2d      	ldr	r2, [pc, #180]	; (800062c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d148      	bne.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
			{
		if (Is_First_Captured2 == 0)  // is the first value captured ?
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10a      	bne.n	8000598 <HAL_TIM_IC_CaptureCallback+0xc8>
				{
			IC_Value12 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture the first value
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f004 f905 	bl	8004794 <HAL_TIM_ReadCapturedValue>
 800058a:	4603      	mov	r3, r0
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 800058e:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 1;  // set the first value captured as true
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
			Frequency2 = HAL_RCC_GetPCLK2Freq() / (50 * Difference2); // calculate frequency

			Is_First_Captured2 = 0;  // reset the first captured
		}
	}
}
 8000596:	e039      	b.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
		else if (Is_First_Captured2)  // if the first is captured
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d035      	beq.n	800060c <HAL_TIM_IC_CaptureCallback+0x13c>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // capture second value
 80005a0:	2100      	movs	r1, #0
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f004 f8f6 	bl	8004794 <HAL_TIM_ReadCapturedValue>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005ac:	6013      	str	r3, [r2, #0]
			if (IC_Value22 > IC_Value12) {
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d907      	bls.n	80005ca <HAL_TIM_IC_CaptureCallback+0xfa>
				Difference2 = IC_Value2 - IC_Value12; // calculate the difference
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	e011      	b.n	80005ee <HAL_TIM_IC_CaptureCallback+0x11e>
			else if (IC_Value22 < IC_Value12) {
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d209      	bcs.n	80005ea <HAL_TIM_IC_CaptureCallback+0x11a>
				Difference2 = ((0xffff - IC_Value12) + IC_Value22) + 1;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_TIM_IC_CaptureCallback+0x168>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_TIM_IC_CaptureCallback+0x164>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e001      	b.n	80005ee <HAL_TIM_IC_CaptureCallback+0x11e>
				Error_Handler();
 80005ea:	f001 faa7 	bl	8001b3c <Error_Handler>
			Frequency2 = HAL_RCC_GetPCLK2Freq() / (50 * Difference2); // calculate frequency
 80005ee:	f003 fa69 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_TIM_IC_CaptureCallback+0x16c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2132      	movs	r1, #50	; 0x32
 80005fa:	fb01 f303 	mul.w	r3, r1, r3
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000604:	6013      	str	r3, [r2, #0]
			Is_First_Captured2 = 0;  // reset the first captured
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000080 	.word	0x20000080
 8000618:	2000032c 	.word	0x2000032c
 800061c:	2000031c 	.word	0x2000031c
 8000620:	20000320 	.word	0x20000320
 8000624:	20000324 	.word	0x20000324
 8000628:	20000328 	.word	0x20000328
 800062c:	200000c8 	.word	0x200000c8
 8000630:	20000340 	.word	0x20000340
 8000634:	20000330 	.word	0x20000330
 8000638:	20000334 	.word	0x20000334
 800063c:	20000338 	.word	0x20000338
 8000640:	2000033c 	.word	0x2000033c

08000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>:
	uint32_t right_chnl;
	uint16_t left_dir;
	uint16_t right_dir;
	uint16_t pwm;

	Loco(TIM_HandleTypeDef *leftm_tim, uint32_t leftm_channel,
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
			GPIO_TypeDef *left_port, uint16_t leftm_direction_pin,
			TIM_HandleTypeDef *rightm_tim, uint32_t rightm_channel,
			uint16_t rightm_direction_pin, GPIO_TypeDef *right_port,
			uint16_t pwmVal) {
		left_tim = leftm_tim;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	601a      	str	r2, [r3, #0]
		right_tim = rightm_tim;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	605a      	str	r2, [r3, #4]
		left_chnl = leftm_channel;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	609a      	str	r2, [r3, #8]
		right_chnl = rightm_channel;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	6a3a      	ldr	r2, [r7, #32]
 8000668:	615a      	str	r2, [r3, #20]
		left_dir = leftm_direction_pin;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	8b3a      	ldrh	r2, [r7, #24]
 800066e:	831a      	strh	r2, [r3, #24]
		right_dir = rightm_direction_pin;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000674:	835a      	strh	r2, [r3, #26]
		left_p = left_port;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	60da      	str	r2, [r3, #12]
		right_p = right_port;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000680:	611a      	str	r2, [r3, #16]
		pwm = pwmVal;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000686:	839a      	strh	r2, [r3, #28]
	}
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <_ZN4Loco7forwardEv>:

	void forward() {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	68d8      	ldr	r0, [r3, #12]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8b1b      	ldrh	r3, [r3, #24]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f002 fc79 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_SET);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6918      	ldr	r0, [r3, #16]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	8b5b      	ldrh	r3, [r3, #26]
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f002 fc71 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, pwm);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d106      	bne.n	80006d4 <_ZN4Loco7forwardEv+0x3e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8b9a      	ldrh	r2, [r3, #28]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e01b      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d106      	bne.n	80006ea <_ZN4Loco7forwardEv+0x54>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	8b9a      	ldrh	r2, [r3, #28]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
 80006e8:	e010      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	2b08      	cmp	r3, #8
 80006f0:	d106      	bne.n	8000700 <_ZN4Loco7forwardEv+0x6a>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8b9a      	ldrh	r2, [r3, #28]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80006fe:	e005      	b.n	800070c <_ZN4Loco7forwardEv+0x76>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	8b9a      	ldrh	r2, [r3, #28]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d106      	bne.n	8000722 <_ZN4Loco7forwardEv+0x8c>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	8b9a      	ldrh	r2, [r3, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000720:	e01b      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	2b04      	cmp	r3, #4
 8000728:	d106      	bne.n	8000738 <_ZN4Loco7forwardEv+0xa2>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8b9a      	ldrh	r2, [r3, #28]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000736:	e010      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d106      	bne.n	800074e <_ZN4Loco7forwardEv+0xb8>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	8b9a      	ldrh	r2, [r3, #28]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800074c:	e005      	b.n	800075a <_ZN4Loco7forwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8b9a      	ldrh	r2, [r3, #28]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN4Loco8backwardEv>:

	void backward() {
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_SET);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	8b1b      	ldrh	r3, [r3, #24]
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	f002 fc13 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6918      	ldr	r0, [r3, #16]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	8b5b      	ldrh	r3, [r3, #26]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	f002 fc0b 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, pwm);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d106      	bne.n	80007a0 <_ZN4Loco8backwardEv+0x3e>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8b9a      	ldrh	r2, [r3, #28]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
 800079e:	e01b      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d106      	bne.n	80007b6 <_ZN4Loco8backwardEv+0x54>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8b9a      	ldrh	r2, [r3, #28]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	639a      	str	r2, [r3, #56]	; 0x38
 80007b4:	e010      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d106      	bne.n	80007cc <_ZN4Loco8backwardEv+0x6a>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8b9a      	ldrh	r2, [r3, #28]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ca:	e005      	b.n	80007d8 <_ZN4Loco8backwardEv+0x76>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	8b9a      	ldrh	r2, [r3, #28]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <_ZN4Loco8backwardEv+0x8c>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	8b9a      	ldrh	r2, [r3, #28]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80007ec:	e01b      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d106      	bne.n	8000804 <_ZN4Loco8backwardEv+0xa2>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	8b9a      	ldrh	r2, [r3, #28]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000802:	e010      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	2b08      	cmp	r3, #8
 800080a:	d106      	bne.n	800081a <_ZN4Loco8backwardEv+0xb8>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	8b9a      	ldrh	r2, [r3, #28]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000818:	e005      	b.n	8000826 <_ZN4Loco8backwardEv+0xc4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, pwm);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8b9a      	ldrh	r2, [r3, #28]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZN4Loco4leftEv>:

	void left() {
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_SET);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	8b1b      	ldrh	r3, [r3, #24]
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	f002 fbad 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_SET);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6918      	ldr	r0, [r3, #16]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	8b5b      	ldrh	r3, [r3, #26]
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f002 fba5 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 50);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <_ZN4Loco4leftEv+0x3c>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2232      	movs	r2, #50	; 0x32
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
 8000868:	e018      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d105      	bne.n	800087e <_ZN4Loco4leftEv+0x50>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2232      	movs	r2, #50	; 0x32
 800087a:	639a      	str	r2, [r3, #56]	; 0x38
 800087c:	e00e      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2b08      	cmp	r3, #8
 8000884:	d105      	bne.n	8000892 <_ZN4Loco4leftEv+0x64>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2232      	movs	r2, #50	; 0x32
 800088e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000890:	e004      	b.n	800089c <_ZN4Loco4leftEv+0x6e>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2232      	movs	r2, #50	; 0x32
 800089a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <_ZN4Loco4leftEv+0x82>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80008ae:	e018      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d105      	bne.n	80008c4 <_ZN4Loco4leftEv+0x96>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2264      	movs	r2, #100	; 0x64
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80008c2:	e00e      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d105      	bne.n	80008d8 <_ZN4Loco4leftEv+0xaa>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80008d6:	e004      	b.n	80008e2 <_ZN4Loco4leftEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2264      	movs	r2, #100	; 0x64
 80008e0:	641a      	str	r2, [r3, #64]	; 0x40
	}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_ZN4Loco5rightEv>:

	void right() {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68d8      	ldr	r0, [r3, #12]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	8b1b      	ldrh	r3, [r3, #24]
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	f002 fb4f 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6918      	ldr	r0, [r3, #16]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	8b5b      	ldrh	r3, [r3, #26]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f002 fb47 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 200);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d105      	bne.n	8000926 <_ZN4Loco5rightEv+0x3c>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	22c8      	movs	r2, #200	; 0xc8
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
 8000924:	e018      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d105      	bne.n	800093a <_ZN4Loco5rightEv+0x50>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	22c8      	movs	r2, #200	; 0xc8
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
 8000938:	e00e      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b08      	cmp	r3, #8
 8000940:	d105      	bne.n	800094e <_ZN4Loco5rightEv+0x64>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	22c8      	movs	r2, #200	; 0xc8
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	e004      	b.n	8000958 <_ZN4Loco5rightEv+0x6e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	22c8      	movs	r2, #200	; 0xc8
 8000956:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <_ZN4Loco5rightEv+0x82>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800096a:	e018      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d105      	bne.n	8000980 <_ZN4Loco5rightEv+0x96>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2264      	movs	r2, #100	; 0x64
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
	}
 800097e:	e00e      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	2b08      	cmp	r3, #8
 8000986:	d105      	bne.n	8000994 <_ZN4Loco5rightEv+0xaa>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2264      	movs	r2, #100	; 0x64
 8000990:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000992:	e004      	b.n	800099e <_ZN4Loco5rightEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 100);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2264      	movs	r2, #100	; 0x64
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN4Loco4stopEv>:

	void stop() {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(left_p, left_dir, GPIO_PIN_RESET);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68d8      	ldr	r0, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8b1b      	ldrh	r3, [r3, #24]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f002 faf1 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(right_p, right_dir, GPIO_PIN_RESET);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6918      	ldr	r0, [r3, #16]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8b5b      	ldrh	r3, [r3, #26]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f002 fae9 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(left_tim, left_chnl, 0);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d105      	bne.n	80009e2 <_ZN4Loco4stopEv+0x3c>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	e018      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d105      	bne.n	80009f6 <_ZN4Loco4stopEv+0x50>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	639a      	str	r2, [r3, #56]	; 0x38
 80009f4:	e00e      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d105      	bne.n	8000a0a <_ZN4Loco4stopEv+0x64>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a08:	e004      	b.n	8000a14 <_ZN4Loco4stopEv+0x6e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <_ZN4Loco4stopEv+0x82>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000a26:	e018      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d105      	bne.n	8000a3c <_ZN4Loco4stopEv+0x96>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000a3a:	e00e      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d105      	bne.n	8000a50 <_ZN4Loco4stopEv+0xaa>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000a4e:	e004      	b.n	8000a5a <_ZN4Loco4stopEv+0xb4>
		__HAL_TIM_SET_COMPARE(right_tim, right_chnl, 0);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <_Z7stepperv>:
};

///////////////////////////////////////////////////////////////////////////////////////////////////
//utilities
void stepper() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <_Z7stepperv+0x3c>)
 8000a70:	f002 fa96 	bl	8002fa0 <HAL_GPIO_WritePin>
	while (stepperCount < 10) {
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <_Z7stepperv+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	dc04      	bgt.n	8000a86 <_Z7stepperv+0x22>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 50);
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <_Z7stepperv+0x44>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2232      	movs	r2, #50	; 0x32
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
	while (stepperCount < 10) {
 8000a84:	e7f6      	b.n	8000a74 <_Z7stepperv+0x10>
	}
	start_stepper = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <_Z7stepperv+0x48>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	stepperCount = 0;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <_Z7stepperv+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <_Z7stepperv+0x44>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	20000354 	.word	0x20000354
 8000aa8:	20000230 	.word	0x20000230
 8000aac:	20000348 	.word	0x20000348

08000ab0 <_Z5servov>:

void servo() {
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	//90 degree rotation
	if (countServo == 0 && debounce == 0) {
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <_Z5servov+0x58>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10e      	bne.n	8000ada <_Z5servov+0x2a>
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <_Z5servov+0x5c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <_Z5servov+0x2a>
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,50);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 125); // duty cycle is 2.5 ms
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <_Z5servov+0x60>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	227d      	movs	r2, #125	; 0x7d
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c
		countServo = 1;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <_Z5servov+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
		debounce = 5;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <_Z5servov+0x5c>)
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	601a      	str	r2, [r3, #0]
	} else if (countServo == 1 && debounce == 0) {
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 50);
		countServo = 0;
		debounce = 5;
	}
}
 8000ad8:	e011      	b.n	8000afe <_Z5servov+0x4e>
	} else if (countServo == 1 && debounce == 0) {
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <_Z5servov+0x58>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10d      	bne.n	8000afe <_Z5servov+0x4e>
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <_Z5servov+0x5c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d109      	bne.n	8000afe <_Z5servov+0x4e>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 50);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <_Z5servov+0x60>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2232      	movs	r2, #50	; 0x32
 8000af0:	63da      	str	r2, [r3, #60]	; 0x3c
		countServo = 0;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_Z5servov+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		debounce = 5;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <_Z5servov+0x5c>)
 8000afa:	2205      	movs	r2, #5
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	2000034c 	.word	0x2000034c
 8000b0c:	20000350 	.word	0x20000350
 8000b10:	200001a0 	.word	0x200001a0

08000b14 <_Z12passingMotorv>:

void passingMotor() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	if (passMotor == 0 && passDebounce == 0) {
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d114      	bne.n	8000b4a <_Z12passingMotorv+0x36>
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d110      	bne.n	8000b4a <_Z12passingMotorv+0x36>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <_Z12passingMotorv+0x74>)
 8000b30:	f002 fa36 	bl	8002fa0 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 50);
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <_Z12passingMotorv+0x78>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2232      	movs	r2, #50	; 0x32
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
		passMotor = 1;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
		passDebounce = 5;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b44:	2205      	movs	r2, #5
 8000b46:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
		passMotor = 0;
		passDebounce = 5;
	}
}
 8000b48:	e017      	b.n	8000b7a <_Z12passingMotorv+0x66>
	} else if (passMotor == 1 && passDebounce == 0) {
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d113      	bne.n	8000b7a <_Z12passingMotorv+0x66>
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10f      	bne.n	8000b7a <_Z12passingMotorv+0x66>
		HAL_GPIO_WritePin(GPIOD, PassingMotor_DIR_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <_Z12passingMotorv+0x74>)
 8000b62:	f002 fa1d 	bl	8002fa0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <_Z12passingMotorv+0x78>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	63da      	str	r2, [r3, #60]	; 0x3c
		passMotor = 0;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <_Z12passingMotorv+0x6c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
		passDebounce = 5;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <_Z12passingMotorv+0x70>)
 8000b76:	2205      	movs	r2, #5
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000370 	.word	0x20000370
 8000b84:	20000374 	.word	0x20000374
 8000b88:	40020c00 	.word	0x40020c00
 8000b8c:	20000158 	.word	0x20000158

08000b90 <_Z5laserv>:

void laser() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if (laserr == 0 && laserDebounce == 0) {
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_Z5laserv+0x5c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d110      	bne.n	8000bbe <_Z5laserv+0x2e>
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <_Z5laserv+0x60>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <_Z5laserv+0x2e>
		HAL_GPIO_WritePin(GPIOB, laser1_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <_Z5laserv+0x64>)
 8000bac:	f002 f9f8 	bl	8002fa0 <HAL_GPIO_WritePin>

		laserr = 1;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <_Z5laserv+0x5c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
		laserDebounce = 5;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <_Z5laserv+0x60>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	601a      	str	r2, [r3, #0]

		laserr = 0;
		laserDebounce = 5;
	}

}
 8000bbc:	e013      	b.n	8000be6 <_Z5laserv+0x56>
	} else if (laserr == 1 && laserDebounce == 0) {
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <_Z5laserv+0x5c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d10f      	bne.n	8000be6 <_Z5laserv+0x56>
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <_Z5laserv+0x60>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10b      	bne.n	8000be6 <_Z5laserv+0x56>
		HAL_GPIO_WritePin(GPIOB, laser1_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <_Z5laserv+0x64>)
 8000bd6:	f002 f9e3 	bl	8002fa0 <HAL_GPIO_WritePin>
		laserr = 0;
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <_Z5laserv+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		laserDebounce = 5;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <_Z5laserv+0x60>)
 8000be2:	2205      	movs	r2, #5
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000368 	.word	0x20000368
 8000bf0:	2000036c 	.word	0x2000036c
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <_Z13VerticalMotori>:

void VerticalMotor(int dir) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if (dir == 0 && dir1 == 0 && linearDebounce == 0) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d118      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d114      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d110      	bne.n	8000c38 <_Z13VerticalMotori+0x40>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c1c:	f002 f9c0 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	482d      	ldr	r0, [pc, #180]	; (8000cdc <_Z13VerticalMotori+0xe4>)
 8000c26:	f002 f9bb 	bl	8002fa0 <HAL_GPIO_WritePin>
		dir1 = 1;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c32:	2205      	movs	r2, #5
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e015      	b.n	8000c64 <_Z13VerticalMotori+0x6c>
	} else if (dir == 0 && dir1 == 1 && linearDebounce == 0) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d112      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d10e      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10a      	bne.n	8000c64 <_Z13VerticalMotori+0x6c>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4821      	ldr	r0, [pc, #132]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c54:	f002 f9a4 	bl	8002fa0 <HAL_GPIO_WritePin>
		dir1 = 0;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <_Z13VerticalMotori+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c60:	2205      	movs	r2, #5
 8000c62:	601a      	str	r2, [r3, #0]
	}
	if (dir == 1 && dir2 == 0 && linearDebounce == 0) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d118      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d114      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d110      	bne.n	8000c9c <_Z13VerticalMotori+0xa4>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000c80:	f002 f98e 	bl	8002fa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LinearActuator_dir_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2120      	movs	r1, #32
 8000c88:	4814      	ldr	r0, [pc, #80]	; (8000cdc <_Z13VerticalMotori+0xe4>)
 8000c8a:	f002 f989 	bl	8002fa0 <HAL_GPIO_WritePin>
		dir2 = 1;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000c96:	2205      	movs	r2, #5
 8000c98:	601a      	str	r2, [r3, #0]

		dir2 = 0;
		linearDebounce = 5;
	}

}
 8000c9a:	e015      	b.n	8000cc8 <_Z13VerticalMotori+0xd0>
	} else if (dir == 1 && dir2 == 1 && linearDebounce == 0) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d112      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d10e      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10a      	bne.n	8000cc8 <_Z13VerticalMotori+0xd0>
		HAL_GPIO_WritePin(GPIOA, LinearActuator_en_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <_Z13VerticalMotori+0xe0>)
 8000cb8:	f002 f972 	bl	8002fa0 <HAL_GPIO_WritePin>
		dir2 = 0;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_Z13VerticalMotori+0xe8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
		linearDebounce = 5;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <_Z13VerticalMotori+0xdc>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000360 	.word	0x20000360
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	20000364 	.word	0x20000364

08000ce4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b096      	sub	sp, #88	; 0x58
 8000ce8:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cea:	f001 fae1 	bl	80022b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cee:	f000 f9ab 	bl	8001048 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cf2:	f000 fe03 	bl	80018fc <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000cf6:	f000 fde1 	bl	80018bc <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 8000cfa:	f000 fdb1 	bl	8001860 <_ZL19MX_USART1_UART_Initv>
	MX_TIM2_Init();
 8000cfe:	f000 fad5 	bl	80012ac <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 8000d02:	f000 fbc3 	bl	800148c <_ZL12MX_TIM4_Initv>
	MX_TIM1_Init();
 8000d06:	f000 fa45 	bl	8001194 <_ZL12MX_TIM1_Initv>
	MX_TIM9_Init();
 8000d0a:	f000 fd07 	bl	800171c <_ZL12MX_TIM9_Initv>
	MX_TIM5_Init();
 8000d0e:	f000 fc55 	bl	80015bc <_ZL12MX_TIM5_Initv>
	MX_TIM10_Init();
 8000d12:	f000 fd47 	bl	80017a4 <_ZL13MX_TIM10_Initv>
	MX_TIM3_Init();
 8000d16:	f000 fb51 	bl	80013bc <_ZL12MX_TIM3_Initv>
	MX_I2C2_Init();
 8000d1a:	f000 fa07 	bl	800112c <_ZL12MX_I2C2_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Locomotion
 8000d1e:	2100      	movs	r1, #0
 8000d20:	48a9      	ldr	r0, [pc, #676]	; (8000fc8 <main+0x2e4>)
 8000d22:	f002 ffe5 	bl	8003cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Locomotion
 8000d26:	2104      	movs	r1, #4
 8000d28:	48a7      	ldr	r0, [pc, #668]	; (8000fc8 <main+0x2e4>)
 8000d2a:	f002 ffe1 	bl	8003cf0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //Passing
 8000d2e:	2108      	movs	r1, #8
 8000d30:	48a5      	ldr	r0, [pc, #660]	; (8000fc8 <main+0x2e4>)
 8000d32:	f002 ffdd 	bl	8003cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Lifting
 8000d36:	210c      	movs	r1, #12
 8000d38:	48a3      	ldr	r0, [pc, #652]	; (8000fc8 <main+0x2e4>)
 8000d3a:	f002 ffd9 	bl	8003cf0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1); //BLDC1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	48a2      	ldr	r0, [pc, #648]	; (8000fcc <main+0x2e8>)
 8000d42:	f002 ffd5 	bl	8003cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2); //BLDC2
 8000d46:	2104      	movs	r1, #4
 8000d48:	48a0      	ldr	r0, [pc, #640]	; (8000fcc <main+0x2e8>)
 8000d4a:	f002 ffd1 	bl	8003cf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //Servo
 8000d4e:	2108      	movs	r1, #8
 8000d50:	489e      	ldr	r0, [pc, #632]	; (8000fcc <main+0x2e8>)
 8000d52:	f002 ffcd 	bl	8003cf0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1); //Stepper
 8000d56:	2100      	movs	r1, #0
 8000d58:	489d      	ldr	r0, [pc, #628]	; (8000fd0 <main+0x2ec>)
 8000d5a:	f002 ffc9 	bl	8003cf0 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); //Encoder
 8000d5e:	2100      	movs	r1, #0
 8000d60:	489c      	ldr	r0, [pc, #624]	; (8000fd4 <main+0x2f0>)
 8000d62:	f003 f8cf 	bl	8003f04 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d66:	2100      	movs	r1, #0
 8000d68:	489b      	ldr	r0, [pc, #620]	; (8000fd8 <main+0x2f4>)
 8000d6a:	f003 f8cb 	bl	8003f04 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim9);
 8000d6e:	489b      	ldr	r0, [pc, #620]	; (8000fdc <main+0x2f8>)
 8000d70:	f002 ff0c 	bl	8003b8c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) rxData, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	499a      	ldr	r1, [pc, #616]	; (8000fe0 <main+0x2fc>)
 8000d78:	489a      	ldr	r0, [pc, #616]	; (8000fe4 <main+0x300>)
 8000d7a:	f004 fa26 	bl	80051ca <HAL_UART_Receive_DMA>
	Loco low = Loco(&htim4, TIM_CHANNEL_1, GPIOD, LOCO_DIR1_Pin, &htim4,
	TIM_CHANNEL_2, LOCO_DIR2_Pin, GPIOD, 60);
 8000d7e:	f107 0020 	add.w	r0, r7, #32
 8000d82:	233c      	movs	r3, #60	; 0x3c
 8000d84:	9305      	str	r3, [sp, #20]
 8000d86:	4b98      	ldr	r3, [pc, #608]	; (8000fe8 <main+0x304>)
 8000d88:	9304      	str	r3, [sp, #16]
 8000d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8e:	9303      	str	r3, [sp, #12]
 8000d90:	2304      	movs	r3, #4
 8000d92:	9302      	str	r3, [sp, #8]
 8000d94:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <main+0x2e4>)
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	4b92      	ldr	r3, [pc, #584]	; (8000fe8 <main+0x304>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4989      	ldr	r1, [pc, #548]	; (8000fc8 <main+0x2e4>)
 8000da4:	f7ff fc4e 	bl	8000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>
	Loco high = Loco(&htim4, TIM_CHANNEL_1, GPIOD, LOCO_DIR1_Pin, &htim4,
	TIM_CHANNEL_2, LOCO_DIR2_Pin, GPIOD, 80);
 8000da8:	4638      	mov	r0, r7
 8000daa:	2350      	movs	r3, #80	; 0x50
 8000dac:	9305      	str	r3, [sp, #20]
 8000dae:	4b8e      	ldr	r3, [pc, #568]	; (8000fe8 <main+0x304>)
 8000db0:	9304      	str	r3, [sp, #16]
 8000db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	2304      	movs	r3, #4
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <main+0x2e4>)
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <main+0x304>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	497f      	ldr	r1, [pc, #508]	; (8000fc8 <main+0x2e4>)
 8000dcc:	f7ff fc3a 	bl	8000644 <_ZN4LocoC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS1_mtS3_t>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 50);
 8000dd0:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <main+0x2e4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2232      	movs	r2, #50	; 0x32
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0); //bldc default 030:94:35:32:df:3e
 8000dd8:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <main+0x2e8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000de0:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <main+0x2e8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
	////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8000de8:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <main+0x2ec>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


		if (rxData[0] == 13 && laserDebounce == 0) {
 8000df0:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <main+0x2fc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b0d      	cmp	r3, #13
 8000df6:	d105      	bne.n	8000e04 <main+0x120>
 8000df8:	4b7c      	ldr	r3, [pc, #496]	; (8000fec <main+0x308>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <main+0x120>
			laser();
 8000e00:	f7ff fec6 	bl	8000b90 <_Z5laserv>

		}
		if (rxData[0] == 1) //up//Button Up
 8000e04:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <main+0x2fc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d105      	bne.n	8000e18 <main+0x134>
				{
			low.forward();
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fc40 	bl	8000696 <_ZN4Loco7forwardEv>
 8000e16:	e7eb      	b.n	8000df0 <main+0x10c>
		}

		//Down // Button Down
		else if (rxData[0] == 2) {
 8000e18:	4b71      	ldr	r3, [pc, #452]	; (8000fe0 <main+0x2fc>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d105      	bne.n	8000e2c <main+0x148>
			low.backward();
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fc9c 	bl	8000762 <_ZN4Loco8backwardEv>
 8000e2a:	e7e1      	b.n	8000df0 <main+0x10c>
		}

		//left // Button Left
		else if (rxData[0] == 3) {
 8000e2c:	4b6c      	ldr	r3, [pc, #432]	; (8000fe0 <main+0x2fc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d105      	bne.n	8000e40 <main+0x15c>
			low.left();
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fcf8 	bl	800082e <_ZN4Loco4leftEv>
 8000e3e:	e7d7      	b.n	8000df0 <main+0x10c>
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 50);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 30);
		}

		//right // Button Rights
		else if (rxData[0] == 4) {
 8000e40:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <main+0x2fc>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d105      	bne.n	8000e54 <main+0x170>
			low.right();
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fd4c 	bl	80008ea <_ZN4Loco5rightEv>
 8000e52:	e7cd      	b.n	8000df0 <main+0x10c>
			//			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
			//					HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 30);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 50);
		} else if (rxData[0] == 14) //up//Button Up
 8000e54:	4b62      	ldr	r3, [pc, #392]	; (8000fe0 <main+0x2fc>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b0e      	cmp	r3, #14
 8000e5a:	d104      	bne.n	8000e66 <main+0x182>
				{
			high.forward();
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc19 	bl	8000696 <_ZN4Loco7forwardEv>
 8000e64:	e7c4      	b.n	8000df0 <main+0x10c>
		}

		//Down // Button Down
		else if (rxData[0] == 16) {
 8000e66:	4b5e      	ldr	r3, [pc, #376]	; (8000fe0 <main+0x2fc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b10      	cmp	r3, #16
 8000e6c:	d104      	bne.n	8000e78 <main+0x194>
			high.backward();
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc76 	bl	8000762 <_ZN4Loco8backwardEv>
 8000e76:	e7bb      	b.n	8000df0 <main+0x10c>
		}

		//left // Button Left
		else if (rxData[0] == 20) {
 8000e78:	4b59      	ldr	r3, [pc, #356]	; (8000fe0 <main+0x2fc>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b14      	cmp	r3, #20
 8000e7e:	d104      	bne.n	8000e8a <main+0x1a6>
			high.left();
 8000e80:	463b      	mov	r3, r7
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fcd3 	bl	800082e <_ZN4Loco4leftEv>
 8000e88:	e7b2      	b.n	8000df0 <main+0x10c>
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 80);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 50);
		}

		//right // Button Rights
		else if (rxData[0] == 18) {
 8000e8a:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <main+0x2fc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d104      	bne.n	8000e9c <main+0x1b8>
			high.right();
 8000e92:	463b      	mov	r3, r7
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fd28 	bl	80008ea <_ZN4Loco5rightEv>
 8000e9a:	e7a9      	b.n	8000df0 <main+0x10c>
			//			HAL_GPIO_WritePin(GPIOD, LOCO_DIR1_Pin, GPIO_PIN_SET);
			//					HAL_GPIO_WritePin(GPIOD, LOCO_DIR2_Pin, GPIO_PIN_SET);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 50);
			//					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 80);
		} else if (rxData[0] == 15) //up//Button Up
 8000e9c:	4b50      	ldr	r3, [pc, #320]	; (8000fe0 <main+0x2fc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d105      	bne.n	8000eb0 <main+0x1cc>
				{
			low.forward();
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fbf4 	bl	8000696 <_ZN4Loco7forwardEv>
 8000eae:	e79f      	b.n	8000df0 <main+0x10c>
		}

		//Down // Button Down
		else if (rxData[0] == 17) {
 8000eb0:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <main+0x2fc>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b11      	cmp	r3, #17
 8000eb6:	d105      	bne.n	8000ec4 <main+0x1e0>
			low.backward();
 8000eb8:	f107 0320 	add.w	r3, r7, #32
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc50 	bl	8000762 <_ZN4Loco8backwardEv>
 8000ec2:	e795      	b.n	8000df0 <main+0x10c>
		}

		//left // Button Left
		else if (rxData[0] == 21) {
 8000ec4:	4b46      	ldr	r3, [pc, #280]	; (8000fe0 <main+0x2fc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b15      	cmp	r3, #21
 8000eca:	d105      	bne.n	8000ed8 <main+0x1f4>
			low.left();
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fcac 	bl	800082e <_ZN4Loco4leftEv>
 8000ed6:	e78b      	b.n	8000df0 <main+0x10c>
		}

		//right // Button Rights
		else if (rxData[0] == 19) {
 8000ed8:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <main+0x2fc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b13      	cmp	r3, #19
 8000ede:	d105      	bne.n	8000eec <main+0x208>
			low.right();
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd00 	bl	80008ea <_ZN4Loco5rightEv>
 8000eea:	e781      	b.n	8000df0 <main+0x10c>
		}
		//PASSING //Button Square
		else if (rxData[0] == 5) {
 8000eec:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <main+0x2fc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d102      	bne.n	8000efa <main+0x216>
			//Passing on
			passingMotor();
 8000ef4:	f7ff fe0e 	bl	8000b14 <_Z12passingMotorv>
 8000ef8:	e77a      	b.n	8000df0 <main+0x10c>

		}

		//toggle servo//Button Circle
		else if (rxData[0] == 6) {
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <main+0x2fc>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d102      	bne.n	8000f08 <main+0x224>
			servo();
 8000f02:	f7ff fdd5 	bl	8000ab0 <_Z5servov>
 8000f06:	e773      	b.n	8000df0 <main+0x10c>

		}

		//toggle linear actuator down  //Button L1
		else if (rxData[0] == 7) {
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <main+0x2fc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b07      	cmp	r3, #7
 8000f0e:	d105      	bne.n	8000f1c <main+0x238>
			start_stepper = 1;
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <main+0x30c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
			stepper();
 8000f16:	f7ff fda5 	bl	8000a64 <_Z7stepperv>
 8000f1a:	e769      	b.n	8000df0 <main+0x10c>

		}

		//toggle linear actuator up	  //Button R1
		else if (rxData[0] == 9) { //&& !HAL_GPIO_ReadPin(GPIOE, Limit_switch_input_Pin) {
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <main+0x2fc>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	d103      	bne.n	8000f2c <main+0x248>
			VerticalMotor(1);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fe67 	bl	8000bf8 <_Z13VerticalMotori>
 8000f2a:	e761      	b.n	8000df0 <main+0x10c>
		}

		//BLDC ON //Button L2
		else if (rxData[0] == 8) {
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <main+0x2fc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d131      	bne.n	8000f98 <main+0x2b4>

			if (countBldc == 0 && bldcDebounce == 0) {
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <main+0x310>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d114      	bne.n	8000f66 <main+0x282>
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <main+0x314>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d110      	bne.n	8000f66 <main+0x282>

				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 800);
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <main+0x2e8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 800);
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <main+0x2e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38

				countBldc = 1;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <main+0x310>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <main+0x314>)
 8000f60:	2205      	movs	r2, #5
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e066      	b.n	8001034 <main+0x350>
			} else if (countBldc == 1 && bldcDebounce == 0) {
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <main+0x310>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	f47f af40 	bne.w	8000df0 <main+0x10c>
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <main+0x314>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f af3b 	bne.w	8000df0 <main+0x10c>
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 0);
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <main+0x2e8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <main+0x2e8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
				countBldc = 0;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <main+0x310>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
				bldcDebounce = 5;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <main+0x314>)
 8000f92:	2205      	movs	r2, #5
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e72b      	b.n	8000df0 <main+0x10c>
			}

		}

		// Stepper 90 deg//Button R2
		else if (rxData[0] == 10) {
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <main+0x2fc>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d103      	bne.n	8000fa8 <main+0x2c4>
			VerticalMotor(0);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fe29 	bl	8000bf8 <_Z13VerticalMotori>
 8000fa6:	e723      	b.n	8000df0 <main+0x10c>
		}
		//Lifting Up //Button Triangle
		else if (rxData[0] == 11) { // && !HAL_GPIO_ReadPin(GPIOE, Limit_switch_input1_Pin)) {
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <main+0x2fc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0b      	cmp	r3, #11
 8000fae:	d125      	bne.n	8000ffc <main+0x318>
			HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <main+0x304>)
 8000fb8:	f001 fff2 	bl	8002fa0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 70);
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <main+0x2e4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2246      	movs	r2, #70	; 0x46
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc4:	e714      	b.n	8000df0 <main+0x10c>
 8000fc6:	bf00      	nop
 8000fc8:	20000158 	.word	0x20000158
 8000fcc:	200001a0 	.word	0x200001a0
 8000fd0:	20000230 	.word	0x20000230
 8000fd4:	20000080 	.word	0x20000080
 8000fd8:	200000c8 	.word	0x200000c8
 8000fdc:	200001e8 	.word	0x200001e8
 8000fe0:	20000344 	.word	0x20000344
 8000fe4:	20000278 	.word	0x20000278
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	2000036c 	.word	0x2000036c
 8000ff0:	20000348 	.word	0x20000348
 8000ff4:	20000358 	.word	0x20000358
 8000ff8:	2000035c 	.word	0x2000035c
		}
		//Lifting Down// Button Cross
		else if (rxData[0] == 12) { // && !HAL_GPIO_ReadPin(GPIOE, Liimit_switch_input2_Pin)) {
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <main+0x354>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d10a      	bne.n	800101a <main+0x336>
			HAL_GPIO_WritePin(GPIOD, LiftingMotor_DIR_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <main+0x358>)
 800100c:	f001 ffc8 	bl	8002fa0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 70);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <main+0x35c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2246      	movs	r2, #70	; 0x46
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
 8001018:	e6ea      	b.n	8000df0 <main+0x10c>

		} else {
			low.stop();
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fcc1 	bl	80009a6 <_ZN4Loco4stopEv>
			//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
			//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); //lifting 0
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <main+0x35c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0); //stepper to zero
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <main+0x360>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
		if (rxData[0] == 13 && laserDebounce == 0) {
 8001034:	e6dc      	b.n	8000df0 <main+0x10c>
 8001036:	bf00      	nop
 8001038:	20000344 	.word	0x20000344
 800103c:	40020c00 	.word	0x40020c00
 8001040:	20000158 	.word	0x20000158
 8001044:	20000230 	.word	0x20000230

08001048 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	; 0x50
 800104c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2230      	movs	r2, #48	; 0x30
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fd1c 	bl	8005a94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <_Z18SystemClock_Configv+0xdc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a2b      	ldr	r2, [pc, #172]	; (8001124 <_Z18SystemClock_Configv+0xdc>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <_Z18SystemClock_Configv+0xdc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <_Z18SystemClock_Configv+0xe0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a25      	ldr	r2, [pc, #148]	; (8001128 <_Z18SystemClock_Configv+0xe0>)
 8001092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <_Z18SystemClock_Configv+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80010bc:	2332      	movs	r3, #50	; 0x32
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 f8c5 	bl	800325c <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 80010e2:	f000 fd2b 	bl	8001b3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2302      	movs	r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb23 	bl	800374c <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_Z18SystemClock_Configv+0xd2>
		Error_Handler();
 8001116:	f000 fd11 	bl	8001b3c <Error_Handler>
	}
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <_ZL12MX_I2C2_Initv>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <_ZL12MX_I2C2_Initv+0x60>)
 8001134:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001138:	4a15      	ldr	r2, [pc, #84]	; (8001190 <_ZL12MX_I2C2_Initv+0x64>)
 800113a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <_ZL12MX_I2C2_Initv+0x5c>)
 800116a:	f001 ff33 	bl	8002fd4 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf14      	ite	ne
 8001174:	2301      	movne	r3, #1
 8001176:	2300      	moveq	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_ZL12MX_I2C2_Initv+0x56>
		Error_Handler();
 800117e:	f000 fcdd 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000002c 	.word	0x2000002c
 800118c:	40005800 	.word	0x40005800
 8001190:	000186a0 	.word	0x000186a0

08001194 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <_ZL12MX_TIM1_Initv+0x114>)
 80011c2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ea:	482e      	ldr	r0, [pc, #184]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 80011ec:	f002 fc7e 	bl	8003aec <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZL12MX_TIM1_Initv+0x70>
		Error_Handler();
 8001200:	f000 fc9c 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4619      	mov	r1, r3
 8001210:	4824      	ldr	r0, [pc, #144]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 8001212:	f003 f9f7 	bl	8004604 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <_ZL12MX_TIM1_Initv+0x96>
		Error_Handler();
 8001226:	f000 fc89 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 800122a:	481e      	ldr	r0, [pc, #120]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 800122c:	f002 fe10 	bl	8003e50 <HAL_TIM_IC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <_ZL12MX_TIM1_Initv+0xb0>
		Error_Handler();
 8001240:	f000 fc7c 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 8001254:	f003 feea 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
			!= HAL_OK) {
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf14      	ite	ne
 800125e:	2301      	movne	r3, #1
 8001260:	2300      	moveq	r3, #0
 8001262:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <_ZL12MX_TIM1_Initv+0xd8>
		Error_Handler();
 8001268:	f000 fc68 	bl	8001b3c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <_ZL12MX_TIM1_Initv+0x110>)
 8001284:	f003 f860 	bl	8004348 <HAL_TIM_IC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_ZL12MX_TIM1_Initv+0x108>
		Error_Handler();
 8001298:	f000 fc50 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000080 	.word	0x20000080
 80012a8:	40010000 	.word	0x40010000

080012ac <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012dc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 8001300:	f002 fbf4 	bl	8003aec <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <_ZL12MX_TIM2_Initv+0x6c>
		Error_Handler();
 8001314:	f000 fc12 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4619      	mov	r1, r3
 8001324:	4824      	ldr	r0, [pc, #144]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 8001326:	f003 f96d 	bl	8004604 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <_ZL12MX_TIM2_Initv+0x92>
		Error_Handler();
 800133a:	f000 fbff 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 8001340:	f002 fd86 	bl	8003e50 <HAL_TIM_IC_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 8001354:	f000 fbf2 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 8001368:	f003 fe60 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf14      	ite	ne
 8001372:	2301      	movne	r3, #1
 8001374:	2300      	moveq	r3, #0
 8001376:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <_ZL12MX_TIM2_Initv+0xd4>
		Error_Handler();
 800137c:	f000 fbde 	bl	8001b3c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001384:	2301      	movs	r3, #1
 8001386:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <_ZL12MX_TIM2_Initv+0x10c>)
 8001398:	f002 ffd6 	bl	8004348 <HAL_TIM_IC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <_ZL12MX_TIM2_Initv+0x104>
		Error_Handler();
 80013ac:	f000 fbc6 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000c8 	.word	0x200000c8

080013bc <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 80013e0:	4a29      	ldr	r2, [pc, #164]	; (8001488 <_ZL12MX_TIM3_Initv+0xcc>)
 80013e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 80013f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001404:	481f      	ldr	r0, [pc, #124]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 8001406:	f002 fc23 	bl	8003c50 <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf14      	ite	ne
 8001410:	2301      	movne	r3, #1
 8001412:	2300      	moveq	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <_ZL12MX_TIM3_Initv+0x62>
		Error_Handler();
 800141a:	f000 fb8f 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	4619      	mov	r1, r3
 800142c:	4815      	ldr	r0, [pc, #84]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 800142e:	f003 fdfd 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_ZL12MX_TIM3_Initv+0x8a>
		Error_Handler();
 8001442:	f000 fb7b 	bl	8001b3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 800145e:	f003 f80f 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <_ZL12MX_TIM3_Initv+0xba>
		Error_Handler();
 8001472:	f000 fb63 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <_ZL12MX_TIM3_Initv+0xc8>)
 8001478:	f000 fd1a 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000110 	.word	0x20000110
 8001488:	40000400 	.word	0x40000400

0800148c <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014b0:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <_ZL12MX_TIM4_Initv+0x12c>)
 80014b2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000;
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ba:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100;
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014c4:	2264      	movs	r2, #100	; 0x64
 80014c6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80014d4:	4837      	ldr	r0, [pc, #220]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014d6:	f002 fbbb 	bl	8003c50 <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <_ZL12MX_TIM4_Initv+0x62>
		Error_Handler();
 80014ea:	f000 fb27 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4619      	mov	r1, r3
 80014fc:	482d      	ldr	r0, [pc, #180]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80014fe:	f003 fd95 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf14      	ite	ne
 8001508:	2301      	movne	r3, #1
 800150a:	2300      	moveq	r3, #0
 800150c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <_ZL12MX_TIM4_Initv+0x8a>
		Error_Handler();
 8001512:	f000 fb13 	bl	8001b3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	; 0x60
 8001518:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	4821      	ldr	r0, [pc, #132]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 800152e:	f002 ffa7 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <_ZL12MX_TIM4_Initv+0xba>
		Error_Handler();
 8001542:	f000 fafb 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2204      	movs	r2, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4819      	ldr	r0, [pc, #100]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 800154e:	f002 ff97 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf14      	ite	ne
 8001558:	2301      	movne	r3, #1
 800155a:	2300      	moveq	r3, #0
 800155c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <_ZL12MX_TIM4_Initv+0xda>
		Error_Handler();
 8001562:	f000 faeb 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2208      	movs	r2, #8
 800156a:	4619      	mov	r1, r3
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 800156e:	f002 ff87 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <_ZL12MX_TIM4_Initv+0xfa>
		Error_Handler();
 8001582:	f000 fadb 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	220c      	movs	r2, #12
 800158a:	4619      	mov	r1, r3
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 800158e:	f002 ff77 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf14      	ite	ne
 8001598:	2301      	movne	r3, #1
 800159a:	2300      	moveq	r3, #0
 800159c:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <_ZL12MX_TIM4_Initv+0x11a>
		Error_Handler();
 80015a2:	f000 facb 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <_ZL12MX_TIM4_Initv+0x128>)
 80015a8:	f000 fc82 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000158 	.word	0x20000158
 80015b8:	40000800 	.word	0x40000800

080015bc <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80015ec:	4b49      	ldr	r3, [pc, #292]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80015ee:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <_ZL12MX_TIM5_Initv+0x15c>)
 80015f0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 1000 - 1;
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80015f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1000 - 1;
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 8001602:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001606:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001614:	483f      	ldr	r0, [pc, #252]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 8001616:	f002 fa69 	bl	8003aec <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <_ZL12MX_TIM5_Initv+0x72>
		Error_Handler();
 800162a:	f000 fa87 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001638:	4619      	mov	r1, r3
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 800163c:	f002 ffe2 	bl	8004604 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <_ZL12MX_TIM5_Initv+0x98>
		Error_Handler();
 8001650:	f000 fa74 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001654:	482f      	ldr	r0, [pc, #188]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 8001656:	f002 fafb 	bl	8003c50 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <_ZL12MX_TIM5_Initv+0xb2>
		Error_Handler();
 800166a:	f000 fa67 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4619      	mov	r1, r3
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 800167e:	f003 fcd5 	bl	800502c <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <_ZL12MX_TIM5_Initv+0xda>
		Error_Handler();
 8001692:	f000 fa53 	bl	8001b3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80016ae:	f002 fee7 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <_ZL12MX_TIM5_Initv+0x10a>
		Error_Handler();
 80016c2:	f000 fa3b 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2204      	movs	r2, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80016ce:	f002 fed7 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 80016d2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <_ZL12MX_TIM5_Initv+0x12a>
		Error_Handler();
 80016e2:	f000 fa2b 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2208      	movs	r2, #8
 80016ea:	4619      	mov	r1, r3
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 80016ee:	f002 fec7 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <_ZL12MX_TIM5_Initv+0x14a>
		Error_Handler();
 8001702:	f000 fa1b 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <_ZL12MX_TIM5_Initv+0x158>)
 8001708:	f000 fbd2 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200001a0 	.word	0x200001a0
 8001718:	40000c00 	.word	0x40000c00

0800171c <_ZL12MX_TIM9_Initv>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <_ZL12MX_TIM9_Initv+0x84>)
 8001732:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 50000 - 1;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 8001736:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800173a:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 100;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 8001744:	2264      	movs	r2, #100	; 0x64
 8001746:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 8001756:	f002 f9c9 	bl	8003aec <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <_ZL12MX_TIM9_Initv+0x52>
		Error_Handler();
 800176a:	f000 f9e7 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <_ZL12MX_TIM9_Initv+0x80>)
 800177a:	f002 ff43 	bl	8004604 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf14      	ite	ne
 8001784:	2301      	movne	r3, #1
 8001786:	2300      	moveq	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <_ZL12MX_TIM9_Initv+0x76>
		Error_Handler();
 800178e:	f000 f9d5 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001e8 	.word	0x200001e8
 80017a0:	40014000 	.word	0x40014000

080017a4 <_ZL13MX_TIM10_Initv>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017be:	4a27      	ldr	r2, [pc, #156]	; (800185c <_ZL13MX_TIM10_Initv+0xb8>)
 80017c0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1000 - 1;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c8:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000 - 1;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d6:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 80017e6:	f002 f981 	bl	8003aec <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <_ZL13MX_TIM10_Initv+0x5a>
		Error_Handler();
 80017fa:	f000 f99f 	bl	8001b3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 8001800:	f002 fa26 	bl	8003c50 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_ZL13MX_TIM10_Initv+0x74>
		Error_Handler();
 8001814:	f000 f992 	bl	8001b3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001818:	2360      	movs	r3, #96	; 0x60
 800181a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	480a      	ldr	r0, [pc, #40]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 8001830:	f002 fe26 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001834:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL13MX_TIM10_Initv+0xa4>
		Error_Handler();
 8001844:	f000 f97a 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <_ZL13MX_TIM10_Initv+0xb4>)
 800184a:	f000 fb31 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000230 	.word	0x20000230
 800185c:	40014400 	.word	0x40014400

08001860 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001868:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001898:	f003 fc4a 	bl	8005130 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80018ac:	f000 f946 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000278 	.word	0x20000278
 80018b8:	40011000 	.word	0x40011000

080018bc <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_ZL11MX_DMA_Initv+0x3c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <_ZL11MX_DMA_Initv+0x3c>)
 80018cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <_ZL11MX_DMA_Initv+0x3c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	203a      	movs	r0, #58	; 0x3a
 80018e4:	f000 fe31 	bl	800254a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018e8:	203a      	movs	r0, #58	; 0x3a
 80018ea:	f000 fe4a 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a5b      	ldr	r2, [pc, #364]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a54      	ldr	r2, [pc, #336]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <_ZL12MX_GPIO_Initv+0x18c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800199e:	2200      	movs	r2, #0
 80019a0:	f641 0128 	movw	r1, #6184	; 0x1828
 80019a4:	4839      	ldr	r0, [pc, #228]	; (8001a8c <_ZL12MX_GPIO_Initv+0x190>)
 80019a6:	f001 fafb 	bl	8002fa0 <HAL_GPIO_WritePin>
	GPIO1_1_Pin | GPIO2_2_Pin | GPIO3_2_Pin | GPIO3_1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LinearActuator_en_GPIO_Port, LinearActuator_en_Pin,
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	4838      	ldr	r0, [pc, #224]	; (8001a90 <_ZL12MX_GPIO_Initv+0x194>)
 80019b0:	f001 faf6 	bl	8002fa0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Motor3_DIR1_Pin | LinearActuator_dir_Pin,
 80019b4:	2200      	movs	r2, #0
 80019b6:	2130      	movs	r1, #48	; 0x30
 80019b8:	4836      	ldr	r0, [pc, #216]	; (8001a94 <_ZL12MX_GPIO_Initv+0x198>)
 80019ba:	f001 faf1 	bl	8002fa0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, laser1_Pin | laser2_Pin | STEPPER_DIR_Pin,
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80019c4:	4834      	ldr	r0, [pc, #208]	; (8001a98 <_ZL12MX_GPIO_Initv+0x19c>)
 80019c6:	f001 faeb 	bl	8002fa0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80019d0:	4832      	ldr	r0, [pc, #200]	; (8001a9c <_ZL12MX_GPIO_Initv+0x1a0>)
 80019d2:	f001 fae5 	bl	8002fa0 <HAL_GPIO_WritePin>
	PassingMotor_DIR_Pin | LOCO_DIR2_Pin | LOCO_DIR1_Pin | LiftingMotor_DIR_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : Limit_switch_input1_Pin Liimit_switch_input2_Pin */
	GPIO_InitStruct.Pin = Limit_switch_input1_Pin | Liimit_switch_input2_Pin;
 80019d6:	2314      	movs	r3, #20
 80019d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4828      	ldr	r0, [pc, #160]	; (8001a8c <_ZL12MX_GPIO_Initv+0x190>)
 80019ea:	f001 f955 	bl	8002c98 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO1_1_Pin GPIO2_2_Pin GPIO3_2_Pin GPIO3_1_Pin */
	GPIO_InitStruct.Pin = GPIO1_1_Pin | GPIO2_2_Pin | GPIO3_2_Pin | GPIO3_1_Pin;
 80019ee:	f641 0328 	movw	r3, #6184	; 0x1828
 80019f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4821      	ldr	r0, [pc, #132]	; (8001a8c <_ZL12MX_GPIO_Initv+0x190>)
 8001a08:	f001 f946 	bl	8002c98 <HAL_GPIO_Init>

	/*Configure GPIO pin : LinearActuator_en_Pin */
	GPIO_InitStruct.Pin = LinearActuator_en_Pin;
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LinearActuator_en_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	481b      	ldr	r0, [pc, #108]	; (8001a90 <_ZL12MX_GPIO_Initv+0x194>)
 8001a24:	f001 f938 	bl	8002c98 <HAL_GPIO_Init>

	/*Configure GPIO pins : Motor3_DIR1_Pin LinearActuator_dir_Pin */
	GPIO_InitStruct.Pin = Motor3_DIR1_Pin | LinearActuator_dir_Pin;
 8001a28:	2330      	movs	r3, #48	; 0x30
 8001a2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4815      	ldr	r0, [pc, #84]	; (8001a94 <_ZL12MX_GPIO_Initv+0x198>)
 8001a40:	f001 f92a 	bl	8002c98 <HAL_GPIO_Init>

	/*Configure GPIO pins : laser1_Pin laser2_Pin STEPPER_DIR_Pin */
	GPIO_InitStruct.Pin = laser1_Pin | laser2_Pin | STEPPER_DIR_Pin;
 8001a44:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001a48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480e      	ldr	r0, [pc, #56]	; (8001a98 <_ZL12MX_GPIO_Initv+0x19c>)
 8001a5e:	f001 f91b 	bl	8002c98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PassingMotor_DIR_Pin LOCO_DIR2_Pin LOCO_DIR1_Pin LiftingMotor_DIR_Pin */
	GPIO_InitStruct.Pin = PassingMotor_DIR_Pin | LOCO_DIR2_Pin | LOCO_DIR1_Pin
 8001a62:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 8001a66:	617b      	str	r3, [r7, #20]
			| LiftingMotor_DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8001a7c:	f001 f90c 	bl	8002c98 <HAL_GPIO_Init>

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020c00 	.word	0x40020c00

08001aa0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	//test +=1;

	if (laserDebounce > 0) {
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dd04      	ble.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x1a>
		laserDebounce--;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ab8:	6013      	str	r3, [r2, #0]
	}
	if (passDebounce > 0) {
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dd04      	ble.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x2c>
		passDebounce--;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001aca:	6013      	str	r3, [r2, #0]
	}

	if (linearDebounce > 0) {
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	dd04      	ble.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x3e>
		linearDebounce--;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001adc:	6013      	str	r3, [r2, #0]

	}
	if (bldcDebounce > 0) {
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dd04      	ble.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x50>
		bldcDebounce--;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001aee:	6013      	str	r3, [r2, #0]
	}
	if (debounce > 0) {
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	dd04      	ble.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x62>
		debounce--;
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b00:	6013      	str	r3, [r2, #0]
	}
	if (start_stepper) {
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x74>
		stepperCount += 1;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b12:	6013      	str	r3, [r2, #0]
	}

}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	2000036c 	.word	0x2000036c
 8001b24:	20000374 	.word	0x20000374
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	2000035c 	.word	0x2000035c
 8001b30:	20000350 	.word	0x20000350
 8001b34:	20000348 	.word	0x20000348
 8001b38:	20000354 	.word	0x20000354

08001b3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_I2C_MspInit+0xa4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d13c      	bne.n	8001c34 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001be8:	2304      	movs	r3, #4
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4814      	ldr	r0, [pc, #80]	; (8001c44 <HAL_I2C_MspInit+0xac>)
 8001bf4:	f001 f850 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c08:	2309      	movs	r3, #9
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_I2C_MspInit+0xac>)
 8001c14:	f001 f840 	bl	8002c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0xa8>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	; 0x38
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6c      	ldr	r2, [pc, #432]	; (8001e18 <HAL_TIM_Base_MspInit+0x1d0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d145      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Encoder2_Pin;
 8001ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder2_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4858      	ldr	r0, [pc, #352]	; (8001e20 <HAL_TIM_Base_MspInit+0x1d8>)
 8001cc0:	f000 ffea 	bl	8002c98 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2018      	movs	r0, #24
 8001cca:	f000 fc3e 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cce:	2018      	movs	r0, #24
 8001cd0:	f000 fc57 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2019      	movs	r0, #25
 8001cda:	f000 fc36 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cde:	2019      	movs	r0, #25
 8001ce0:	f000 fc4f 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	201b      	movs	r0, #27
 8001cea:	f000 fc2e 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cee:	201b      	movs	r0, #27
 8001cf0:	f000 fc47 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001cf4:	e08c      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfe:	d134      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a44      	ldr	r2, [pc, #272]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a3d      	ldr	r2, [pc, #244]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder1_Pin;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encoder1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4834      	ldr	r0, [pc, #208]	; (8001e24 <HAL_TIM_Base_MspInit+0x1dc>)
 8001d54:	f000 ffa0 	bl	8002c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	201c      	movs	r0, #28
 8001d5e:	f000 fbf4 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d62:	201c      	movs	r0, #28
 8001d64:	f000 fc0d 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001d68:	e052      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM5)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <HAL_TIM_Base_MspInit+0x1e0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d116      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2032      	movs	r0, #50	; 0x32
 8001d96:	f000 fbd8 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d9a:	2032      	movs	r0, #50	; 0x32
 8001d9c:	f000 fbf1 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001da0:	e036      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM9)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_TIM_Base_MspInit+0x1e4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d116      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2018      	movs	r0, #24
 8001dce:	f000 fbbc 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001dd2:	2018      	movs	r0, #24
 8001dd4:	f000 fbd5 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001dd8:	e01a      	b.n	8001e10 <HAL_TIM_Base_MspInit+0x1c8>
  else if(htim_base->Instance==TIM10)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_TIM_Base_MspInit+0x1e8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d115      	bne.n	8001e10 <HAL_TIM_Base_MspInit+0x1c8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_TIM_Base_MspInit+0x1d4>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	2019      	movs	r0, #25
 8001e06:	f000 fba0 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e0a:	2019      	movs	r0, #25
 8001e0c:	f000 fbb9 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001e10:	bf00      	nop
 8001e12:	3738      	adds	r7, #56	; 0x38
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014400 	.word	0x40014400

08001e34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x70>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e62:	e01a      	b.n	8001e9a <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM4)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_TIM_PWM_MspInit+0x78>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d115      	bne.n	8001e9a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x74>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f000 fb5b 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e94:	201e      	movs	r0, #30
 8001e96:	f000 fb74 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40000800 	.word	0x40000800

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a58      	ldr	r2, [pc, #352]	; (8002030 <HAL_TIM_MspPostInit+0x180>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11e      	bne.n	8001f10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor3_PWM1_Pin;
 8001eee:	2340      	movs	r3, #64	; 0x40
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor3_PWM1_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	484b      	ldr	r0, [pc, #300]	; (8002038 <HAL_TIM_MspPostInit+0x188>)
 8001f0a:	f000 fec5 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001f0e:	e08a      	b.n	8002026 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_TIM_MspPostInit+0x18c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d13d      	bne.n	8001f96 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PassingMotor_PWM_Pin|LiftingMotor_PWM_Pin;
 8001f52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4834      	ldr	r0, [pc, #208]	; (8002040 <HAL_TIM_MspPostInit+0x190>)
 8001f70:	f000 fe92 	bl	8002c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LOCO_PWM1_Pin|LOCO_PWM2_Pin;
 8001f74:	23c0      	movs	r3, #192	; 0xc0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f84:	2302      	movs	r3, #2
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	482d      	ldr	r0, [pc, #180]	; (8002044 <HAL_TIM_MspPostInit+0x194>)
 8001f90:	f000 fe82 	bl	8002c98 <HAL_GPIO_Init>
}
 8001f94:	e047      	b.n	8002026 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM5)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <HAL_TIM_MspPostInit+0x198>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11e      	bne.n	8001fde <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|Servo_PWM_Pin;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <HAL_TIM_MspPostInit+0x188>)
 8001fd8:	f000 fe5e 	bl	8002c98 <HAL_GPIO_Init>
}
 8001fdc:	e023      	b.n	8002026 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_TIM_MspPostInit+0x19c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d11e      	bne.n	8002026 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_TIM_MspPostInit+0x184>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEPPER_STEP_Pin;
 8002004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002016:	2303      	movs	r3, #3
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <HAL_TIM_MspPostInit+0x194>)
 8002022:	f000 fe39 	bl	8002c98 <HAL_GPIO_Init>
}
 8002026:	bf00      	nop
 8002028:	3730      	adds	r7, #48	; 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40000400 	.word	0x40000400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000
 800203c:	40000800 	.word	0x40000800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40020400 	.word	0x40020400
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40014400 	.word	0x40014400

08002050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_UART_MspInit+0xe4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d15b      	bne.n	800212a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_UART_MspInit+0xe8>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <HAL_UART_MspInit+0xe8>)
 800207c:	f043 0310 	orr.w	r3, r3, #16
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_UART_MspInit+0xe8>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_UART_MspInit+0xe8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_UART_MspInit+0xe8>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_UART_MspInit+0xe8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020bc:	2307      	movs	r3, #7
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	481d      	ldr	r0, [pc, #116]	; (800213c <HAL_UART_MspInit+0xec>)
 80020c8:	f000 fde6 	bl	8002c98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_UART_MspInit+0xf4>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_UART_MspInit+0xf0>)
 80020fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002100:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_UART_MspInit+0xf0>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_UART_MspInit+0xf0>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <HAL_UART_MspInit+0xf0>)
 8002110:	f000 fa52 	bl	80025b8 <HAL_DMA_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800211a:	f7ff fd0f 	bl	8001b3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_UART_MspInit+0xf0>)
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_UART_MspInit+0xf0>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40011000 	.word	0x40011000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000
 8002140:	200002bc 	.word	0x200002bc
 8002144:	40026440 	.word	0x40026440

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800214c:	e7fe      	b.n	800214c <NMI_Handler+0x4>

0800214e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <MemManage_Handler+0x4>

0800215a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler+0x4>

08002166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002194:	f000 f8de 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80021a2:	f001 ffc9 	bl	8004138 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80021a8:	f001 ffc6 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000080 	.word	0x20000080
 80021b4:	200001e8 	.word	0x200001e8

080021b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021be:	f001 ffbb 	bl	8004138 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021c4:	f001 ffb8 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000080 	.word	0x20000080
 80021d0:	20000230 	.word	0x20000230

080021d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <TIM1_CC_IRQHandler+0x10>)
 80021da:	f001 ffad 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000080 	.word	0x20000080

080021e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <TIM2_IRQHandler+0x10>)
 80021ee:	f001 ffa3 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200000c8 	.word	0x200000c8

080021fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM4_IRQHandler+0x10>)
 8002202:	f001 ff99 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000158 	.word	0x20000158

08002210 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM5_IRQHandler+0x10>)
 8002216:	f001 ff8f 	bl	8004138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200001a0 	.word	0x200001a0

08002224 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <DMA2_Stream2_IRQHandler+0x10>)
 800222a:	f000 facb 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002bc 	.word	0x200002bc

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002262:	490e      	ldr	r1, [pc, #56]	; (800229c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002264:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002278:	4c0b      	ldr	r4, [pc, #44]	; (80022a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002286:	f7ff ffd7 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228a:	f003 fbdf 	bl	8005a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228e:	f7fe fd29 	bl	8000ce4 <main>
  bx  lr    
 8002292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80022a0:	08005aec 	.word	0x08005aec
  ldr r2, =_sbss
 80022a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80022a8:	2000037c 	.word	0x2000037c

080022ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_Init+0x40>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_Init+0x40>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_Init+0x40>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f92b 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fc30 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f943 	bl	800259e <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002330:	f000 f90b 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000004 	.word	0x20000004
 800234c:	2000000c 	.word	0x2000000c
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x20>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x24>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_IncTick+0x24>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000378 	.word	0x20000378

0800237c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_GetTick+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000378 	.word	0x20000378

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db0b      	blt.n	8002422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <__NVIC_EnableIRQ+0x38>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2001      	movs	r0, #1
 800241a:	fa00 f202 	lsl.w	r2, r0, r2
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff29 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff3e 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff31 	bl	80023f8 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff feda 	bl	800237c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e099      	b.n	8002708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f4:	e00f      	b.n	8002616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f6:	f7ff fec1 	bl	800237c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b05      	cmp	r3, #5
 8002602:	d908      	bls.n	8002616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e078      	b.n	8002708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e8      	bne.n	80025f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_DMA_Init+0x158>)
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b04      	cmp	r3, #4
 800266e:	d107      	bne.n	8002680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4313      	orrs	r3, r2
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0307 	bic.w	r3, r3, #7
 8002696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d117      	bne.n	80026da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa6f 	bl	8002ba0 <DMA_CheckFifoParam>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026d6:	2301      	movs	r3, #1
 80026d8:	e016      	b.n	8002708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa26 	bl	8002b34 <DMA_CalcBaseAndBitshift>
 80026e8:	4603      	mov	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	f010803f 	.word	0xf010803f

08002714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_DMA_Start_IT+0x26>
 8002736:	2302      	movs	r3, #2
 8002738:	e040      	b.n	80027bc <HAL_DMA_Start_IT+0xa8>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12f      	bne.n	80027ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9b8 	bl	8002ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	223f      	movs	r2, #63	; 0x3f
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0216 	orr.w	r2, r2, #22
 8002782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_DMA_IRQHandler+0x258>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a92      	ldr	r2, [pc, #584]	; (8002a20 <HAL_DMA_IRQHandler+0x25c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0204 	bic.w	r2, r2, #4
 8002816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2208      	movs	r2, #8
 800281e:	409a      	lsls	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2204      	movs	r2, #4
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2204      	movs	r2, #4
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2210      	movs	r2, #16
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d043      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2210      	movs	r2, #16
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d024      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
 80028f2:	e01f      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e016      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0208 	bic.w	r2, r2, #8
 8002922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2220      	movs	r2, #32
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 808e 	beq.w	8002a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8086 	beq.w	8002a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2220      	movs	r2, #32
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b05      	cmp	r3, #5
 800296c:	d136      	bne.n	80029dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0216 	bic.w	r2, r2, #22
 800297c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_DMA_IRQHandler+0x1da>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	223f      	movs	r2, #63	; 0x3f
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d07d      	beq.n	8002ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
        }
        return;
 80029da:	e078      	b.n	8002ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01c      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d108      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d030      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
 8002a08:	e02b      	b.n	8002a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e022      	b.n	8002a62 <HAL_DMA_IRQHandler+0x29e>
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0210 	bic.w	r2, r2, #16
 8002a40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d032      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2205      	movs	r2, #5
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d307      	bcc.n	8002aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f2      	bne.n	8002a8e <HAL_DMA_IRQHandler+0x2ca>
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aaa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ace:	bf00      	nop
    }
  }
}
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop

08002ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d108      	bne.n	8002b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b16:	e007      	b.n	8002b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3b10      	subs	r3, #16
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <DMA_CalcBaseAndBitshift+0x64>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <DMA_CalcBaseAndBitshift+0x68>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d909      	bls.n	8002b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58
 8002b74:	e007      	b.n	8002b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	aaaaaaab 	.word	0xaaaaaaab
 8002b9c:	08005ad4 	.word	0x08005ad4

08002ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11f      	bne.n	8002bfa <DMA_CheckFifoParam+0x5a>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d856      	bhi.n	8002c6e <DMA_CheckFifoParam+0xce>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <DMA_CheckFifoParam+0x28>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002beb 	.word	0x08002beb
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	08002c6f 	.word	0x08002c6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d046      	beq.n	8002c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e043      	b.n	8002c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf2:	d140      	bne.n	8002c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e03d      	b.n	8002c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d121      	bne.n	8002c48 <DMA_CheckFifoParam+0xa8>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d837      	bhi.n	8002c7a <DMA_CheckFifoParam+0xda>
 8002c0a:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <DMA_CheckFifoParam+0x70>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c27 	.word	0x08002c27
 8002c18:	08002c21 	.word	0x08002c21
 8002c1c:	08002c39 	.word	0x08002c39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e030      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d025      	beq.n	8002c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c36:	e022      	b.n	8002c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c40:	d11f      	bne.n	8002c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c46:	e01c      	b.n	8002c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d903      	bls.n	8002c56 <DMA_CheckFifoParam+0xb6>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d003      	beq.n	8002c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c54:	e018      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5a:	e015      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e00b      	b.n	8002c86 <DMA_CheckFifoParam+0xe6>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e00a      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e008      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e006      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e004      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
    }
  } 
  
  return status; 
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e159      	b.n	8002f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f040 8148 	bne.w	8002f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d005      	beq.n	8002cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d130      	bne.n	8002d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 0201 	and.w	r2, r3, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d017      	beq.n	8002d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d123      	bne.n	8002ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	08da      	lsrs	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3208      	adds	r2, #8
 8002dd6:	69b9      	ldr	r1, [r7, #24]
 8002dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a2 	beq.w	8002f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_GPIO_Init+0x2e8>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_GPIO_Init+0x2e8>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b54      	ldr	r3, [pc, #336]	; (8002f80 <HAL_GPIO_Init+0x2e8>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3a:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <HAL_GPIO_Init+0x2ec>)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a49      	ldr	r2, [pc, #292]	; (8002f88 <HAL_GPIO_Init+0x2f0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d019      	beq.n	8002e9a <HAL_GPIO_Init+0x202>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a48      	ldr	r2, [pc, #288]	; (8002f8c <HAL_GPIO_Init+0x2f4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_GPIO_Init+0x1fe>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a47      	ldr	r2, [pc, #284]	; (8002f90 <HAL_GPIO_Init+0x2f8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00d      	beq.n	8002e92 <HAL_GPIO_Init+0x1fa>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <HAL_GPIO_Init+0x2fc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <HAL_GPIO_Init+0x1f6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <HAL_GPIO_Init+0x300>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_GPIO_Init+0x1f2>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e008      	b.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e8a:	2307      	movs	r3, #7
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e004      	b.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e002      	b.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f002 0203 	and.w	r2, r2, #3
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	4093      	lsls	r3, r2
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eac:	4935      	ldr	r1, [pc, #212]	; (8002f84 <HAL_GPIO_Init+0x2ec>)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eba:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ede:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ee4:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	f67f aea2 	bls.w	8002cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3724      	adds	r7, #36	; 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40020800 	.word	0x40020800
 8002f94:	40020c00 	.word	0x40020c00
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e12b      	b.n	800323e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe fdcc 	bl	8001b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003038:	f000 fd30 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 800303c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a81      	ldr	r2, [pc, #516]	; (8003248 <HAL_I2C_Init+0x274>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d807      	bhi.n	8003058 <HAL_I2C_Init+0x84>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a80      	ldr	r2, [pc, #512]	; (800324c <HAL_I2C_Init+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e006      	b.n	8003066 <HAL_I2C_Init+0x92>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a7d      	ldr	r2, [pc, #500]	; (8003250 <HAL_I2C_Init+0x27c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0e7      	b.n	800323e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a78      	ldr	r2, [pc, #480]	; (8003254 <HAL_I2C_Init+0x280>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9b      	lsrs	r3, r3, #18
 8003078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_I2C_Init+0x274>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d802      	bhi.n	80030a8 <HAL_I2C_Init+0xd4>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e009      	b.n	80030bc <HAL_I2C_Init+0xe8>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	4a69      	ldr	r2, [pc, #420]	; (8003258 <HAL_I2C_Init+0x284>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	495c      	ldr	r1, [pc, #368]	; (8003248 <HAL_I2C_Init+0x274>)
 80030d8:	428b      	cmp	r3, r1
 80030da:	d819      	bhi.n	8003110 <HAL_I2C_Init+0x13c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e59      	subs	r1, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030f0:	400b      	ands	r3, r1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_I2C_Init+0x138>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e59      	subs	r1, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fbb1 f3f3 	udiv	r3, r1, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310a:	e051      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800310c:	2304      	movs	r3, #4
 800310e:	e04f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <HAL_I2C_Init+0x168>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e012      	b.n	8003162 <HAL_I2C_Init+0x18e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	0099      	lsls	r1, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x196>
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <HAL_I2C_Init+0x1bc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e58      	subs	r0, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	440b      	add	r3, r1
 8003180:	fbb0 f3f3 	udiv	r3, r0, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e58      	subs	r0, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	0099      	lsls	r1, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6911      	ldr	r1, [r2, #16]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	000186a0 	.word	0x000186a0
 800324c:	001e847f 	.word	0x001e847f
 8003250:	003d08ff 	.word	0x003d08ff
 8003254:	431bde83 	.word	0x431bde83
 8003258:	10624dd3 	.word	0x10624dd3

0800325c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e264      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	4ba3      	ldr	r3, [pc, #652]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4ba0      	ldr	r3, [pc, #640]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b9d      	ldr	r3, [pc, #628]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b99      	ldr	r3, [pc, #612]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e23f      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b91      	ldr	r3, [pc, #580]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a90      	ldr	r2, [pc, #576]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a8a      	ldr	r2, [pc, #552]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b84      	ldr	r3, [pc, #528]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a83      	ldr	r2, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f832 	bl	800237c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f82e 	bl	800237c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e204      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f81e 	bl	800237c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f81a 	bl	800237c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1f0      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1c4      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4952      	ldr	r1, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b4f      	ldr	r3, [pc, #316]	; (800350c <HAL_RCC_OscConfig+0x2b0>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe ffd3 	bl	800237c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe ffcf 	bl	800237c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1a5      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4940      	ldr	r1, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_OscConfig+0x2b0>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe ffb2 	bl	800237c <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341c:	f7fe ffae 	bl	800237c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e184      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d030      	beq.n	80034a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_RCC_OscConfig+0x2b4>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fe ff92 	bl	800237c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345c:	f7fe ff8e 	bl	800237c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e164      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
 800347a:	e015      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x2b4>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe ff7b 	bl	800237c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7fe ff77 	bl	800237c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e14d      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a0 	beq.w	80035f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d121      	bne.n	8003536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fe ff3d 	bl	800237c <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e011      	b.n	800352a <HAL_RCC_OscConfig+0x2ce>
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	42470000 	.word	0x42470000
 8003510:	42470e80 	.word	0x42470e80
 8003514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003518:	f7fe ff30 	bl	800237c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e106      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x4e4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x2f0>
 800353e:	4b81      	ldr	r3, [pc, #516]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a80      	ldr	r2, [pc, #512]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	e01c      	b.n	8003586 <HAL_RCC_OscConfig+0x32a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b05      	cmp	r3, #5
 8003552:	d10c      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003554:	4b7b      	ldr	r3, [pc, #492]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	4b78      	ldr	r3, [pc, #480]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a77      	ldr	r2, [pc, #476]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	e00b      	b.n	8003586 <HAL_RCC_OscConfig+0x32a>
 800356e:	4b75      	ldr	r3, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a74      	ldr	r2, [pc, #464]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a71      	ldr	r2, [pc, #452]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d015      	beq.n	80035ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fe fef5 	bl	800237c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe fef1 	bl	800237c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0c5      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ee      	beq.n	8003596 <HAL_RCC_OscConfig+0x33a>
 80035b8:	e014      	b.n	80035e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fedf 	bl	800237c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fedb 	bl	800237c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0af      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	4b5a      	ldr	r3, [pc, #360]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ee      	bne.n	80035c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b56      	ldr	r3, [pc, #344]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809b 	beq.w	8003736 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d05c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d141      	bne.n	8003698 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003614:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe feaf 	bl	800237c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe feab 	bl	800237c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e081      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
 8003664:	4937      	ldr	r1, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fe84 	bl	800237c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fe80 	bl	800237c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e056      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b2e      	ldr	r3, [pc, #184]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x41c>
 8003696:	e04e      	b.n	8003736 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fe fe6d 	bl	800237c <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe fe69 	bl	800237c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e03f      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x44a>
 80036c4:	e037      	b.n	8003736 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e032      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d028      	beq.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d121      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d11a      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003708:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40007000 	.word	0x40007000
 8003744:	40023800 	.word	0x40023800
 8003748:	42470060 	.word	0x42470060

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0cc      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d90c      	bls.n	8003788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d044      	beq.n	800386c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d119      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d003      	beq.n	800380a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	2b03      	cmp	r3, #3
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e067      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4934      	ldr	r1, [pc, #208]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fe fd9e 	bl	800237c <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fe fd9a 	bl	800237c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e04f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d20c      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490a      	ldr	r1, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fcfe 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023c00 	.word	0x40023c00
 8003908:	40023800 	.word	0x40023800
 800390c:	08005abc 	.word	0x08005abc
 8003910:	20000004 	.word	0x20000004
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391e:	2100      	movs	r1, #0
 8003920:	6079      	str	r1, [r7, #4]
 8003922:	2100      	movs	r1, #0
 8003924:	60f9      	str	r1, [r7, #12]
 8003926:	2100      	movs	r1, #0
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800392a:	2100      	movs	r1, #0
 800392c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392e:	4952      	ldr	r1, [pc, #328]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003930:	6889      	ldr	r1, [r1, #8]
 8003932:	f001 010c 	and.w	r1, r1, #12
 8003936:	2908      	cmp	r1, #8
 8003938:	d00d      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x3e>
 800393a:	2908      	cmp	r1, #8
 800393c:	f200 8094 	bhi.w	8003a68 <HAL_RCC_GetSysClockFreq+0x150>
 8003940:	2900      	cmp	r1, #0
 8003942:	d002      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x32>
 8003944:	2904      	cmp	r1, #4
 8003946:	d003      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x38>
 8003948:	e08e      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x164>)
 800394c:	60bb      	str	r3, [r7, #8]
       break;
 800394e:	e08e      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003950:	4b4b      	ldr	r3, [pc, #300]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003952:	60bb      	str	r3, [r7, #8]
      break;
 8003954:	e08b      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003956:	4948      	ldr	r1, [pc, #288]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003958:	6849      	ldr	r1, [r1, #4]
 800395a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800395e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4945      	ldr	r1, [pc, #276]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003962:	6849      	ldr	r1, [r1, #4]
 8003964:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003968:	2900      	cmp	r1, #0
 800396a:	d024      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4942      	ldr	r1, [pc, #264]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	0989      	lsrs	r1, r1, #6
 8003972:	4608      	mov	r0, r1
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	f240 14ff 	movw	r4, #511	; 0x1ff
 800397c:	f04f 0500 	mov.w	r5, #0
 8003980:	ea00 0204 	and.w	r2, r0, r4
 8003984:	ea01 0305 	and.w	r3, r1, r5
 8003988:	493d      	ldr	r1, [pc, #244]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x168>)
 800398a:	fb01 f003 	mul.w	r0, r1, r3
 800398e:	2100      	movs	r1, #0
 8003990:	fb01 f102 	mul.w	r1, r1, r2
 8003994:	1844      	adds	r4, r0, r1
 8003996:	493a      	ldr	r1, [pc, #232]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x168>)
 8003998:	fba2 0101 	umull	r0, r1, r2, r1
 800399c:	1863      	adds	r3, r4, r1
 800399e:	4619      	mov	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	f7fc fc16 	bl	80001d8 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e04a      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	461a      	mov	r2, r3
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	ea02 0400 	and.w	r4, r2, r0
 80039ce:	ea03 0501 	and.w	r5, r3, r1
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	014b      	lsls	r3, r1, #5
 80039e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039e4:	0142      	lsls	r2, r0, #5
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	1b00      	subs	r0, r0, r4
 80039ec:	eb61 0105 	sbc.w	r1, r1, r5
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	018b      	lsls	r3, r1, #6
 80039fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039fe:	0182      	lsls	r2, r0, #6
 8003a00:	1a12      	subs	r2, r2, r0
 8003a02:	eb63 0301 	sbc.w	r3, r3, r1
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	00d9      	lsls	r1, r3, #3
 8003a10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a14:	00d0      	lsls	r0, r2, #3
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	1912      	adds	r2, r2, r4
 8003a1c:	eb45 0303 	adc.w	r3, r5, r3
 8003a20:	f04f 0000 	mov.w	r0, #0
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	0299      	lsls	r1, r3, #10
 8003a2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a2e:	0290      	lsls	r0, r2, #10
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	f7fc fbca 	bl	80001d8 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	3301      	adds	r3, #1
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	60bb      	str	r3, [r7, #8]
      break;
 8003a66:	e002      	b.n	8003a6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x164>)
 8003a6a:	60bb      	str	r3, [r7, #8]
      break;
 8003a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	017d7840 	.word	0x017d7840

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000004 	.word	0x20000004

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0a9b      	lsrs	r3, r3, #10
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08005acc 	.word	0x08005acc

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac8:	f7ff ffdc 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0b5b      	lsrs	r3, r3, #13
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08005acc 	.word	0x08005acc

08003aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe f898 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 fe94 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d001      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e044      	b.n	8003c2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_TIM_Base_Start_IT+0xb0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bce:	d013      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a19      	ldr	r2, [pc, #100]	; (8003c44 <HAL_TIM_Base_Start_IT+0xb8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x6c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <HAL_TIM_Base_Start_IT+0xc0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d111      	bne.n	8003c1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d010      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	e007      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	40014000 	.word	0x40014000

08003c50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fe f8dc 	bl	8001e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fde2 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start+0x24>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e022      	b.n	8003d5a <HAL_TIM_PWM_Start+0x6a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d109      	bne.n	8003d2e <HAL_TIM_PWM_Start+0x3e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e015      	b.n	8003d5a <HAL_TIM_PWM_Start+0x6a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d109      	bne.n	8003d48 <HAL_TIM_PWM_Start+0x58>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e008      	b.n	8003d5a <HAL_TIM_PWM_Start+0x6a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e068      	b.n	8003e34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x82>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	e013      	b.n	8003d9a <HAL_TIM_PWM_Start+0xaa>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x92>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	e00b      	b.n	8003d9a <HAL_TIM_PWM_Start+0xaa>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xa2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d90:	e003      	b.n	8003d9a <HAL_TIM_PWM_Start+0xaa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f91c 	bl	8004fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_TIM_PWM_Start+0x14c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_TIM_PWM_Start+0x14c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x10e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d013      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x10e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIM_PWM_Start+0x150>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x10e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_TIM_PWM_Start+0x154>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x10e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIM_PWM_Start+0x158>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x10e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_TIM_PWM_Start+0x15c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d010      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	e007      	b.n	8003e32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40014000 	.word	0x40014000

08003e50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e041      	b.n	8003ee6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f839 	bl	8003eee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fce2 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_IC_Start_IT+0x1e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e013      	b.n	8003f4a <HAL_TIM_IC_Start_IT+0x46>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_IC_Start_IT+0x2e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e00b      	b.n	8003f4a <HAL_TIM_IC_Start_IT+0x46>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_IC_Start_IT+0x3e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e003      	b.n	8003f4a <HAL_TIM_IC_Start_IT+0x46>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_TIM_IC_Start_IT+0x58>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e013      	b.n	8003f84 <HAL_TIM_IC_Start_IT+0x80>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d104      	bne.n	8003f6c <HAL_TIM_IC_Start_IT+0x68>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e00b      	b.n	8003f84 <HAL_TIM_IC_Start_IT+0x80>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d104      	bne.n	8003f7c <HAL_TIM_IC_Start_IT+0x78>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e003      	b.n	8003f84 <HAL_TIM_IC_Start_IT+0x80>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f86:	7bbb      	ldrb	r3, [r7, #14]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f8c:	7b7b      	ldrb	r3, [r7, #13]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0c2      	b.n	800411c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0xa2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	e013      	b.n	8003fce <HAL_TIM_IC_Start_IT+0xca>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_IC_Start_IT+0xb2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_IC_Start_IT+0xca>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_IC_Start_IT+0xc2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc4:	e003      	b.n	8003fce <HAL_TIM_IC_Start_IT+0xca>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start_IT+0xda>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fdc:	e013      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x102>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_IC_Start_IT+0xea>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x102>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_IC_Start_IT+0xfa>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	e003      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x102>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d841      	bhi.n	8004090 <HAL_TIM_IC_Start_IT+0x18c>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_TIM_IC_Start_IT+0x110>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004049 	.word	0x08004049
 8004018:	08004091 	.word	0x08004091
 800401c:	08004091 	.word	0x08004091
 8004020:	08004091 	.word	0x08004091
 8004024:	0800405b 	.word	0x0800405b
 8004028:	08004091 	.word	0x08004091
 800402c:	08004091 	.word	0x08004091
 8004030:	08004091 	.word	0x08004091
 8004034:	0800406d 	.word	0x0800406d
 8004038:	08004091 	.word	0x08004091
 800403c:	08004091 	.word	0x08004091
 8004040:	08004091 	.word	0x08004091
 8004044:	0800407f 	.word	0x0800407f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0202 	orr.w	r2, r2, #2
 8004056:	60da      	str	r2, [r3, #12]
      break;
 8004058:	e01d      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0204 	orr.w	r2, r2, #4
 8004068:	60da      	str	r2, [r3, #12]
      break;
 800406a:	e014      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0208 	orr.w	r2, r2, #8
 800407a:	60da      	str	r2, [r3, #12]
      break;
 800407c:	e00b      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0210 	orr.w	r2, r2, #16
 800408c:	60da      	str	r2, [r3, #12]
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	bf00      	nop
  }

  if (status == HAL_OK)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d13e      	bne.n	800411a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 ff9b 	bl	8004fe0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_TIM_IC_Start_IT+0x220>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d018      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d013      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_TIM_IC_Start_IT+0x224>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00e      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <HAL_TIM_IC_Start_IT+0x228>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d009      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_TIM_IC_Start_IT+0x22c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_TIM_IC_Start_IT+0x230>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d111      	bne.n	800410a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d010      	beq.n	800411a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	e007      	b.n	800411a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40014000 	.word	0x40014000

08004138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d122      	bne.n	8004194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d11b      	bne.n	8004194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0202 	mvn.w	r2, #2
 8004164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc f9a8 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8004180:	e005      	b.n	800418e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fb4a 	bl	800481c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb51 	bl	8004830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d122      	bne.n	80041e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11b      	bne.n	80041e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0204 	mvn.w	r2, #4
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc f97e 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 80041d4:	e005      	b.n	80041e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fb20 	bl	800481c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fb27 	bl	8004830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0208 	mvn.w	r2, #8
 800420c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2204      	movs	r2, #4
 8004212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc f954 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 faf6 	bl	800481c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fafd 	bl	8004830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b10      	cmp	r3, #16
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b10      	cmp	r3, #16
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0210 	mvn.w	r2, #16
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2208      	movs	r2, #8
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc f92a 	bl	80004d0 <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 facc 	bl	800481c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fad3 	bl	8004830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0201 	mvn.w	r2, #1
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fbf2 	bl	8001aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 ff1a 	bl	800511c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa98 	bl	8004844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b20      	cmp	r3, #32
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b20      	cmp	r3, #32
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0220 	mvn.w	r2, #32
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fee4 	bl	8005108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004362:	2302      	movs	r3, #2
 8004364:	e088      	b.n	8004478 <HAL_TIM_IC_ConfigChannel+0x130>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f000 fc74 	bl	8004c70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020c 	bic.w	r2, r2, #12
 8004396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e060      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11c      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 fcec 	bl	8004d9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e040      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f000 fd39 	bl	8004e78 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020c 	bic.w	r2, r2, #12
 8004414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e021      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d11c      	bne.n	800446a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f000 fd56 	bl	8004ef0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004452:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69d9      	ldr	r1, [r3, #28]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
 8004468:	e001      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800449a:	2302      	movs	r3, #2
 800449c:	e0ae      	b.n	80045fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	f200 809f 	bhi.w	80045ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080045ed 	.word	0x080045ed
 80044bc:	080045ed 	.word	0x080045ed
 80044c0:	080045ed 	.word	0x080045ed
 80044c4:	08004529 	.word	0x08004529
 80044c8:	080045ed 	.word	0x080045ed
 80044cc:	080045ed 	.word	0x080045ed
 80044d0:	080045ed 	.word	0x080045ed
 80044d4:	0800456b 	.word	0x0800456b
 80044d8:	080045ed 	.word	0x080045ed
 80044dc:	080045ed 	.word	0x080045ed
 80044e0:	080045ed 	.word	0x080045ed
 80044e4:	080045ab 	.word	0x080045ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa32 	bl	8004958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	619a      	str	r2, [r3, #24]
      break;
 8004526:	e064      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fa78 	bl	8004a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      break;
 8004568:	e043      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fac3 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0208 	orr.w	r2, r2, #8
 8004584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0204 	bic.w	r2, r2, #4
 8004594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
      break;
 80045a8:	e023      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fb0d 	bl	8004bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	61da      	str	r2, [r3, #28]
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	75fb      	strb	r3, [r7, #23]
      break;
 80045f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIM_ConfigClockSource+0x1c>
 800461c:	2302      	movs	r3, #2
 800461e:	e0b4      	b.n	800478a <HAL_TIM_ConfigClockSource+0x186>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800463e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004658:	d03e      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0xd4>
 800465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465e:	f200 8087 	bhi.w	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	f000 8086 	beq.w	8004776 <HAL_TIM_ConfigClockSource+0x172>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d87f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b70      	cmp	r3, #112	; 0x70
 8004672:	d01a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xa6>
 8004674:	2b70      	cmp	r3, #112	; 0x70
 8004676:	d87b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d050      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x11a>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d877      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b50      	cmp	r3, #80	; 0x50
 8004682:	d03c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xfa>
 8004684:	2b50      	cmp	r3, #80	; 0x50
 8004686:	d873      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d058      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x13a>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d86f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b30      	cmp	r3, #48	; 0x30
 8004692:	d064      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d86b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d060      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d867      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d05a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	e062      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f000 fc71 	bl	8004fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	609a      	str	r2, [r3, #8]
      break;
 80046d6:	e04f      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6899      	ldr	r1, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f000 fc5a 	bl	8004fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e03c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fb18 	bl	8004d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2150      	movs	r1, #80	; 0x50
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc27 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 800471c:	e02c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fb74 	bl	8004e18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2160      	movs	r1, #96	; 0x60
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fc17 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 800473c:	e01c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 faf8 	bl	8004d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fc07 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 800475c:	e00c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 fbfe 	bl	8004f6a <TIM_ITRx_SetConfig>
      break;
 800476e:	e003      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e000      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d831      	bhi.n	800480c <HAL_TIM_ReadCapturedValue+0x78>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	0800480d 	.word	0x0800480d
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	0800480d 	.word	0x0800480d
 80047c0:	080047ef 	.word	0x080047ef
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	0800480d 	.word	0x0800480d
 80047e0:	08004803 	.word	0x08004803
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	60fb      	str	r3, [r7, #12]

      break;
 80047ec:	e00f      	b.n	800480e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	60fb      	str	r3, [r7, #12]

      break;
 80047f6:	e00a      	b.n	800480e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	60fb      	str	r3, [r7, #12]

      break;
 8004800:	e005      	b.n	800480e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	60fb      	str	r3, [r7, #12]

      break;
 800480a:	e000      	b.n	800480e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800480c:	bf00      	nop
  }

  return tmpreg;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a34      	ldr	r2, [pc, #208]	; (800493c <TIM_Base_SetConfig+0xe4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a31      	ldr	r2, [pc, #196]	; (8004940 <TIM_Base_SetConfig+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a30      	ldr	r2, [pc, #192]	; (8004944 <TIM_Base_SetConfig+0xec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x38>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <TIM_Base_SetConfig+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d017      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <TIM_Base_SetConfig+0xe8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a21      	ldr	r2, [pc, #132]	; (8004944 <TIM_Base_SetConfig+0xec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00f      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <TIM_Base_SetConfig+0xf0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <TIM_Base_SetConfig+0xf4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <TIM_Base_SetConfig+0xf8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0x8a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_Base_SetConfig+0xfc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a08      	ldr	r2, [pc, #32]	; (800493c <TIM_Base_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <TIM_OC1_SetConfig+0xc8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d10c      	bne.n	80049ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0308 	bic.w	r3, r3, #8
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <TIM_OC1_SetConfig+0xc8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40010000 	.word	0x40010000

08004a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0210 	bic.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0320 	bic.w	r3, r3, #32
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <TIM_OC2_SetConfig+0xd4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10d      	bne.n	8004aa0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <TIM_OC2_SetConfig+0xd4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d113      	bne.n	8004ad0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <TIM_OC3_SetConfig+0xd0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <TIM_OC3_SetConfig+0xd0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d113      	bne.n	8004ba6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40010000 	.word	0x40010000

08004bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	031b      	lsls	r3, r3, #12
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <TIM_OC4_SetConfig+0x9c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d109      	bne.n	8004c44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	019b      	lsls	r3, r3, #6
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000

08004c70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <TIM_TI1_SetConfig+0xbc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x56>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x56>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <TIM_TI1_SetConfig+0xc0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x56>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <TIM_TI1_SetConfig+0xc4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x56>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TIM_TI1_SetConfig+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_TI1_SetConfig+0x56>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <TIM_TI1_SetConfig+0xcc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <TIM_TI1_SetConfig+0x5a>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <TIM_TI1_SetConfig+0x5c>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d008      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e003      	b.n	8004cea <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f023 030a 	bic.w	r3, r3, #10
 8004d04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 030a 	and.w	r3, r3, #10
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40014000 	.word	0x40014000

08004d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 030a 	bic.w	r3, r3, #10
 8004d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 0210 	bic.w	r2, r3, #16
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0210 	bic.w	r2, r3, #16
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f023 0303 	bic.w	r3, r3, #3
 8004ea4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	031b      	lsls	r3, r3, #12
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	031b      	lsls	r3, r3, #12
 8004f48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f043 0307 	orr.w	r3, r3, #7
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	43db      	mvns	r3, r3
 8005002:	401a      	ands	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
}
 800501e:	bf00      	nop
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005040:	2302      	movs	r3, #2
 8005042:	e050      	b.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d013      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a13      	ldr	r2, [pc, #76]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d10c      	bne.n	80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e03f      	b.n	80051c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc ff7a 	bl	8002050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2224      	movs	r2, #36	; 0x24
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 faa1 	bl	80056bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d11d      	bne.n	8005220 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Receive_DMA+0x26>
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e016      	b.n	8005222 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Receive_DMA+0x38>
 80051fe:	2302      	movs	r3, #2
 8005200:	e00f      	b.n	8005222 <HAL_UART_Receive_DMA+0x58>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f92a 	bl	8005470 <UART_Start_Receive_DMA>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005220:	2302      	movs	r3, #2
  }
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b09c      	sub	sp, #112	; 0x70
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d172      	bne.n	8005380 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	2200      	movs	r2, #0
 800529e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80052c2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	667b      	str	r3, [r7, #100]	; 0x64
 80052ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052f4:	647a      	str	r2, [r7, #68]	; 0x44
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	623b      	str	r3, [r7, #32]
   return(result);
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	663b      	str	r3, [r7, #96]	; 0x60
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3314      	adds	r3, #20
 8005326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005328:	633a      	str	r2, [r7, #48]	; 0x30
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d119      	bne.n	8005380 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60fb      	str	r3, [r7, #12]
   return(result);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0310 	bic.w	r3, r3, #16
 8005362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	617b      	str	r3, [r7, #20]
   return(result);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	d106      	bne.n	8005396 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800538c:	4619      	mov	r1, r3
 800538e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005390:	f7ff ff69 	bl	8005266 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005394:	e002      	b.n	800539c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005396:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005398:	f7ff ff47 	bl	800522a <HAL_UART_RxCpltCallback>
}
 800539c:	bf00      	nop
 800539e:	3770      	adds	r7, #112	; 0x70
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d108      	bne.n	80053cc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff4e 	bl	8005266 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053ca:	e002      	b.n	80053d2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ff36 	bl	800523e <HAL_UART_RxHalfCpltCallback>
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b21      	cmp	r3, #33	; 0x21
 800540c:	d108      	bne.n	8005420 <UART_DMAError+0x46>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f000 f8c2 	bl	80055a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b22      	cmp	r3, #34	; 0x22
 8005440:	d108      	bne.n	8005454 <UART_DMAError+0x7a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800544e:	68b8      	ldr	r0, [r7, #8]
 8005450:	f000 f8d0 	bl	80055f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f043 0210 	orr.w	r2, r3, #16
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f7ff fef6 	bl	8005252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b098      	sub	sp, #96	; 0x60
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2222      	movs	r2, #34	; 0x22
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	4a3e      	ldr	r2, [pc, #248]	; (8005598 <UART_Start_Receive_DMA+0x128>)
 800549e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	4a3d      	ldr	r2, [pc, #244]	; (800559c <UART_Start_Receive_DMA+0x12c>)
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	4a3c      	ldr	r2, [pc, #240]	; (80055a0 <UART_Start_Receive_DMA+0x130>)
 80054ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2200      	movs	r2, #0
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	f7fd f920 	bl	8002714 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	65bb      	str	r3, [r7, #88]	; 0x58
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005512:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	657b      	str	r3, [r7, #84]	; 0x54
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005546:	63ba      	str	r2, [r7, #56]	; 0x38
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800554c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	617b      	str	r3, [r7, #20]
   return(result);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005570:	653b      	str	r3, [r7, #80]	; 0x50
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800557a:	627a      	str	r2, [r7, #36]	; 0x24
 800557c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6a39      	ldr	r1, [r7, #32]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	61fb      	str	r3, [r7, #28]
   return(result);
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3760      	adds	r7, #96	; 0x60
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0800527f 	.word	0x0800527f
 800559c:	080053a5 	.word	0x080053a5
 80055a0:	080053db 	.word	0x080053db

080055a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	61ba      	str	r2, [r7, #24]
 80055ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80055e8:	bf00      	nop
 80055ea:	3724      	adds	r7, #36	; 0x24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b095      	sub	sp, #84	; 0x54
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800561c:	643a      	str	r2, [r7, #64]	; 0x40
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	64bb      	str	r3, [r7, #72]	; 0x48
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	2b01      	cmp	r3, #1
 800566a:	d119      	bne.n	80056a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60bb      	str	r3, [r7, #8]
   return(result);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f023 0310 	bic.w	r3, r3, #16
 8005682:	647b      	str	r3, [r7, #68]	; 0x44
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568c:	61ba      	str	r2, [r7, #24]
 800568e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e5      	bne.n	800566c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056ae:	bf00      	nop
 80056b0:	3754      	adds	r7, #84	; 0x54
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	b09f      	sub	sp, #124	; 0x7c
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d2:	68d9      	ldr	r1, [r3, #12]
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	ea40 0301 	orr.w	r3, r0, r1
 80056dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005700:	f021 010c 	bic.w	r1, r1, #12
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800570a:	430b      	orrs	r3, r1
 800570c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	ea40 0301 	orr.w	r3, r0, r1
 8005724:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4bc5      	ldr	r3, [pc, #788]	; (8005a40 <UART_SetConfig+0x384>)
 800572c:	429a      	cmp	r2, r3
 800572e:	d004      	beq.n	800573a <UART_SetConfig+0x7e>
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4bc3      	ldr	r3, [pc, #780]	; (8005a44 <UART_SetConfig+0x388>)
 8005736:	429a      	cmp	r2, r3
 8005738:	d103      	bne.n	8005742 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800573a:	f7fe f9c3 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 800573e:	6778      	str	r0, [r7, #116]	; 0x74
 8005740:	e002      	b.n	8005748 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005742:	f7fe f9ab 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8005746:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005750:	f040 80b6 	bne.w	80058c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005756:	461c      	mov	r4, r3
 8005758:	f04f 0500 	mov.w	r5, #0
 800575c:	4622      	mov	r2, r4
 800575e:	462b      	mov	r3, r5
 8005760:	1891      	adds	r1, r2, r2
 8005762:	6439      	str	r1, [r7, #64]	; 0x40
 8005764:	415b      	adcs	r3, r3
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
 8005768:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800576c:	1912      	adds	r2, r2, r4
 800576e:	eb45 0303 	adc.w	r3, r5, r3
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	00d9      	lsls	r1, r3, #3
 800577c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005780:	00d0      	lsls	r0, r2, #3
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	1911      	adds	r1, r2, r4
 8005788:	6639      	str	r1, [r7, #96]	; 0x60
 800578a:	416b      	adcs	r3, r5
 800578c:	667b      	str	r3, [r7, #100]	; 0x64
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	461a      	mov	r2, r3
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	1891      	adds	r1, r2, r2
 800579a:	63b9      	str	r1, [r7, #56]	; 0x38
 800579c:	415b      	adcs	r3, r3
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057a8:	f7fa fd16 	bl	80001d8 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4ba5      	ldr	r3, [pc, #660]	; (8005a48 <UART_SetConfig+0x38c>)
 80057b2:	fba3 2302 	umull	r2, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	011e      	lsls	r6, r3, #4
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	461c      	mov	r4, r3
 80057be:	f04f 0500 	mov.w	r5, #0
 80057c2:	4622      	mov	r2, r4
 80057c4:	462b      	mov	r3, r5
 80057c6:	1891      	adds	r1, r2, r2
 80057c8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ca:	415b      	adcs	r3, r3
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057d2:	1912      	adds	r2, r2, r4
 80057d4:	eb45 0303 	adc.w	r3, r5, r3
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	00d9      	lsls	r1, r3, #3
 80057e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e6:	00d0      	lsls	r0, r2, #3
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	1911      	adds	r1, r2, r4
 80057ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80057f0:	416b      	adcs	r3, r5
 80057f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	1891      	adds	r1, r2, r2
 8005800:	62b9      	str	r1, [r7, #40]	; 0x28
 8005802:	415b      	adcs	r3, r3
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800580a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800580e:	f7fa fce3 	bl	80001d8 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4b8c      	ldr	r3, [pc, #560]	; (8005a48 <UART_SetConfig+0x38c>)
 8005818:	fba3 1302 	umull	r1, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	2164      	movs	r1, #100	; 0x64
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	3332      	adds	r3, #50	; 0x32
 800582a:	4a87      	ldr	r2, [pc, #540]	; (8005a48 <UART_SetConfig+0x38c>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005838:	441e      	add	r6, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	4618      	mov	r0, r3
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	1894      	adds	r4, r2, r2
 8005848:	623c      	str	r4, [r7, #32]
 800584a:	415b      	adcs	r3, r3
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005852:	1812      	adds	r2, r2, r0
 8005854:	eb41 0303 	adc.w	r3, r1, r3
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	f04f 0500 	mov.w	r5, #0
 8005860:	00dd      	lsls	r5, r3, #3
 8005862:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005866:	00d4      	lsls	r4, r2, #3
 8005868:	4622      	mov	r2, r4
 800586a:	462b      	mov	r3, r5
 800586c:	1814      	adds	r4, r2, r0
 800586e:	653c      	str	r4, [r7, #80]	; 0x50
 8005870:	414b      	adcs	r3, r1
 8005872:	657b      	str	r3, [r7, #84]	; 0x54
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	1891      	adds	r1, r2, r2
 8005880:	61b9      	str	r1, [r7, #24]
 8005882:	415b      	adcs	r3, r3
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800588e:	f7fa fca3 	bl	80001d8 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <UART_SetConfig+0x38c>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a67      	ldr	r2, [pc, #412]	; (8005a48 <UART_SetConfig+0x38c>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0207 	and.w	r2, r3, #7
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4432      	add	r2, r6
 80058bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058be:	e0b9      	b.n	8005a34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c2:	461c      	mov	r4, r3
 80058c4:	f04f 0500 	mov.w	r5, #0
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	6139      	str	r1, [r7, #16]
 80058d0:	415b      	adcs	r3, r3
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058d8:	1912      	adds	r2, r2, r4
 80058da:	eb45 0303 	adc.w	r3, r5, r3
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	00d9      	lsls	r1, r3, #3
 80058e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058ec:	00d0      	lsls	r0, r2, #3
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	eb12 0804 	adds.w	r8, r2, r4
 80058f6:	eb43 0905 	adc.w	r9, r3, r5
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4618      	mov	r0, r3
 8005900:	f04f 0100 	mov.w	r1, #0
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005912:	0082      	lsls	r2, r0, #2
 8005914:	4640      	mov	r0, r8
 8005916:	4649      	mov	r1, r9
 8005918:	f7fa fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <UART_SetConfig+0x38c>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011e      	lsls	r6, r3, #4
 800592a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800592c:	4618      	mov	r0, r3
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	1894      	adds	r4, r2, r2
 8005938:	60bc      	str	r4, [r7, #8]
 800593a:	415b      	adcs	r3, r3
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005942:	1812      	adds	r2, r2, r0
 8005944:	eb41 0303 	adc.w	r3, r1, r3
 8005948:	f04f 0400 	mov.w	r4, #0
 800594c:	f04f 0500 	mov.w	r5, #0
 8005950:	00dd      	lsls	r5, r3, #3
 8005952:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005956:	00d4      	lsls	r4, r2, #3
 8005958:	4622      	mov	r2, r4
 800595a:	462b      	mov	r3, r5
 800595c:	1814      	adds	r4, r2, r0
 800595e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005960:	414b      	adcs	r3, r1
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	008b      	lsls	r3, r1, #2
 8005978:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800597c:	0082      	lsls	r2, r0, #2
 800597e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005982:	f7fa fc29 	bl	80001d8 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <UART_SetConfig+0x38c>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	; 0x32
 800599e:	4a2a      	ldr	r2, [pc, #168]	; (8005a48 <UART_SetConfig+0x38c>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059aa:	441e      	add	r6, r3
 80059ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ae:	4618      	mov	r0, r3
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	1894      	adds	r4, r2, r2
 80059ba:	603c      	str	r4, [r7, #0]
 80059bc:	415b      	adcs	r3, r3
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c4:	1812      	adds	r2, r2, r0
 80059c6:	eb41 0303 	adc.w	r3, r1, r3
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	f04f 0500 	mov.w	r5, #0
 80059d2:	00dd      	lsls	r5, r3, #3
 80059d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059d8:	00d4      	lsls	r4, r2, #3
 80059da:	4622      	mov	r2, r4
 80059dc:	462b      	mov	r3, r5
 80059de:	eb12 0a00 	adds.w	sl, r2, r0
 80059e2:	eb43 0b01 	adc.w	fp, r3, r1
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	008b      	lsls	r3, r1, #2
 80059fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059fe:	0082      	lsls	r2, r0, #2
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	f7fa fbe8 	bl	80001d8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <UART_SetConfig+0x38c>)
 8005a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2164      	movs	r1, #100	; 0x64
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	3332      	adds	r3, #50	; 0x32
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <UART_SetConfig+0x38c>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4432      	add	r2, r6
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	377c      	adds	r7, #124	; 0x7c
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40011000 	.word	0x40011000
 8005a44:	40011400 	.word	0x40011400
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <__libc_init_array>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4d0d      	ldr	r5, [pc, #52]	; (8005a84 <__libc_init_array+0x38>)
 8005a50:	4c0d      	ldr	r4, [pc, #52]	; (8005a88 <__libc_init_array+0x3c>)
 8005a52:	1b64      	subs	r4, r4, r5
 8005a54:	10a4      	asrs	r4, r4, #2
 8005a56:	2600      	movs	r6, #0
 8005a58:	42a6      	cmp	r6, r4
 8005a5a:	d109      	bne.n	8005a70 <__libc_init_array+0x24>
 8005a5c:	4d0b      	ldr	r5, [pc, #44]	; (8005a8c <__libc_init_array+0x40>)
 8005a5e:	4c0c      	ldr	r4, [pc, #48]	; (8005a90 <__libc_init_array+0x44>)
 8005a60:	f000 f820 	bl	8005aa4 <_init>
 8005a64:	1b64      	subs	r4, r4, r5
 8005a66:	10a4      	asrs	r4, r4, #2
 8005a68:	2600      	movs	r6, #0
 8005a6a:	42a6      	cmp	r6, r4
 8005a6c:	d105      	bne.n	8005a7a <__libc_init_array+0x2e>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a74:	4798      	blx	r3
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7ee      	b.n	8005a58 <__libc_init_array+0xc>
 8005a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7e:	4798      	blx	r3
 8005a80:	3601      	adds	r6, #1
 8005a82:	e7f2      	b.n	8005a6a <__libc_init_array+0x1e>
 8005a84:	08005ae4 	.word	0x08005ae4
 8005a88:	08005ae4 	.word	0x08005ae4
 8005a8c:	08005ae4 	.word	0x08005ae4
 8005a90:	08005ae8 	.word	0x08005ae8

08005a94 <memset>:
 8005a94:	4402      	add	r2, r0
 8005a96:	4603      	mov	r3, r0
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d100      	bne.n	8005a9e <memset+0xa>
 8005a9c:	4770      	bx	lr
 8005a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa2:	e7f9      	b.n	8005a98 <memset+0x4>

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
